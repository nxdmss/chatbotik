#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import http.server
import socketserver
import json
import os
from urllib.parse import urlparse, parse_qs
import mimetypes

# –ü—Ä–æ—Å—Ç—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_products = [
    {
        "id": 1,
        "title": "–¢–µ—Å—Ç–æ–≤—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏",
        "description": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
        "price": 5000,
        "sizes": ["40", "41", "42"],
        "photo": "/webapp/static/uploads/default.jpg",
        "is_active": True
    },
    {
        "id": 2,
        "title": "–¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–¥—ã",
        "description": "–ö–µ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
        "price": 3000,
        "sizes": ["38", "39", "40"],
        "photo": "/webapp/static/uploads/default.jpg",
        "is_active": True
    }
]

class TestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        print(f"GET {self.path}")
        
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            with open('local_test.html', 'r', encoding='utf-8') as f:
                self.wfile.write(f.read().encode('utf-8'))
            return
            
        elif self.path == '/webapp/products.json':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(test_products).encode('utf-8'))
            return
            
        elif self.path.startswith('/webapp/admin/products'):
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps({"products": test_products}).encode('utf-8'))
            return
            
        elif self.path == '/webapp/static/uploads/default.jpg':
            self.send_response(200)
            self.send_header('Content-type', 'image/jpeg')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É
            self.wfile.write(b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00H\x00H\x00\x00\xff\xdb\x00C\x00\x08\x06\x06\x07\x06\x05\x08\x07\x07\x07\t\t\x08\n\x0c\x14\r\x0c\x0b\x0b\x0c\x19\x12\x13\x0f\x14\x1d\x1a\x1f\x1e\x1d\x1a\x1c\x1c $.\' ",#\x1c\x1c(7),01444\x1f\'9=82<.342\xff\xc0\x00\x11\x08\x00\x01\x00\x01\x01\x01\x11\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x14\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xff\xc4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00\x3f\x00\xaa\xff\xd9')
            return
            
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
            super().do_GET()
    
    def do_POST(self):
        print(f"POST {self.path}")
        
        if self.path.startswith('/webapp/admin/products'):
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {post_data}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            new_product = {
                "id": len(test_products) + 1,
                "title": "–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
                "description": "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
                "price": 1000,
                "sizes": ["M", "L"],
                "photo": "/webapp/static/uploads/default.jpg",
                "is_active": True
            }
            
            test_products.append(new_product)
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            response = {
                "success": True,
                "product_id": new_product["id"],
                "message": "–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
            }
            self.wfile.write(json.dumps(response).encode('utf-8'))
            return
            
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_PUT(self):
        print(f"PUT {self.path}")
        
        if self.path.startswith('/webapp/admin/products/'):
            product_id = int(self.path.split('/')[-1])
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
            product = next((p for p in test_products if p["id"] == product_id), None)
            if product:
                product["title"] = "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"
                product["description"] = "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                response = {"success": True, "message": "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
            else:
                self.send_response(404)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                response = {"error": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
            return
            
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_DELETE(self):
        print(f"DELETE {self.path}")
        
        if self.path.startswith('/webapp/admin/products/'):
            product_id = int(self.path.split('/')[-1])
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
            product = next((p for p in test_products if p["id"] == product_id), None)
            if product:
                product["is_active"] = False
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                response = {"success": True, "message": "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
            else:
                self.send_response(404)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                response = {"error": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
            return
            
        else:
            self.send_response(404)
            self.end_headers()

if __name__ == "__main__":
    PORT = 8000
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    print(f"üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:{PORT} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    with socketserver.TCPServer(("", PORT), TestHandler) as httpd:
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
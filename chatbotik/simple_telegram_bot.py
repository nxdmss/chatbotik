#!/usr/bin/env python3
"""
üåô DARK SHOP BOT V3 - –° –§–û–¢–û–ì–†–ê–§–ò–Ø–ú–ò –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï–ú
========================================================
–í–µ—Ä—Å–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤
"""

import os
import json
import sqlite3
import base64
import uuid
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
import time
try:
    from PIL import Image
    from io import BytesIO
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False
    print("‚ö†Ô∏è PIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –±–µ–∑ —Å–∂–∞—Ç–∏—è")

try:
    import requests
    REQUESTS_AVAILABLE = True
except ImportError:
    REQUESTS_AVAILABLE = False

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '')
PORT = int(os.getenv('PORT', 8000))
WEBAPP_URL = f'http://localhost:{PORT}'
UPLOADS_DIR = 'uploads'

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
os.makedirs(UPLOADS_DIR, exist_ok=True)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_PATH = 'shop.db'

class DarkShopBot:
    def __init__(self):
        self.token = BOT_TOKEN
        self.webapp_url = WEBAPP_URL
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                price INTEGER NOT NULL,
                image_url TEXT DEFAULT '',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                customer_name TEXT NOT NULL,
                customer_phone TEXT NOT NULL,
                total_amount INTEGER NOT NULL,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute('SELECT COUNT(*) FROM products')
        if cursor.fetchone()[0] == 0:
            test_products = [
                ('iPhone 15 Pro', 99999, ''),
                ('MacBook Air M3', 129999, ''),
                ('Nike Air Max', 8999, ''),
                ('–ö–æ—Ñ–µ Starbucks', 299, ''),
                ('–ö–Ω–∏–≥–∞ Python', 1999, ''),
                ('Samsung Galaxy', 89999, ''),
                ('Adidas Boost', 12999, ''),
                ('–ß–∞–π Earl Grey', 599, ''),
                ('iPad Pro', 79999, ''),
                ('Nike Dunk', 7999, ''),
                ('–ö–æ—Ñ–µ Lavazza', 399, ''),
                ('–ö–Ω–∏–≥–∞ JavaScript', 2499, '')
            ]
            
            for title, price, image_url in test_products:
                cursor.execute('''
                    INSERT INTO products (title, price, image_url)
                    VALUES (?, ?, ?)
                ''', (title, price, image_url))
            
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def save_image(self, base64_data):
        """–ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ base64"""
        try:
            print(f"üîç save_image –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª–∏–Ω–æ–π: {len(base64_data) if base64_data else 0}")
            
            if not base64_data or base64_data.strip() == '':
                print("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É")
                return ''
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ base64
            if len(base64_data) < 100:
                print(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {base64_data[:50]}...")
                return ''
            
            print(f"üì∏ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–ª–∏–Ω–∞: {len(base64_data)}")
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - —É–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            if base64_data.startswith('data:'):
                # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—è—Ç—É—é –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ base64 –¥–∞–Ω–Ω—ã–µ
                if ',' in base64_data:
                    base64_data = base64_data.split(',', 1)[1]
                    print("üì∏ –£–±—Ä–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ data:")
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
            try:
                image_data = base64.b64decode(base64_data)
                print(f"‚úÖ Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(image_data)} –±–∞–π—Ç")
            except Exception as decode_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {decode_error}")
                return ''
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            filename = f"img_{uuid.uuid4().hex[:8]}.jpg"
            filepath = os.path.join(UPLOADS_DIR, filename)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(UPLOADS_DIR):
                os.makedirs(UPLOADS_DIR)
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {UPLOADS_DIR}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(filepath, 'wb') as f:
                f.write(image_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
            if os.path.exists(filepath):
                file_size = os.path.getsize(filepath)
                result_url = f"/uploads/{filename}"
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename} ({file_size} –±–∞–π—Ç)")
                print(f"üìÅ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {filepath}")
                print(f"üåê URL –¥–ª—è –±–∞–∑—ã: {result_url}")
                return result_url
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è: {filepath}")
                return ''
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return ''
    
    def send_message(self, chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.token or not REQUESTS_AVAILABLE:
            print(f"üì± [BOT] {chat_id}: {text}")
            return
        
        url = f'https://api.telegram.org/bot{self.token}/sendMessage'
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'Markdown'
        }
        
        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)
        
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def handle_start(self, chat_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        text = '''üõçÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!**

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üõí –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
‚Ä¢ üì¶ –î–æ–±–∞–≤–ª—è—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
‚Ä¢ üí≥ –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã
‚Ä¢ üìû –°–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å –Ω–∞–º–∏

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω!'''
        
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', 'web_app': {'url': self.webapp_url}}],
                [{'text': 'üì¶ –ö–∞—Ç–∞–ª–æ–≥', 'callback_data': 'catalog'}],
                [{'text': 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', 'callback_data': 'contact'}]
            ]
        }
        
        self.send_message(chat_id, text, keyboard)
    
    def handle_webapp_data(self, chat_id, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp"""
        try:
            if data.get('type') == 'order':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                conn = sqlite3.connect(DATABASE_PATH)
                cursor = conn.cursor()
                
                order_data = data.get('order', {})
                total_amount = 0
                
                # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å—É–º–º—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ü–µ–Ω—ã –∏–∑ –ë–î)
                for item in order_data.get('items', []):
                    cursor.execute('SELECT price FROM products WHERE id = ?', (item.get('product_id'),))
                    product = cursor.fetchone()
                    if product:
                        total_amount += product[0] * item.get('quantity', 1)
                
                cursor.execute('''
                    INSERT INTO orders (customer_name, customer_phone, total_amount)
                    VALUES (?, ?, ?)
                ''', (order_data.get('customer_name', ''), 
                      order_data.get('customer_phone', ''), 
                      total_amount))
                
                order_id = cursor.lastrowid
                conn.commit()
                conn.close()
                
                response_text = f'''‚úÖ **–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!**

üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_id}
üí∞ –°—É–º–º–∞: {total_amount:,} ‚ÇΩ
üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!'''
                
                self.send_message(chat_id, response_text)
                
            elif data.get('type') == 'feedback':
                response_text = f'''‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!**

üìù –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{data.get('feedback', '')}"

–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏–º!'''
                
                self.send_message(chat_id, response_text)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö WebApp: {e}")
            self.send_message(chat_id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö')

class DarkWebAppHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            
            html_content = self.get_dark_page_v3()
            self.wfile.write(html_content.encode('utf-8'))
            
        elif self.path == '/api/products':
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            try:
                conn = sqlite3.connect(DATABASE_PATH)
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM products ORDER BY created_at DESC')
                products = cursor.fetchall()
                conn.close()
                
                products_data = []
                for product in products:
                    products_data.append({
                        'id': product[0],
                        'title': product[1],
                        'price': product[2],
                        'image_url': product[3] or '',
                        'created_at': product[4]
                    })
                
                print(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(products_data)} —Ç–æ–≤–∞—Ä–æ–≤")
                for p in products_data:
                    print(f"  - {p['title']}: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ = {p['image_url'] or '–ù–ï–¢'}")
                
                self.wfile.write(json.dumps(products_data, ensure_ascii=False).encode('utf-8'))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
                self.wfile.write(json.dumps([]).encode('utf-8'))
        
        elif self.path == '/test-image':
            # –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            
            test_html = '''
            <!DOCTYPE html>
            <html>
            <head><title>–¢–µ—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</title></head>
            <body>
                <h1>–¢–µ—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h1>
                <p>–ü–∞–ø–∫–∞ uploads:</p>
                <ul>
            '''
            
            if os.path.exists(UPLOADS_DIR):
                files = os.listdir(UPLOADS_DIR)
                for file in files:
                    test_html += f'<li><a href="/uploads/{file}">{file}</a></li>'
                    test_html += f'<li><img src="/uploads/{file}" style="width:100px; height:100px; object-fit:cover; border:1px solid #ccc; margin:5px;"></li>'
            else:
                test_html += '<li>–ü–∞–ø–∫–∞ uploads –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</li>'
            
            test_html += '''
                </ul>
                <p><a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞–≥–∞–∑–∏–Ω—É</a></p>
            </body>
            </html>
            '''
            
            self.wfile.write(test_html.encode('utf-8'))
        
        elif self.path.startswith('/uploads/'):
            # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            filename = self.path[9:]  # –£–±–∏—Ä–∞–µ–º '/uploads/'
            filepath = os.path.join(UPLOADS_DIR, filename)
            
            print(f"üñºÔ∏è –ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {self.path}")
            print(f"üìÅ –ò—â–µ–º —Ñ–∞–π–ª: {filepath}")
            
            if os.path.exists(filepath):
                file_size = os.path.getsize(filepath)
                print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
                
                self.send_response(200)
                self.send_header('Content-type', 'image/jpeg')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.send_header('Cache-Control', 'public, max-age=3600')
                self.end_headers()
                
                try:
                    with open(filepath, 'rb') as f:
                        content = f.read()
                        self.wfile.write(content)
                    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {filename} ({len(content)} –±–∞–π—Ç)")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                    self.send_response(500)
                    self.end_headers()
                    self.wfile.write(b'Server Error')
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if os.path.exists(UPLOADS_DIR):
                    files = os.listdir(UPLOADS_DIR)
                    print(f"üìÅ –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ uploads: {files}")
                else:
                    print(f"üìÅ –ü–∞–ø–∫–∞ uploads –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                
                self.send_response(404)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'Image not found')
        
        else:
            self.send_response(404)
            self.end_headers()
            self.wfile.write(b'Not Found')
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/api/orders':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            try:
                data = json.loads(post_data.decode('utf-8'))
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
                response = {'success': True, 'order_id': 12345}
                self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")
                self.send_response(500)
                self.end_headers()
                self.wfile.write(b'Internal Server Error')
        
        elif self.path == '/api/add-product':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            try:
                data = json.loads(post_data.decode('utf-8'))
                
                title = data.get('title', '')
                price = int(data.get('price', 0))
                image_data = data.get('image', '')
                
                print(f"üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: title='{title}', price={price}, image_data_len={len(image_data)}")
                
                if title and price > 0:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    bot = DarkShopBot()
                    image_url = bot.save_image(image_data)
                    print(f"üñºÔ∏è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
                    
                    conn = sqlite3.connect(DATABASE_PATH)
                    cursor = conn.cursor()
                    cursor.execute('''
                        INSERT INTO products (title, price, image_url)
                        VALUES (?, ?, ?)
                    ''', (title, price, image_url))
                    conn.commit()
                    conn.close()
                    
                    print(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {title} - {price} ‚ÇΩ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
                    response = {'success': True, 'message': '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!'}
                else:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: title='{title}', price={price}")
                    response = {'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞'}
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
                response = {'success': False, 'message': f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)}'}
                self.send_response(500)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
        
        elif self.path.startswith('/api/update-product/'):
            product_id = self.path.split('/')[-1]
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            try:
                data = json.loads(post_data.decode('utf-8'))
                
                title = data.get('title', '')
                price = int(data.get('price', 0))
                image_data = data.get('image', '')
                
                print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ID {product_id}: title='{title}', price={price}, image_len={len(image_data) if image_data else 0}")
                
                if title and price > 0:
                    conn = sqlite3.connect(DATABASE_PATH)
                    cursor = conn.cursor()
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                    if image_data and image_data.strip():
                        bot = DarkShopBot()
                        image_url = bot.save_image(image_data)
                        print(f"üñºÔ∏è –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_url}")
                        cursor.execute('''
                            UPDATE products 
                            SET title = ?, price = ?, image_url = ?
                            WHERE id = ?
                        ''', (title, price, image_url, product_id))
                        print(f"‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {title} -> {image_url}")
                    else:
                        print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                        cursor.execute('''
                            UPDATE products 
                            SET title = ?, price = ?
                            WHERE id = ?
                        ''', (title, price, product_id))
                        print(f"‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {title}")
                    
                    rows_affected = cursor.rowcount
                    conn.commit()
                    conn.close()
                    
                    print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {rows_affected}")
                    
                    response = {'success': True, 'message': '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!'}
                else:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: title='{title}', price={price}")
                    response = {'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞'}
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
                import traceback
                traceback.print_exc()
                response = {'success': False, 'message': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞'}
                self.send_response(500)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
        
        elif self.path.startswith('/api/delete-product/'):
            product_id = self.path.split('/')[-1]
            
            try:
                conn = sqlite3.connect(DATABASE_PATH)
                cursor = conn.cursor()
                cursor.execute('DELETE FROM products WHERE id = ?', (product_id,))
                conn.commit()
                conn.close()
                
                response = {'success': True, 'message': '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!'}
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
                response = {'success': False, 'message': '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞'}
                self.send_response(500)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
        
        else:
            self.send_response(404)
            self.end_headers()
            self.wfile.write(b'Not Found')
    
    def get_dark_page_v3(self):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ WebApp —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        return '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üõçÔ∏è Dark Shop - Telegram Mini App</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        * { 
            margin: 0; 
            padding: 0; 
            box-sizing: border-box; 
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #1a1a1a;
            color: #ffffff;
            padding: 16px;
            min-height: 100vh;
            padding-bottom: 100px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 24px;
            padding: 20px;
            background: #2d2d2d;
            border-radius: 12px;
            border: 1px solid #333;
        }
        
        .header h1 {
            font-size: 24px;
            margin-bottom: 8px;
            color: #ffffff;
        }
        
        .header p {
            color: #cccccc;
            font-size: 14px;
        }
        
        .search-box {
            position: relative;
            margin-bottom: 16px;
        }
        
        .search-box input {
            width: 100%;
            background: #2d2d2d;
            border: 1px solid #333;
            border-radius: 8px;
            padding: 12px 16px 12px 40px;
            color: #ffffff;
            font-size: 16px;
        }
        
        .search-box input:focus {
            outline: none;
            border-color: #1e40af;
        }
        
        .search-box::before {
            content: 'üîç';
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 16px;
        }
        
        .products-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
            margin-bottom: 24px;
        }
        
        .product-card {
            background: #2d2d2d;
            border: 1px solid #333;
            border-radius: 8px;
            padding: 12px;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .product-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(30, 64, 175, 0.3);
            border-color: #1e40af;
        }
        
        .product-image {
            width: 100%;
            height: 80px;
            background: #1a1a1a;
            border-radius: 6px;
            margin-bottom: 8px;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
            font-size: 24px;
            position: relative;
        }
        
        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: center;
            transition: transform 0.3s ease;
        }
        
        .product-image img:hover {
            transform: scale(1.05);
        }
        
        .product-title {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 6px;
            color: #ffffff;
            line-height: 1.3;
        }
        
        .product-description {
            color: #aaaaaa;
            font-size: 11px;
            margin-bottom: 8px;
            line-height: 1.2;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        
        .product-price {
            font-size: 16px;
            font-weight: 700;
            color: #3b82f6;
            margin-bottom: 8px;
        }
        
        .add-to-cart-btn {
            background: #1e40af;
            color: #ffffff;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 600;
            width: 100%;
            transition: all 0.3s ease;
        }
        
        .add-to-cart-btn:hover {
            background: #1d4ed8;
            transform: scale(1.02);
        }
        
        .cart-section {
            background: #2d2d2d;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 20px;
            border: 1px solid #333;
        }
        
        .cart-section h2 {
            color: #3b82f6;
            margin-bottom: 16px;
            font-size: 18px;
        }
        
        .checkout-btn {
            background: #1e40af;
            color: white;
            border: none;
            padding: 14px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            margin-top: 16px;
            transition: all 0.3s ease;
        }
        
        .checkout-btn:hover:not(.hidden) {
            background: #1d4ed8;
            transform: scale(1.02);
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #aaaaaa;
            font-size: 16px;
        }
        
        .hidden { 
            display: none; 
        }
        
        .admin-section {
            background: #2d2d2d;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 20px;
            border: 1px solid #333;
        }
        
        .admin-section h2 {
            color: #3b82f6;
            margin-bottom: 16px;
            font-size: 18px;
        }
        
        .admin-form {
            display: grid;
            gap: 12px;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
            gap: 6px;
        }
        
        .form-group label {
            color: #3b82f6;
            font-weight: 600;
            font-size: 14px;
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 6px;
            padding: 10px;
            color: #ffffff;
            font-size: 14px;
        }
        
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #1e40af;
        }
        
        .file-input-wrapper {
            position: relative;
            display: inline-block;
            width: 100%;
        }
        
        .file-input {
            position: absolute;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }
        
        .file-input-button {
            background: #1e40af;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            width: 100%;
            transition: all 0.3s ease;
        }
        
        .file-input-button:hover {
            background: #1d4ed8;
        }
        
        .image-preview {
            width: 100%;
            height: 120px;
            background: #1a1a1a;
            border-radius: 6px;
            margin-top: 8px;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
            font-size: 18px;
        }
        
        .image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .add-product-btn {
            background: #1e40af;
            color: white;
            border: none;
            padding: 12px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .add-product-btn:hover {
            background: #1d4ed8;
            transform: scale(1.02);
        }
        
        .success-message {
            background: #1e40af;
            color: white;
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 16px;
            text-align: center;
            font-weight: 600;
        }
        
        .error-message {
            background: #dc2626;
            color: white;
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 16px;
            text-align: center;
            font-weight: 600;
        }
        
        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            background: #1a1a1a;
            border-radius: 6px;
            margin-bottom: 8px;
            border: 1px solid #333;
        }
        
        .cart-item-info {
            flex: 1;
        }
        
        .cart-item-title {
            color: #ffffff;
            font-weight: 600;
            margin-bottom: 4px;
            font-size: 14px;
        }
        
        .cart-item-price {
            color: #3b82f6;
            font-weight: 600;
            font-size: 14px;
        }
        
        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .quantity-btn {
            background: #333;
            color: #ffffff;
            border: none;
            width: 28px;
            height: 28px;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            font-size: 12px;
        }
        
        .quantity-btn:hover {
            background: #1e40af;
        }
        
        .quantity-input {
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 4px;
            padding: 4px;
            color: #ffffff;
            width: 40px;
            text-align: center;
            font-size: 12px;
        }
        
        .remove-btn {
            background: #dc2626;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 10px;
            margin-left: 6px;
            transition: all 0.3s ease;
        }
        
        .remove-btn:hover {
            background: #b91c1c;
        }
        
        /* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: #2d2d2d;
            border-top: 1px solid #333;
            padding: 8px 16px;
            display: flex;
            justify-content: space-around;
            z-index: 1000;
        }
        
        .nav-btn {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 4px;
            background: transparent;
            border: none;
            color: #aaaaaa;
            cursor: pointer;
            padding: 8px 12px;
            border-radius: 8px;
            transition: all 0.3s ease;
            min-width: 60px;
        }
        
        .nav-btn.active {
            color: #3b82f6;
            background: rgba(30, 64, 175, 0.1);
        }
        
        .nav-btn i {
            font-size: 18px;
        }
        
        .nav-btn span {
            font-size: 10px;
            font-weight: 600;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .cart-count {
            position: absolute;
            top: -2px;
            right: -2px;
            background: #dc2626;
            color: white;
            font-size: 10px;
            padding: 2px 6px;
            border-radius: 10px;
            min-width: 18px;
            text-align: center;
            font-weight: 600;
        }
        
        /* –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */
        .admin-products-list {
            margin-bottom: 20px;
        }
        
        .admin-product-item {
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 12px;
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .admin-product-image {
            width: 60px;
            height: 60px;
            background: #2d2d2d;
            border-radius: 6px;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
            font-size: 18px;
        }
        
        .admin-product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .admin-product-info {
            flex: 1;
        }
        
        .admin-product-title {
            color: #ffffff;
            font-weight: 600;
            margin-bottom: 4px;
            font-size: 14px;
        }
        
        .admin-product-price {
            color: #3b82f6;
            font-weight: 600;
            font-size: 14px;
        }
        
        .admin-product-actions {
            display: flex;
            gap: 8px;
        }
        
        .edit-btn {
            background: #1e40af;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
        }
        
        .edit-btn:hover {
            background: #1d4ed8;
        }
        
        .delete-btn {
            background: #dc2626;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
        }
        
        .delete-btn:hover {
            background: #b91c1c;
        }
        
        @media (max-width: 768px) {
            .products-grid {
                grid-template-columns: 1fr 1fr;
                gap: 8px;
            }
            
            .product-card {
                padding: 8px;
            }
            
            .product-title {
                font-size: 12px;
            }
            
            .product-description {
                font-size: 10px;
            }
            
            .product-price {
                font-size: 14px;
            }
            
            .add-to-cart-btn {
                padding: 6px 8px;
                font-size: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üõçÔ∏è Dark Shop</h1>
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!</p>
    </div>
    
    <div id="catalog" class="tab-content active">
        <div class="search-box">
            <input type="text" id="searchInput" placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..." onkeyup="filterProducts()">
        </div>
        
        <div id="productsContainer" class="loading">
            <div>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</div>
        </div>
    </div>
    
    <div id="cart" class="tab-content">
        <div class="cart-section">
            <h2>üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫</h2>
            <div id="cartItems">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</div>
            <div id="cartTotal" style="font-size: 16px; font-weight: 600; color: #3b82f6; margin-top: 16px;">–ò—Ç–æ–≥–æ: 0 ‚ÇΩ</div>
            <button id="checkoutBtn" class="checkout-btn hidden">üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</button>
        </div>
    </div>
    
    <div id="admin" class="tab-content">
        <div class="admin-section">
            <h2>‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
            <div id="adminMessage"></div>
            
            <!-- –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ -->
            <div class="admin-products-list" id="adminProductsList">
                <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</div>
            </div>
            
            <!-- –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è -->
            <form class="admin-form" id="adminForm">
                <div class="form-group">
                    <label for="productTitle">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</label>
                    <input type="text" id="productTitle" required>
                </div>
                <div class="form-group">
                    <label for="productPrice">–¶–µ–Ω–∞ (‚ÇΩ)</label>
                    <input type="number" id="productPrice" min="1" required>
                </div>
                <div class="form-group">
                    <label for="productImage">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è</label>
                    <div class="file-input-wrapper">
                        <input type="file" id="productImage" class="file-input" accept="image/*" onchange="handleImageUpload(this)">
                        <button type="button" class="file-input-button">üì∑ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ</button>
                    </div>
                    <div class="image-preview" id="imagePreview">–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</div>
                </div>
                <button type="submit" class="add-product-btn" id="submitBtn">‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</button>
            </form>
        </div>
    </div>

    <!-- –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è -->
    <div class="bottom-nav">
        <button class="nav-btn active" onclick="showTab('catalog')">
            <span>üì¶</span>
            <span>–ö–∞—Ç–∞–ª–æ–≥</span>
        </button>
        <button class="nav-btn" onclick="showTab('cart')">
            <span>üõí</span>
            <span>–ö–æ—Ä–∑–∏–Ω–∞</span>
            <span class="cart-count" id="cartCount">0</span>
        </button>
        <button class="nav-btn" onclick="showTab('admin')">
            <span>‚öôÔ∏è</span>
            <span>–ê–¥–º–∏–Ω</span>
        </button>
    </div>

    <script>
        const tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ Telegram WebApp
        const isTelegramWebApp = typeof window.Telegram !== 'undefined' && window.Telegram.WebApp;
        console.log('üì± Telegram WebApp:', isTelegramWebApp ? '–î–ê' : '–ù–ï–¢');
        
        if (isTelegramWebApp) {
            console.log('ü§ñ Telegram WebApp –¥–∞–Ω–Ω—ã–µ:', {
                platform: tg.platform,
                version: tg.version,
                colorScheme: tg.colorScheme,
                isExpanded: tg.isExpanded
            });
        }
        
        let products = [];
        let cart = [];
        let currentEditingProduct = null;
        let selectedImageData = '';
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        async function loadProducts() {
            try {
                const response = await fetch('/api/products');
                products = await response.json();
                renderProducts();
                if (document.getElementById('adminProductsList')) {
                    renderAdminProducts();
                }
            } catch (error) {
                document.getElementById('productsContainer').innerHTML = 
                    '<div class="loading">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</div>';
                console.error('Error loading products:', error);
            }
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        function renderProducts() {
            const container = document.getElementById('productsContainer');
            container.className = 'products-grid';
            
            if (products.length === 0) {
                container.innerHTML = '<div class="loading">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                return;
            }
            
            console.log('üõçÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤:', products.length);
            products.forEach(product => {
                console.log(`üì¶ –¢–æ–≤–∞—Ä: ${product.title}, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${product.image_url || '–Ω–µ—Ç'}`);
                if (product.image_url && product.image_url.startsWith('/uploads/')) {
                    console.log(`üñºÔ∏è –ü–æ–ª–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${window.location.origin}${product.image_url}`);
                }
            });
            
            container.innerHTML = products.map(product => `
                <div class="product-card">
                    <div class="product-image">
                        ${product.image_url ? 
                            `<img src="${window.location.origin}${product.image_url}" alt="${product.title}" 
                                 style="width: 100%; height: 100%; object-fit: cover;"
                                 onload="console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram WebApp:', this.src)"
                                 onerror="console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Telegram WebApp:', this.src); this.style.display='none'; this.nextElementSibling.style.display='flex';">
                             <div style="display:none; color: #666; font-size: 24px; width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;">üì∑</div>` : 
                            '<div style="color: #666; font-size: 24px; width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;">üì∑</div>'
                        }
                    </div>
                    <div class="product-title">${product.title}</div>
                    <div class="product-price">${product.price.toLocaleString()} ‚ÇΩ</div>
                    <button class="add-to-cart-btn" onclick="addToCart(${product.id})">
                        –í –∫–æ—Ä–∑–∏–Ω—É
                    </button>
                </div>
            `).join('');
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        function renderAdminProducts() {
            const container = document.getElementById('adminProductsList');
            
            if (products.length === 0) {
                container.innerHTML = '<div class="loading">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                return;
            }
            
            container.innerHTML = products.map(product => `
                <div class="admin-product-item">
                    <div class="admin-product-image">
                        ${product.image_url ? 
                            `<img src="${product.image_url}" alt="${product.title}" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                             <div style="display:none;">üì∑</div>` : 
                            'üì∑'
                        }
                    </div>
                    <div class="admin-product-info">
                        <div class="admin-product-title">${product.title}</div>
                        <div class="admin-product-price">${product.price.toLocaleString()} ‚ÇΩ</div>
                    </div>
                    <div class="admin-product-actions">
                        <button class="edit-btn" onclick="editProduct(${product.id})">‚úèÔ∏è</button>
                        <button class="delete-btn" onclick="deleteProduct(${product.id})">üóëÔ∏è</button>
                    </div>
                </div>
            `).join('');
        }
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        function filterProducts() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const filteredProducts = products.filter(product => 
                product.title.toLowerCase().includes(searchTerm) ||
                (product.description && product.description.toLowerCase().includes(searchTerm))
            );
            
            const container = document.getElementById('productsContainer');
            if (filteredProducts.length === 0) {
                container.innerHTML = '<div class="loading">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                return;
            }
            
            container.innerHTML = filteredProducts.map(product => `
                <div class="product-card">
                    <div class="product-image">
                        ${product.image_url ? 
                            `<img src="${window.location.origin}${product.image_url}" alt="${product.title}" 
                                 style="width: 100%; height: 100%; object-fit: cover;"
                                 onload="console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram WebApp:', this.src)"
                                 onerror="console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Telegram WebApp:', this.src); this.style.display='none'; this.nextElementSibling.style.display='flex';">
                             <div style="display:none; color: #666; font-size: 24px; width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;">üì∑</div>` : 
                            '<div style="color: #666; font-size: 24px; width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;">üì∑</div>'
                        }
                    </div>
                    <div class="product-title">${product.title}</div>
                    <div class="product-price">${product.price.toLocaleString()} ‚ÇΩ</div>
                    <button class="add-to-cart-btn" onclick="addToCart(${product.id})">
                        –í –∫–æ—Ä–∑–∏–Ω—É
                    </button>
                </div>
            `).join('');
        }
        
        // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        function handleImageUpload(input) {
            console.log('üì∏ handleImageUpload –≤—ã–∑–≤–∞–Ω–∞');
            
            const file = input.files[0];
            if (file) {
                console.log('üì∏ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:', {
                    name: file.name,
                    size: file.size,
                    type: file.type,
                    lastModified: file.lastModified
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
                if (file.size > 5 * 1024 * 1024) {
                    console.log('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:', file.size, '–±–∞–π—Ç');
                    alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º 5MB.');
                    input.value = '';
                    return;
                }
                
                console.log('üì∏ –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...');
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    selectedImageData = e.target.result;
                    console.log('üì∏ Base64 –≥–æ—Ç–æ–≤:', {
                        length: selectedImageData.length,
                        startsWith: selectedImageData.substring(0, 50) + '...',
                        type: selectedImageData.split(',')[0]
                    });
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                    const preview = document.getElementById('imagePreview');
                    preview.innerHTML = `<img src="${e.target.result}" alt="Preview" style="max-width: 100%; max-height: 120px; object-fit: cover; border-radius: 4px;">`;
                    console.log('üì∏ –ü—Ä–µ–≤—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
                };
                
                reader.onerror = function(error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
                    alert('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞!');
                };
                
                reader.onprogress = function(e) {
                    if (e.lengthComputable) {
                        const percentComplete = (e.loaded / e.total) * 100;
                        console.log('üì∏ –ü—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è:', percentComplete.toFixed(2) + '%');
                    }
                };
                
                reader.readAsDataURL(file);
            } else {
                console.log('üì∏ –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ');
                selectedImageData = '';
                document.getElementById('imagePreview').innerHTML = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
            }
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
        function addToCart(productId) {
            const product = products.find(p => p.id === productId);
            if (!product) return;
            
            const existingItem = cart.find(item => item.product_id === productId);
            if (existingItem) {
                existingItem.quantity += 1;
            } else {
                cart.push({
                    product_id: productId,
                    quantity: 1,
                    product: product
                });
            }
            
            updateCartUI();
            tg.showAlert(`${product.title} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`);
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        function removeFromCart(productId) {
            cart = cart.filter(item => item.product_id !== productId);
            updateCartUI();
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        function updateQuantity(productId, quantity) {
            if (quantity <= 0) {
                removeFromCart(productId);
                return;
            }
            
            const item = cart.find(item => item.product_id === productId);
            if (item) {
                item.quantity = quantity;
                updateCartUI();
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–æ—Ä–∑–∏–Ω—ã
        function updateCartUI() {
            const cartItems = document.getElementById('cartItems');
            const cartTotal = document.getElementById('cartTotal');
            const checkoutBtn = document.getElementById('checkoutBtn');
            const cartCount = document.getElementById('cartCount');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            cartCount.textContent = totalItems;
            cartCount.style.display = totalItems > 0 ? 'block' : 'none';
            
            if (cart.length === 0) {
                cartItems.innerHTML = '<div style="text-align: center; color: #aaaaaa; padding: 20px;">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</div>';
                cartTotal.innerHTML = '–ò—Ç–æ–≥–æ: 0 ‚ÇΩ';
                checkoutBtn.classList.add('hidden');
                return;
            }
            
            cartItems.innerHTML = cart.map(item => `
                <div class="cart-item">
                    <div class="cart-item-info">
                        <div class="cart-item-title">${item.product.title}</div>
                        <div class="cart-item-price">${item.product.price.toLocaleString()} ‚ÇΩ</div>
                    </div>
                    <div class="quantity-controls">
                        <button class="quantity-btn" onclick="updateQuantity(${item.product_id}, ${item.quantity - 1})">-</button>
                        <input type="number" class="quantity-input" value="${item.quantity}" min="1" 
                               onchange="updateQuantity(${item.product_id}, parseInt(this.value))">
                        <button class="quantity-btn" onclick="updateQuantity(${item.product_id}, ${item.quantity + 1})">+</button>
                        <button class="remove-btn" onclick="removeFromCart(${item.product_id})">üóëÔ∏è</button>
                    </div>
                </div>
            `).join('');
            
            const total = cart.reduce((sum, item) => sum + (item.product.price * item.quantity), 0);
            cartTotal.innerHTML = `–ò—Ç–æ–≥–æ: ${total.toLocaleString()} ‚ÇΩ`;
            checkoutBtn.classList.remove('hidden');
        }
        
        // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        function checkout() {
            if (cart.length === 0) return;
            
            const orderData = {
                type: 'order',
                order: {
                    customer_name: '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å',
                    customer_phone: '+7 (999) 123-45-67',
                    items: cart
                }
            };
            
            tg.sendData(JSON.stringify(orderData));
            tg.showAlert('–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!');
            
            cart = [];
            updateCartUI();
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        async function addProduct(event) {
            event.preventDefault();
            
            console.log('üöÄ –§—É–Ω–∫—Ü–∏—è addProduct –≤—ã–∑–≤–∞–Ω–∞');
            
            const title = document.getElementById('productTitle').value;
            const price = parseInt(document.getElementById('productPrice').value);
            
            console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', { 
                title: title, 
                price: price, 
                imageData: selectedImageData ? `–µ—Å—Ç—å (${selectedImageData.length} —Å–∏–º–≤–æ–ª–æ–≤)` : '–Ω–µ—Ç',
                currentEditingProduct: currentEditingProduct
            });
            
            if (!title || !price || price <= 0) {
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã');
                showAdminMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!', 'error');
                return;
            }
            
            try {
                const url = currentEditingProduct ? 
                    `/api/update-product/${currentEditingProduct}` : 
                    '/api/add-product';
                
                console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞:', url);
                
                const requestData = {
                    title: title,
                    price: price,
                    image: selectedImageData
                };
                
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', {
                    title: title,
                    price: price,
                    imageLength: selectedImageData ? selectedImageData.length : 0,
                    fullRequestData: requestData
                });
                
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                });
                
                console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
                
                const result = await response.json();
                
                console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
                
                if (result.success) {
                    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
                    showAdminMessage(
                        currentEditingProduct ? '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!' : '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 
                        'success'
                    );
                    resetForm();
                    await loadProducts();
                } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', result.message);
                    showAdminMessage(result.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'error');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ fetch:', error);
                showAdminMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ' + error.message, 'error');
            }
        }
        
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        function editProduct(productId) {
            const product = products.find(p => p.id === productId);
            if (!product) return;
            
            currentEditingProduct = productId;
            
            document.getElementById('productTitle').value = product.title;
            document.getElementById('productPrice').value = product.price;
            
            if (product.image_url) {
                selectedImageData = '';
                document.getElementById('imagePreview').innerHTML = `<img src="${product.image_url}" alt="${product.title}">`;
            } else {
                selectedImageData = '';
                document.getElementById('imagePreview').innerHTML = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
            }
            
            document.getElementById('submitBtn').textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
            document.getElementById('adminForm').scrollIntoView({ behavior: 'smooth' });
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        async function deleteProduct(productId) {
            if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/delete-product/${productId}`, {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAdminMessage('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                    await loadProducts();
                } else {
                    showAdminMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'error');
                }
            } catch (error) {
                console.error('Error deleting product:', error);
                showAdminMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'error');
            }
        }
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        function resetForm() {
            currentEditingProduct = null;
            selectedImageData = '';
            document.getElementById('adminForm').reset();
            document.getElementById('imagePreview').innerHTML = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
            document.getElementById('submitBtn').textContent = '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        function showAdminMessage(message, type) {
            const messageDiv = document.getElementById('adminMessage');
            messageDiv.innerHTML = `<div class="${type}-message">${message}</div>`;
            
            setTimeout(() => {
                messageDiv.innerHTML = '';
            }, 3000);
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
        function showTab(tabName) {
            // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Ç–∞–±—ã
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
            
            // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∞–±–æ–≤
            if (tabName === 'cart') {
                updateCartUI();
            } else if (tabName === 'admin') {
                renderAdminProducts();
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.getElementById('checkoutBtn').addEventListener('click', checkout);
        document.getElementById('adminForm').addEventListener('submit', addProduct);
        
        // –ó–∞–ø—É—Å–∫
        loadProducts();
    </script>
</body>
</html>'''

def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        server = HTTPServer(('0.0.0.0', PORT), DarkWebAppHandler)
        print(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{PORT}")
        server.serve_forever()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåô –ó–ê–ü–£–°–ö DARK SHOP BOT V3")
    print("=" * 40)
    
    bot = DarkShopBot()
    
    if not bot.token:
        print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω - –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    else:
        print(f"ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        print(f"üì± –¢–æ–∫–µ–Ω: {bot.token[:10]}...")
        print(f"üåê WebApp URL: {bot.webapp_url}")
    
    print("=" * 40)
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    start_web_server()

if __name__ == "__main__":
    main()

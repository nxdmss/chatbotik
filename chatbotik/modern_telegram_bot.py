#!/usr/bin/env python3
"""
üöÄ –°–û–í–†–ï–ú–ï–ù–ù–´–ô TELEGRAM BOT –° –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–û–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
==================================================================
–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏
"""

import os
import json
import sqlite3
import base64
import uuid
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
import time
from pathlib import Path
import mimetypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
from modern_image_system import ModernImageProcessor

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '')
PORT = int(os.getenv('PORT', 8000))
WEBAPP_URL = f'http://localhost:{PORT}'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image_processor = ModernImageProcessor()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_PATH = 'shop.db'

class ModernShopBot:
    def __init__(self):
        self.token = BOT_TOKEN
        self.webapp_url = WEBAPP_URL
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π"""
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                price INTEGER NOT NULL,
                image_filename TEXT DEFAULT '',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        cursor.execute('SELECT COUNT(*) FROM products')
        count = cursor.fetchone()[0]
        
        if count == 0:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            test_products = [
                ('iPhone 15 Pro', 99999),
                ('MacBook Air M3', 129999),
                ('Nike Air Max', 8999),
                ('–ö–æ—Ñ–µ Starbucks', 299),
                ('–ö–Ω–∏–≥–∞ Python', 1999)
            ]
            
            cursor.executemany(
                'INSERT INTO products (title, price) VALUES (?, ?)',
                test_products
            )
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã")
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

class ModernHTTPHandler(BaseHTTPRequestHandler):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self, *args, **kwargs):
        self.bot = ModernShopBot()
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            print(f"üì• GET {self.path}")
            
            if self.path == '/':
                self.serve_main_page()
            elif self.path == '/api/products':
                self.serve_products_api()
            elif self.path.startswith('/uploads/'):
                self.serve_uploaded_file()
            elif self.path == '/api/images':
                self.serve_images_list()
            else:
                self.send_404()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ GET {self.path}: {e}")
            self.send_500()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            print(f"üì§ POST {self.path}")
            
            if self.path == '/api/add-product':
                self.handle_add_product()
            elif self.path.startswith('/api/update-product/'):
                product_id = self.path.split('/')[-1]
                self.handle_update_product(product_id)
            elif self.path == '/api/upload-image':
                self.handle_upload_image()
            else:
                self.send_404()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ POST {self.path}: {e}")
            self.send_500()
    
    def do_DELETE(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            print(f"üóëÔ∏è DELETE {self.path}")
            
            if self.path.startswith('/api/delete-product/'):
                product_id = self.path.split('/')[-1]
                self.handle_delete_product(product_id)
            else:
                self.send_404()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ DELETE {self.path}: {e}")
            self.send_500()
    
    def serve_main_page(self):
        """–û—Ç–¥–∞—á–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        html_content = self.get_modern_html()
        
        self.send_response(200)
        self.send_header('Content-Type', 'text/html; charset=utf-8')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        self.wfile.write(html_content.encode('utf-8'))
    
    def serve_products_api(self):
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            conn = sqlite3.connect(DATABASE_PATH)
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM products ORDER BY created_at DESC')
            products = cursor.fetchall()
            conn.close()
            
            products_data = []
            for product in products:
                product_data = {
                    'id': product[0],
                    'title': product[1],
                    'price': product[2],
                    'image_url': self.get_image_url(product[3]) if product[3] else '',
                    'created_at': product[4]
                }
                products_data.append(product_data)
            
            print(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(products_data)} —Ç–æ–≤–∞—Ä–æ–≤")
            
            self.send_json_response(products_data)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            self.send_json_response({'error': str(e)}, status=500)
    
    def serve_uploaded_file(self):
        """–û—Ç–¥–∞—á–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ü–∞—Ä—Å–∏–º –ø—É—Ç—å
            path_parts = self.path.split('/')
            if len(path_parts) < 3:
                self.send_404()
                return
            
            folder = path_parts[2]  # thumbnails –∏–ª–∏ originals
            filename = '/'.join(path_parts[3:])  # –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –ø—É—Ç–∏
            
            if folder not in ['thumbnails', 'originals']:
                self.send_404()
                return
            
            file_path = image_processor.uploads_dir / folder / filename
            
            if not file_path.exists():
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                self.send_404()
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
            mime_type, _ = mimetypes.guess_type(str(file_path))
            if not mime_type:
                mime_type = 'image/jpeg'
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'rb') as f:
                content = f.read()
            
            print(f"üñºÔ∏è –û—Ç–¥–∞–µ–º —Ñ–∞–π–ª: {filename} ({len(content)} –±–∞–π—Ç)")
            
            self.send_response(200)
            self.send_header('Content-Type', mime_type)
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Cache-Control', 'public, max-age=3600')
            self.end_headers()
            self.wfile.write(content)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–¥–∞—á–∏ —Ñ–∞–π–ª–∞ {self.path}: {e}")
            self.send_404()
    
    def handle_add_product(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            title = data.get('title', '').strip()
            price = int(data.get('price', 0))
            image_base64 = data.get('image', '')
            
            print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: '{title}', —Ü–µ–Ω–∞: {price}")
            
            if not title or price <= 0:
                self.send_json_response({'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}, status=400)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_filename = ''
            if image_base64:
                result = image_processor.save_image(image_base64, title)
                if result['success']:
                    image_filename = result['filename']
                    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_filename}")
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result['error']}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            conn = sqlite3.connect(DATABASE_PATH)
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO products (title, price, image_filename) VALUES (?, ?, ?)',
                (title, price, image_filename)
            )
            conn.commit()
            conn.close()
            
            print(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {title}")
            self.send_json_response({'success': True, 'message': '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!'})
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
            self.send_json_response({'error': str(e)}, status=500)
    
    def handle_update_product(self, product_id):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            title = data.get('title', '').strip()
            price = int(data.get('price', 0))
            image_base64 = data.get('image', '')
            
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ID {product_id}: '{title}', —Ü–µ–Ω–∞: {price}")
            
            if not title or price <= 0:
                self.send_json_response({'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}, status=400)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
            conn = sqlite3.connect(DATABASE_PATH)
            cursor = conn.cursor()
            cursor.execute('SELECT image_filename FROM products WHERE id = ?', (product_id,))
            result = cursor.fetchone()
            
            if not result:
                conn.close()
                self.send_json_response({'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
                return
            
            old_image_filename = result[0]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_filename = old_image_filename
            if image_base64:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if old_image_filename:
                    image_processor.delete_image(old_image_filename)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ
                result = image_processor.save_image(image_base64, title)
                if result['success']:
                    image_filename = result['filename']
                    print(f"‚úÖ –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_filename}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
            cursor.execute(
                'UPDATE products SET title = ?, price = ?, image_filename = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
                (title, price, image_filename, product_id)
            )
            conn.commit()
            conn.close()
            
            print(f"‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: {title}")
            self.send_json_response({'success': True, 'message': '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!'})
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
            self.send_json_response({'error': str(e)}, status=500)
    
    def handle_delete_product(self, product_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        try:
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ID {product_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            conn = sqlite3.connect(DATABASE_PATH)
            cursor = conn.cursor()
            cursor.execute('SELECT title, image_filename FROM products WHERE id = ?', (product_id,))
            result = cursor.fetchone()
            
            if not result:
                conn.close()
                self.send_json_response({'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
                return
            
            title, image_filename = result
            
            # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if image_filename:
                image_processor.delete_image(image_filename)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_filename}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã
            cursor.execute('DELETE FROM products WHERE id = ?', (product_id,))
            conn.commit()
            conn.close()
            
            print(f"‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω: {title}")
            self.send_json_response({'success': True, 'message': '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!'})
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
            self.send_json_response({'error': str(e)}, status=500)
    
    def get_image_url(self, filename):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not filename:
            return ''
        return f'/uploads/thumbnails/{filename}'
    
    def send_json_response(self, data, status=200):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞"""
        self.send_response(status)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
    
    def send_404(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ 404 –æ—à–∏–±–∫–∏"""
        self.send_response(404)
        self.send_header('Content-Type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'Not Found')
    
    def send_500(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ 500 –æ—à–∏–±–∫–∏"""
        self.send_response(500)
        self.send_header('Content-Type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'Internal Server Error')
    
    def get_modern_html(self):
        """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
        return '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üõçÔ∏è Modern Shop</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #0a0a0a;
            color: #ffffff;
            min-height: 100vh;
            padding-bottom: 80px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px 0;
            border-bottom: 1px solid #333;
        }
        
        .header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .tabs {
            display: flex;
            justify-content: center;
            margin-bottom: 30px;
            gap: 10px;
        }
        
        .tab-button {
            background: #1a1a1a;
            border: 1px solid #333;
            color: #fff;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .tab-button.active {
            background: #2563eb;
            border-color: #2563eb;
        }
        
        .tab-button:hover {
            background: #1e40af;
            border-color: #1e40af;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .product-card {
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 12px;
            overflow: hidden;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .product-card:hover {
            transform: translateY(-5px);
            border-color: #2563eb;
            box-shadow: 0 10px 30px rgba(37, 99, 235, 0.2);
        }
        
        .product-image {
            width: 100%;
            height: 200px;
            background: #2a2a2a;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }
        
        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }
        
        .product-image:hover img {
            transform: scale(1.05);
        }
        
        .product-image .placeholder {
            font-size: 3rem;
            color: #666;
        }
        
        .product-info {
            padding: 20px;
        }
        
        .product-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 8px;
            color: #fff;
        }
        
        .product-price {
            font-size: 1.5rem;
            font-weight: 700;
            color: #10b981;
            margin-bottom: 15px;
        }
        
        .add-to-cart-btn {
            width: 100%;
            background: #2563eb;
            color: white;
            border: none;
            padding: 12px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .add-to-cart-btn:hover {
            background: #1d4ed8;
            transform: translateY(-1px);
        }
        
        .admin-form {
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 12px;
            padding: 30px;
            max-width: 500px;
            margin: 0 auto;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #fff;
        }
        
        .form-group input,
        .form-group textarea {
            width: 100%;
            background: #2a2a2a;
            border: 1px solid #444;
            color: #fff;
            padding: 12px;
            border-radius: 8px;
            font-size: 16px;
        }
        
        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }
        
        .file-input-wrapper {
            position: relative;
            display: inline-block;
            width: 100%;
        }
        
        .file-input {
            position: absolute;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }
        
        .file-input-button {
            width: 100%;
            background: #374151;
            color: white;
            border: 1px solid #4b5563;
            padding: 12px;
            border-radius: 8px;
            cursor: pointer;
            text-align: center;
            transition: all 0.3s ease;
        }
        
        .file-input-button:hover {
            background: #4b5563;
        }
        
        .image-preview {
            margin-top: 10px;
            min-height: 100px;
            background: #2a2a2a;
            border: 1px solid #444;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
        }
        
        .image-preview img {
            max-width: 100%;
            max-height: 200px;
            border-radius: 8px;
        }
        
        .submit-btn {
            width: 100%;
            background: #10b981;
            color: white;
            border: none;
            padding: 15px;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .submit-btn:hover {
            background: #059669;
            transform: translateY(-1px);
        }
        
        .cart {
            background: #1a1a1a;
            border: 1px solid #333;
            border-radius: 12px;
            padding: 20px;
        }
        
        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #333;
        }
        
        .cart-item:last-child {
            border-bottom: none;
        }
        
        .cart-total {
            font-size: 1.5rem;
            font-weight: 700;
            color: #10b981;
            text-align: center;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #333;
        }
        
        .message {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 600;
        }
        
        .message.success {
            background: #065f46;
            color: #10b981;
            border: 1px solid #10b981;
        }
        
        .message.error {
            background: #7f1d1d;
            color: #f87171;
            border: 1px solid #f87171;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            .products-grid {
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 15px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõçÔ∏è Modern Shop</h1>
            <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</p>
        </div>
        
        <div class="tabs">
            <button class="tab-button active" onclick="switchTab('catalog')">üì¶ –ö–∞—Ç–∞–ª–æ–≥</button>
            <button class="tab-button" onclick="switchTab('cart')">üõí –ö–æ—Ä–∑–∏–Ω–∞</button>
            <button class="tab-button" onclick="switchTab('admin')">‚öôÔ∏è –ê–¥–º–∏–Ω</button>
        </div>
        
        <div id="catalog" class="tab-content active">
            <div class="products-grid" id="productsGrid">
                <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</div>
            </div>
        </div>
        
        <div id="cart" class="tab-content">
            <div class="cart" id="cartContent">
                <h3>üõí –ö–æ—Ä–∑–∏–Ω–∞</h3>
                <div class="loading">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</div>
            </div>
        </div>
        
        <div id="admin" class="tab-content">
            <div class="admin-form">
                <h3>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</h3>
                <div id="adminMessage"></div>
                
                <form id="productForm" onsubmit="addProduct(event)">
                    <div class="form-group">
                        <label for="productTitle">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</label>
                        <input type="text" id="productTitle" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="productPrice">–¶–µ–Ω–∞ (‚ÇΩ)</label>
                        <input type="number" id="productPrice" min="1" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="productImage">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è</label>
                        <div class="file-input-wrapper">
                            <input type="file" id="productImage" class="file-input" accept="image/*" onchange="handleImageUpload(this)">
                            <button type="button" class="file-input-button">üì∑ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ</button>
                        </div>
                        <div class="image-preview" id="imagePreview">–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</div>
                    </div>
                    
                    <button type="submit" class="submit-btn" id="submitBtn">‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</button>
                </form>
            </div>
        </div>
    </div>
    
    <script>
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        let products = [];
        let cart = JSON.parse(localStorage.getItem('cart')) || {};
        let selectedImageData = '';
        let currentEditingProduct = null;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        document.addEventListener('DOMContentLoaded', function() {
            loadProducts();
            updateCartDisplay();
            console.log('üöÄ Modern Shop –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        });
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        function switchTab(tabName) {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            document.querySelector(`[onclick="switchTab('${tabName}')"]`).classList.add('active');
            document.getElementById(tabName).classList.add('active');
            
            console.log(`üì± –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabName}`);
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        async function loadProducts() {
            try {
                console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...');
                const response = await fetch('/api/products');
                products = await response.json();
                
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤:`, products);
                renderProducts();
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
                showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤', 'error');
            }
        }
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        function renderProducts() {
            const grid = document.getElementById('productsGrid');
            
            if (products.length === 0) {
                grid.innerHTML = '<div class="loading">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                return;
            }
            
            grid.innerHTML = products.map(product => `
                <div class="product-card">
                    <div class="product-image">
                        ${product.image_url ? 
                            `<img src="${window.location.origin}${product.image_url}" 
                                 alt="${product.title}"
                                 onload="console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', this.src)"
                                 onerror="console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', this.src); this.style.display='none'; this.nextElementSibling.style.display='flex';">
                            <div class="placeholder" style="display:none;">üì∑</div>` : 
                            '<div class="placeholder">üì∑</div>'
                        }
                    </div>
                    <div class="product-info">
                        <div class="product-title">${product.title}</div>
                        <div class="product-price">${product.price.toLocaleString()} ‚ÇΩ</div>
                        <button class="add-to-cart-btn" onclick="addToCart(${product.id})">
                            –í –∫–æ—Ä–∑–∏–Ω—É
                        </button>
                    </div>
                </div>
            `).join('');
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
        function addToCart(productId) {
            const product = products.find(p => p.id === productId);
            if (!product) return;
            
            if (cart[productId]) {
                cart[productId].quantity += 1;
            } else {
                cart[productId] = {
                    ...product,
                    quantity: 1
                };
            }
            
            localStorage.setItem('cart', JSON.stringify(cart));
            updateCartDisplay();
            
            console.log(`üõí –î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É: ${product.title}`);
            showMessage(`${product.title} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`, 'success');
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        function updateCartDisplay() {
            const cartContent = document.getElementById('cartContent');
            const items = Object.values(cart);
            
            if (items.length === 0) {
                cartContent.innerHTML = '<div class="loading">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</div>';
                return;
            }
            
            const total = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            
            cartContent.innerHTML = `
                <h3>üõí –ö–æ—Ä–∑–∏–Ω–∞</h3>
                ${items.map(item => `
                    <div class="cart-item">
                        <div>
                            <strong>${item.title}</strong><br>
                            <small>${item.price.toLocaleString()} ‚ÇΩ √ó ${item.quantity}</small>
                        </div>
                        <div>
                            <button onclick="updateQuantity(${item.id}, ${item.quantity - 1})">-</button>
                            <span style="margin: 0 10px;">${item.quantity}</span>
                            <button onclick="updateQuantity(${item.id}, ${item.quantity + 1})">+</button>
                            <button onclick="removeFromCart(${item.id})" style="margin-left: 10px; color: #f87171;">üóëÔ∏è</button>
                        </div>
                    </div>
                `).join('')}
                <div class="cart-total">
                    –ò—Ç–æ–≥–æ: ${total.toLocaleString()} ‚ÇΩ
                </div>
            `;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        function updateQuantity(productId, newQuantity) {
            if (newQuantity <= 0) {
                removeFromCart(productId);
                return;
            }
            
            if (cart[productId]) {
                cart[productId].quantity = newQuantity;
                localStorage.setItem('cart', JSON.stringify(cart));
                updateCartDisplay();
            }
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        function removeFromCart(productId) {
            delete cart[productId];
            localStorage.setItem('cart', JSON.stringify(cart));
            updateCartDisplay();
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        function handleImageUpload(input) {
            console.log('üì∏ handleImageUpload –≤—ã–∑–≤–∞–Ω–∞');
            
            const file = input.files[0];
            if (!file) {
                console.log('üì∏ –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
                selectedImageData = '';
                document.getElementById('imagePreview').innerHTML = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
                return;
            }
            
            console.log('üì∏ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:', {
                name: file.name,
                size: file.size,
                type: file.type
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
            if (file.size > 5 * 1024 * 1024) {
                console.log('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:', file.size, '–±–∞–π—Ç');
                alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º 5MB.');
                input.value = '';
                return;
            }
            
            console.log('üì∏ –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...');
            const reader = new FileReader();
            
            reader.onload = function(e) {
                selectedImageData = e.target.result;
                console.log('üì∏ Base64 –≥–æ—Ç–æ–≤:', {
                    length: selectedImageData.length,
                    startsWith: selectedImageData.substring(0, 50) + '...',
                    type: selectedImageData.split(',')[0]
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                const preview = document.getElementById('imagePreview');
                preview.innerHTML = `<img src="${e.target.result}" alt="Preview">`;
                console.log('üì∏ –ü—Ä–µ–≤—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
            };
            
            reader.onerror = function(error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
                alert('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞!');
            };
            
            reader.readAsDataURL(file);
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        async function addProduct(event) {
            event.preventDefault();
            
            console.log('üöÄ –§—É–Ω–∫—Ü–∏—è addProduct –≤—ã–∑–≤–∞–Ω–∞');
            
            const title = document.getElementById('productTitle').value;
            const price = parseInt(document.getElementById('productPrice').value);
            
            console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', { 
                title: title, 
                price: price, 
                imageData: selectedImageData ? `–µ—Å—Ç—å (${selectedImageData.length} —Å–∏–º–≤–æ–ª–æ–≤)` : '–Ω–µ—Ç'
            });
            
            if (!title || !price || price <= 0) {
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã');
                showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!', 'error');
                return;
            }
            
            try {
                const url = currentEditingProduct ? 
                    `/api/update-product/${currentEditingProduct}` : 
                    '/api/add-product';
                
                console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞:', url);
                
                const requestData = {
                    title: title,
                    price: price,
                    image: selectedImageData
                };
                
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', {
                    title: title,
                    price: price,
                    imageLength: selectedImageData ? selectedImageData.length : 0
                });
                
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                });
                
                console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
                
                const result = await response.json();
                console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
                
                if (result.success) {
                    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
                    showMessage(
                        currentEditingProduct ? '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!' : '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 
                        'success'
                    );
                    resetForm();
                    await loadProducts();
                } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', result.message);
                    showMessage(result.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'error');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ fetch:', error);
                showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ' + error.message, 'error');
            }
        }
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        function resetForm() {
            document.getElementById('productForm').reset();
            selectedImageData = '';
            currentEditingProduct = null;
            document.getElementById('imagePreview').innerHTML = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
            document.getElementById('submitBtn').textContent = '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
        }
        
        // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        function showMessage(text, type) {
            const messageDiv = document.getElementById('adminMessage');
            messageDiv.innerHTML = `<div class="message ${type}">${text}</div>`;
            
            setTimeout(() => {
                messageDiv.innerHTML = '';
            }, 3000);
        }
    </script>
</body>
</html>
        '''

def run_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –°–û–í–†–ï–ú–ï–ù–ù–´–ô TELEGRAM BOT")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    if BOT_TOKEN:
        print("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        print(f"üì± –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...")
    else:
        print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω - –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    
    print(f"üåê WebApp URL: {WEBAPP_URL}")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    server = HTTPServer(('0.0.0.0', PORT), ModernHTTPHandler)
    
    try:
        print(f"üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{PORT}")
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        server.shutdown()

if __name__ == "__main__":
    run_server()

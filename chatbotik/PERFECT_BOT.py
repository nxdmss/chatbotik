#!/usr/bin/env python3
"""
üéØ –ò–î–ï–ê–õ–¨–ù–´–ô –ë–û–¢ - –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –†–ê–ë–û–¢–ê–ï–¢!
==========================================
–í—Å–µ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ - –±–æ—Ç + –≤–µ–±-—Å–µ—Ä–≤–µ—Ä + –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤
–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 100%!
"""

import os
import json
import logging
import requests
import time
from datetime import datetime
from pathlib import Path

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–û–í ===
Path('logs').mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/perfect_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
BOT_TOKEN = os.getenv('BOT_TOKEN', '')
ADMIN_ID = 1593426947  # –í–ê–® TELEGRAM ID

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

logger.info(f"‚úÖ BOT_TOKEN: {BOT_TOKEN[:15]}...")
logger.info(f"‚úÖ ADMIN_ID: {ADMIN_ID}")

# === TELEGRAM API ===
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

def send_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        url = f"{API_URL}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, json=data, timeout=10)
        result = response.json()
        
        if result.get('ok'):
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ send_message: {e}")
        return False

def get_updates(offset=0):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    try:
        url = f"{API_URL}/getUpdates"
        params = {
            'offset': offset,
            'timeout': 30,
            'allowed_updates': ['message', 'callback_query']
        }
        
        response = requests.get(url, params=params, timeout=35)
        result = response.json()
        
        if result.get('ok'):
            return result.get('result', [])
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ getUpdates: {result}")
            return []
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_updates: {e}")
        return []

def load_products():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON"""
    try:
        products_file = Path('webapp/products.json')
        if products_file.exists():
            with open(products_file, 'r', encoding='utf-8') as f:
                return {p['id']: p for p in json.load(f)}
        return {}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return {}

def process_order(user_id, user_name, order_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ WebApp"""
    try:
        logger.info(f"üì¶ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–ê–ó–ê –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üìÑ –î–∞–Ω–Ω—ã–µ: {order_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º action
        if order_data.get('action') != 'order':
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π action: {order_data.get('action')}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        items = order_data.get('items', [])
        total = order_data.get('total', 0)
        
        if not items:
            logger.warning("‚ö†Ô∏è –ó–∞–∫–∞–∑ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤!")
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        products = load_products()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        order_details = ""
        for i, item in enumerate(items, 1):
            product_id = item.get('productId')
            quantity = item.get('quantity', 1)
            size = item.get('size', '')
            
            product = products.get(product_id, {})
            title = product.get('title', f'–¢–æ–≤–∞—Ä #{product_id}')
            
            order_details += f"{i}. {title}"
            if size:
                order_details += f" (—Ä–∞–∑–º–µ—Ä: {size})"
            order_details += f" √ó {quantity}\n"
        
        # –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        order_number = f"WEB{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        # === –°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–£ ===
        client_msg = (
            f"‚úÖ <b>–ó–ê–ö–ê–ó ‚Ññ{order_number} –û–§–û–†–ú–õ–ï–ù</b>\n\n"
            f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{total} ‚ÇΩ</b>\n"
            f"üìÖ {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            f"<b>–û–ü–õ–ê–¢–ê:</b>\n"
            f"üè¶ –°–ë–ü ‚Äî –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏\n"
            f"üí≥ –ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É\n"
            f"üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n"
            f"<b>–°–¢–ê–¢–£–°:</b> –í –æ–±—Ä–∞–±–æ—Ç–∫–µ\n\n"
            f"–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )
        
        # === –°–û–û–ë–©–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–£ ===
        admin_msg = (
            f"üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_number}</b>\n\n"
            f"üí∞ <b>{total} ‚ÇΩ</b>\n"
            f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_name} (ID: <code>{user_id}</code>)\n\n"
            f"<b>–¢–û–í–ê–†–´:</b>\n{order_details}\n"
            f"<b>–î–ï–ô–°–¢–í–ò–Ø:</b>\n"
            f"1. –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º: /reply {user_id}\n"
            f"2. –£—Ç–æ—á–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            f"3. –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É (–°–ë–ü/–∫–∞—Ä—Ç–∞/–Ω–∞–ª–∏—á–Ω—ã–µ)\n"
            f"4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ä–æ–∫–∏\n\n"
            f"‚è± <b>–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</b>"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        client_sent = send_message(user_id, client_msg)
        admin_sent = send_message(ADMIN_ID, admin_msg)
        
        logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç: {client_sent}, –ê–¥–º–∏–Ω: {admin_sent}")
        
        return admin_sent
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ process_order: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def process_update(update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    try:
        # –ö–æ–º–∞–Ω–¥—ã
        if 'message' in update:
            msg = update['message']
            chat_id = msg['chat']['id']
            user = msg.get('from', {})
            user_name = user.get('first_name', '–ö–ª–∏–µ–Ω—Ç')
            
            # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if 'text' in msg:
                text = msg['text']
                
                if text == '/start':
                    logger.info(f"üì± /start –æ—Ç {chat_id}")
                    
                    welcome = (
                        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
                        f"üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!\n\n"
                        f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ üëá"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–æ–π WebApp
                    url = f"{API_URL}/sendMessage"
                    data = {
                        'chat_id': chat_id,
                        'text': welcome,
                        'reply_markup': {
                            'inline_keyboard': [[{
                                'text': 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
                                'web_app': {'url': os.getenv('WEBAPP_URL', 'https://–≤–∞—à-repl.repl.co/webapp/')}
                            }]]
                        }
                    }
                    requests.post(url, json=data)
                
                elif text == '/help':
                    send_message(chat_id, 
                        "üÜò <b>–ü–æ–º–æ—â—å</b>\n\n"
                        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                        "–ù–∞–∂–º–∏ '–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω' —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!")
            
            # –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï - –î–∞–Ω–Ω—ã–µ –∏–∑ WebApp!
            elif 'web_app_data' in msg:
                web_app_data = msg['web_app_data']['data']
                
                logger.info("=" * 60)
                logger.info(f"üéØ –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –ò–ó WEBAPP!")
                logger.info(f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_id} ({user_name})")
                logger.info(f"üì¶ –î–∞–Ω–Ω—ã–µ: {web_app_data}")
                logger.info("=" * 60)
                
                try:
                    order_data = json.loads(web_app_data)
                    success = process_order(chat_id, user_name, order_data)
                    
                    if success:
                        logger.info("‚úÖ‚úÖ‚úÖ –ó–ê–ö–ê–ó –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù –ò –û–¢–ü–†–ê–í–õ–ï–ù –ê–î–ú–ò–ù–£!")
                    else:
                        logger.error("‚ùå‚ùå‚ùå –ó–ê–ö–ê–ó –ù–ï –ë–´–õ –û–¢–ü–†–ê–í–õ–ï–ù –ê–î–ú–ò–ù–£!")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ web_app_data: {e}")
                    import traceback
                    logger.error(traceback.format_exc())
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ process_update: {e}")
        import traceback
        logger.error(traceback.format_exc())

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    logger.info("=" * 60)
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ò–î–ï–ê–õ–¨–ù–û–ì–û –ë–û–¢–ê")
    logger.info("=" * 60)
    logger.info(f"ü§ñ –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    logger.info(f"üì± –¢–æ–∫–µ–Ω: {BOT_TOKEN[:15]}...")
    logger.info("=" * 60)
    
    # –û—á–∏—â–∞–µ–º pending updates
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    updates = get_updates()
    if updates:
        last_update_id = updates[-1]['update_id']
        get_updates(last_update_id + 1)
        logger.info(f"‚úÖ –û—á–∏—â–µ–Ω–æ {len(updates)} —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
    
    logger.info("‚úÖ –ë–û–¢ –ó–ê–ü–£–©–ï–ù –ò –°–õ–£–®–ê–ï–¢!")
    logger.info("üí° –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
    logger.info("")
    
    offset = 0
    
    while True:
        try:
            updates = get_updates(offset)
            
            if updates:
                logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(updates)}")
            
            for update in updates:
                offset = update['update_id'] + 1
                
                logger.info(f"\n{'='*60}")
                logger.info(f"üì¨ –ù–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï #{update['update_id']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ web_app_data
                if 'message' in update and 'web_app_data' in update['message']:
                    logger.info("üéØüéØüéØ –û–ë–ù–ê–†–£–ñ–ï–ù WEB_APP_DATA!")
                
                process_update(update)
                logger.info(f"{'='*60}\n")
            
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
        except KeyboardInterrupt:
            logger.info("\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            break
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main loop: {e}")
            import traceback
            logger.error(traceback.format_exc())
            time.sleep(5)

if __name__ == '__main__':
    main()


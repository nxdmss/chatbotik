#!/usr/bin/env python3
"""
ü§ñ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –ë–û–¢ –ü–û–î–î–ï–†–ñ–ö–ò
============================
–†–∞–±–æ—Ç–∞–µ—Ç —Å —Å–∞–º—ã–º–∏ —Å—Ç–∞—Ä—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ python-telegram-bot
"""

import os
import sqlite3
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '')
ADMIN_IDS = [1593426947]  # –í–∞—à ID –∫–∞–∫ –∞–¥–º–∏–Ω–∞
SUPPORT_DATABASE_PATH = 'customer_support.db'

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏
def init_support_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS customers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS support_messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            customer_id INTEGER NOT NULL,
            message TEXT NOT NULL,
            is_from_admin BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (customer_id) REFERENCES customers (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reviews (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            customer_id INTEGER NOT NULL,
            rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
            review_text TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (customer_id) REFERENCES customers (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            customer_id INTEGER NOT NULL,
            order_number TEXT UNIQUE NOT NULL,
            order_data TEXT,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (customer_id) REFERENCES customers (id)
        )
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –£—Ç–∏–ª–∏—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
def get_or_create_customer(user_id, username=None, first_name=None, last_name=None):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"""
    conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
    cursor = conn.cursor()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('SELECT id FROM customers WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if result:
        customer_id = result[0]
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('''
            INSERT INTO customers (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name))
        customer_id = cursor.lastrowid
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    cursor.execute('''
        UPDATE customers 
        SET last_activity = CURRENT_TIMESTAMP,
            username = COALESCE(?, username),
            first_name = COALESCE(?, first_name),
            last_name = COALESCE(?, last_name)
        WHERE id = ?
    ''', (username, first_name, last_name, customer_id))
    
    conn.commit()
    conn.close()
    return customer_id

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def start_command(bot, update):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        user_id = user.id
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        get_or_create_customer(
            user_id, 
            user.username, 
            user.first_name, 
            user.last_name
        )
        
        if is_admin(user_id):
            # –ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            message = (
                "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "üìã /customers - –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
                "üí¨ /messages - –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
                "‚≠ê /reviews - –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
                "üì¶ /orders - –ó–∞–∫–∞–∑—ã\n"
                "üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                "–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: /reply <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n"
                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: /order <user_id> <–æ–ø–∏—Å–∞–Ω–∏–µ>"
            )
        else:
            # –ú–µ–Ω—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            message = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "üìû /support - –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                "‚≠ê /reviews - –û—Ç–∑—ã–≤—ã\n"
                "üì¶ /myorders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def handle_text(bot, update):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user = update.effective_user
        user_id = user.id
        message_text = update.message.text
        
        if is_admin(user_id):
            handle_admin_message(bot, update)
        else:
            handle_customer_message(bot, update)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {e}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def handle_customer_message(bot, update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    try:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        forward_to_admin(bot, update)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_customer_message: {e}")

def handle_admin_message(bot, update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        update.message.reply_text(
            "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ\n\n"
            "–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reply <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_message: {e}")

def forward_to_admin(bot, update):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        user = update.effective_user
        user_id = user.id
        message_text = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        customer_id = get_or_create_customer(user_id, user.username, user.first_name, user.last_name)
        
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO support_messages (customer_id, message, is_from_admin)
            VALUES (?, ?, FALSE)
        ''', (customer_id, message_text))
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_message = (
            f"üìû –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
            f"{' (@' + user.username + ')' if user.username else ''}\n"
            f"üÜî ID: {user_id}\n\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}\n\n"
            f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reply {user_id} <–≤–∞—à –æ—Ç–≤–µ—Ç>"
        )
        
        for admin_id in ADMIN_IDS:
            try:
                bot.send_message(
                    chat_id=admin_id,
                    text=admin_message
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        update.message.reply_text(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n"
            "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ forward_to_admin: {e}")

def support_command(bot, update):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        update.message.reply_text(
            "üí¨ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ support_command: {e}")

def reviews_command(bot, update):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    try:
        user = update.effective_user
        user_id = user.id
        
        if is_admin(user_id):
            show_admin_reviews(bot, update)
        else:
            show_customer_reviews(bot, update)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reviews_command: {e}")

def show_customer_reviews(bot, update):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç—É"""
    try:
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT r.rating, r.review_text, c.first_name, r.created_at
            FROM reviews r
            JOIN customers c ON r.customer_id = c.id
            ORDER BY r.created_at DESC
            LIMIT 10
        ''')
        
        reviews = cursor.fetchall()
        conn.close()
        
        if not reviews:
            update.message.reply_text(
                "üëÄ –û—Ç–∑—ã–≤—ã\n\n"
                "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!\n\n"
                "–î–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rate <–æ—Ü–µ–Ω–∫–∞> <–æ—Ç–∑—ã–≤>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /rate 5 –û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å!"
            )
            return
        
        message = "üëÄ –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
        
        for review in reviews:
            rating, review_text, first_name, created_at = review
            
            stars = "‚≠ê" * rating
            name = first_name or "–ê–Ω–æ–Ω–∏–º"
            
            message += (
                f"{stars} {name}\n"
                f"üí¨ {review_text or '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}\n"
                f"üìÖ {created_at[:16]}\n\n"
            )
        
        message += "–î–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rate <–æ—Ü–µ–Ω–∫–∞> <–æ—Ç–∑—ã–≤>"
        update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_customer_reviews: {e}")

def rate_command(bot, update):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    try:
        user = update.effective_user
        user_id = user.id
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É /rate <–æ—Ü–µ–Ω–∫–∞> <–æ—Ç–∑—ã–≤>
        args = update.message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º /rate
        
        if len(args) < 1:
            update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rate <–æ—Ü–µ–Ω–∫–∞> <–æ—Ç–∑—ã–≤>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /rate 5 –û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å!"
            )
            return
        
        try:
            rating = int(args[0])
            if rating < 1 or rating > 5:
                update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
                return
            
            review_text = " ".join(args[1:]) if len(args) > 1 else "–¢–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫–∞"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
            customer_id = get_or_create_customer(user_id, user.username, user.first_name, user.last_name)
            
            conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute('SELECT id FROM reviews WHERE customer_id = ?', (customer_id,))
            existing_review = cursor.fetchone()
            
            if existing_review:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
                cursor.execute('''
                    UPDATE reviews 
                    SET rating = ?, review_text = ?, created_at = CURRENT_TIMESTAMP
                    WHERE customer_id = ?
                ''', (rating, review_text, customer_id))
                message = "‚úÖ –û—Ç–∑—ã–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!"
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
                cursor.execute('''
                    INSERT INTO reviews (customer_id, rating, review_text)
                    VALUES (?, ?, ?)
                ''', (customer_id, rating, review_text))
                message = "‚úÖ –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
            
            conn.commit()
            conn.close()
            
            stars = "‚≠ê" * rating
            update.message.reply_text(
                f"{message}\n\n"
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {stars}\n"
                f"üí¨ –û—Ç–∑—ã–≤: {review_text}\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"
            )
            
        except ValueError:
            update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ rate_command: {e}")

def myorders_command(bot, update):
    """–ö–æ–º–∞–Ω–¥–∞ –º–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤"""
    try:
        user = update.effective_user
        user_id = user.id
        
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT order_number, order_data, status, created_at
            FROM orders o
            JOIN customers c ON o.customer_id = c.id
            WHERE c.user_id = ?
            ORDER BY o.created_at DESC
            LIMIT 10
        ''', (user_id,))
        
        orders = cursor.fetchall()
        conn.close()
        
        if not orders:
            update.message.reply_text(
                "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n"
                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        message = "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n\n"
        
        for order in orders:
            order_number, order_data, status, created_at = order
            
            status_emoji = {
                'pending': '‚è≥',
                'confirmed': '‚úÖ',
                'shipped': 'üöö',
                'delivered': 'üéâ',
                'cancelled': '‚ùå'
            }.get(status, '‚ùì')
            
            message += (
                f"{status_emoji} –ó–∞–∫–∞–∑ #{order_number}\n"
                f"üì¶ –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üìÖ –î–∞—Ç–∞: {created_at[:16]}\n\n"
            )
        
        update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ myorders_command: {e}")

def customers_command(bot, update):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        if not is_admin(update.effective_user.id):
            update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT user_id, username, first_name, last_name, last_activity,
                   COUNT(sm.id) as messages_count
            FROM customers c
            LEFT JOIN support_messages sm ON c.id = sm.customer_id
            GROUP BY c.id
            ORDER BY last_activity DESC
            LIMIT 20
        ''')
        
        customers = cursor.fetchall()
        conn.close()
        
        if not customers:
            update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n–ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        message = "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
        
        for customer in customers:
            user_id, username, first_name, last_name, last_activity, messages_count = customer
            
            name = f"{first_name or ''} {last_name or ''}".strip() or username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            message += (
                f"üë§ {name}\n"
                f"üÜî ID: {user_id}\n"
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
                f"‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity[:16]}\n\n"
            )
        
        update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ customers_command: {e}")

def messages_command(bot, update):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        if not is_admin(update.effective_user.id):
            update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT sm.id, c.user_id, c.first_name, c.username, sm.message, 
                   sm.is_from_admin, sm.created_at
            FROM support_messages sm
            JOIN customers c ON sm.customer_id = c.id
            ORDER BY sm.created_at DESC
            LIMIT 10
        ''')
        
        messages = cursor.fetchall()
        conn.close()
        
        if not messages:
            update.message.reply_text("üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        message = "üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
        
        for msg in messages:
            msg_id, user_id, first_name, username, msg_text, is_from_admin, created_at = msg
            
            sender = "üëë –ê–¥–º–∏–Ω" if is_from_admin else f"üë§ {first_name or username or '–ö–ª–∏–µ–Ω—Ç'}"
            
            message += (
                f"{sender}\n"
                f"üÜî ID: {user_id}\n"
                f"üí¨ {msg_text[:100]}{'...' if len(msg_text) > 100 else ''}\n"
                f"‚è∞ {created_at[:16]}\n\n"
            )
        
        update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ messages_command: {e}")

def show_admin_reviews(bot, update):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT r.rating, r.review_text, c.first_name, c.username, r.created_at
            FROM reviews r
            JOIN customers c ON r.customer_id = c.id
            ORDER BY r.created_at DESC
            LIMIT 10
        ''')
        
        reviews = cursor.fetchall()
        conn.close()
        
        if not reviews:
            update.message.reply_text("‚≠ê –û—Ç–∑—ã–≤—ã\n\n–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        message = "‚≠ê –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã\n\n"
        
        for review in reviews:
            rating, review_text, first_name, username, created_at = review
            
            stars = "‚≠ê" * rating
            name = first_name or username or "–ê–Ω–æ–Ω–∏–º"
            
            message += (
                f"{stars} {name}\n"
                f"üí¨ {review_text or '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}\n"
                f"‚è∞ {created_at[:16]}\n\n"
            )
        
        update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_reviews: {e}")

def orders_command(bot, update):
    """–ö–æ–º–∞–Ω–¥–∞ –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        if not is_admin(update.effective_user.id):
            update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT o.order_number, c.first_name, c.username, o.status, o.created_at
            FROM orders o
            JOIN customers c ON o.customer_id = c.id
            ORDER BY o.created_at DESC
            LIMIT 15
        ''')
        
        orders = cursor.fetchall()
        conn.close()
        
        if not orders:
            update.message.reply_text("üì¶ –ó–∞–∫–∞–∑—ã\n\n–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        message = "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã\n\n"
        
        for order in orders:
            order_number, first_name, username, status, created_at = order
            
            name = first_name or username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            status_emoji = {
                'pending': '‚è≥',
                'confirmed': '‚úÖ',
                'shipped': 'üöö',
                'delivered': 'üéâ',
                'cancelled': '‚ùå'
            }.get(status, '‚ùì')
            
            message += (
                f"{status_emoji} #{order_number} - {name}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üìÖ {created_at[:16]}\n\n"
            )
        
        update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ orders_command: {e}")

def stats_command(bot, update):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        if not is_admin(update.effective_user.id):
            update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute('SELECT COUNT(*) FROM customers')
        total_customers = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM support_messages WHERE is_from_admin = FALSE')
        total_messages = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM reviews')
        total_reviews = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM orders')
        total_orders = cursor.fetchone()[0]
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        cursor.execute('SELECT AVG(rating) FROM reviews')
        avg_rating = cursor.fetchone()[0] or 0
        
        conn.close()
        
        message = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_customers}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {total_messages}\n"
            f"‚≠ê –û—Ç–∑—ã–≤–æ–≤: {total_reviews}\n"
            f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {total_orders}\n"
            f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5"
        )
        
        update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats_command: {e}")

def reply_command(bot, update):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É"""
    try:
        if not is_admin(update.effective_user.id):
            update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        args = update.message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º /reply
        if len(args) < 2:
            update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>"
            )
            return
        
        user_id = int(args[0])
        message_text = " ".join(args[1:])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        bot.send_message(
            chat_id=user_id,
            text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n{message_text}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT id FROM customers WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if result:
            customer_id = result[0]
            cursor.execute('''
                INSERT INTO support_messages (customer_id, message, is_from_admin)
                VALUES (?, ?, TRUE)
            ''', (customer_id, message_text))
        
        conn.commit()
        conn.close()
        
        update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reply_command: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

def order_command(bot, update):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        if not is_admin(update.effective_user.id):
            update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        args = update.message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º /order
        if len(args) < 2:
            update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /order <user_id> <–æ–ø–∏—Å–∞–Ω–∏–µ_–∑–∞–∫–∞–∑–∞>"
            )
            return
        
        user_id = int(args[0])
        order_description = " ".join(args[1:])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        order_number = f"ORD{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT id FROM customers WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result:
            update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            conn.close()
            return
        
        customer_id = result[0]
        
        cursor.execute('''
            INSERT INTO orders (customer_id, order_number, order_data, status)
            VALUES (?, ?, ?, 'pending')
        ''', (customer_id, order_number, order_description))
        
        conn.commit()
        conn.close()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        bot.send_message(
            chat_id=user_id,
            text=f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n\n"
                 f"üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_number}\n"
                 f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order_description}\n"
                 f"üìä –°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ\n\n"
                 f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –∫–æ–º–∞–Ω–¥–æ–π /myorders"
        )
        
        update.message.reply_text(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_number} —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )
        
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ order_command: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")

def error_handler(bot, update, error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {error}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return
    
    print("ü§ñ –ó–ê–ü–£–°–ö –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û –ë–û–¢–ê –ü–û–î–î–ï–†–ñ–ö–ò")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_support_database()
    
    # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å telegram —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∞
        try:
            from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
            print("‚úÖ –ò–º–ø–æ—Ä—Ç telegram —É—Å–ø–µ—à–µ–Ω (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        except ImportError:
            try:
                from telegram.ext import Updater, CommandHandler, MessageHandler
                from telegram import Filters
                print("‚úÖ –ò–º–ø–æ—Ä—Ç telegram —É—Å–ø–µ—à–µ–Ω (—Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è)")
            except ImportError:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
                import telegram
                from telegram.ext import Updater, CommandHandler, MessageHandler
                print("‚úÖ –ò–º–ø–æ—Ä—Ç telegram —É—Å–ø–µ—à–µ–Ω (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)")
                
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install python-telegram-bot")
        return
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        updater = Updater(token=BOT_TOKEN)
        dispatcher = updater.dispatcher
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        dispatcher.add_handler(CommandHandler("start", start_command))
        dispatcher.add_handler(CommandHandler("support", support_command))
        dispatcher.add_handler(CommandHandler("reviews", reviews_command))
        dispatcher.add_handler(CommandHandler("rate", rate_command))
        dispatcher.add_handler(CommandHandler("myorders", myorders_command))
        dispatcher.add_handler(CommandHandler("customers", customers_command))
        dispatcher.add_handler(CommandHandler("messages", messages_command))
        dispatcher.add_handler(CommandHandler("orders", orders_command))
        dispatcher.add_handler(CommandHandler("stats", stats_command))
        dispatcher.add_handler(CommandHandler("reply", reply_command))
        dispatcher.add_handler(CommandHandler("order", order_command))
        
        # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
        try:
            dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))
        except:
            try:
                dispatcher.add_handler(MessageHandler(Filters.text, handle_text))
            except:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                dispatcher.add_handler(MessageHandler(None, handle_text))
        
        dispatcher.add_error_handler(error_handler)
        
        print("‚úÖ –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üìû –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        print("‚≠ê –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∑–∞–∫–∞–∑—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω–∞–º")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()

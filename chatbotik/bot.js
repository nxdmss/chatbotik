import { Telegraf, Markup } from 'telegraf'
import { message } from 'telegraf/filters'
import express from 'express'
import cors from 'cors'
import path from 'path'
import { fileURLToPath } from 'url'
import { initDatabase, getProducts, createProduct, updateProduct, deleteProduct, createOrder } from './database.js'
import { saveImage, getImagePath } from './imageHandler.js'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const token = process.env.BOT_TOKEN || ''
const port = process.env.PORT || 8000
const webAppUrl = process.env.WEBAPP_URL || `http://localhost:${port}`

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const bot = new Telegraf(token)
const app = express()

// Middleware
app.use(cors())
app.use(express.json())
app.use(express.static(path.join(__dirname, 'frontend', 'dist')))

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
import { mkdirSync } from 'fs'
mkdirSync('uploads', { recursive: true })
mkdirSync('frontend/dist', { recursive: true })

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
initDatabase()

// ==================== TELEGRAM BOT COMMANDS ====================

bot.command('start', (ctx) => {
  ctx.reply(
    'üõçÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!**\n\n' +
    '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
    '‚Ä¢ üõí –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã\n' +
    '‚Ä¢ üì¶ –î–æ–±–∞–≤–ª—è—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É\n' +
    '‚Ä¢ üí≥ –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã\n' +
    '‚Ä¢ üìû –°–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\n\n' +
    '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω!',
    {
      parse_mode: 'Markdown',
      reply_markup: Markup.keyboard([
        [Markup.button.webApp('üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', `${webAppUrl}`)],
        [Markup.button.callback('üì¶ –ö–∞—Ç–∞–ª–æ–≥', 'catalog')],
        [Markup.button.callback('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', 'contact')]
      ]).resize()
    }
  )
})

bot.command('catalog', async (ctx) => {
  try {
    const products = await getProducts()
    
    if (products.length === 0) {
      ctx.reply('üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ!')
      return
    }
    
    let message = 'üõçÔ∏è **–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:**\n\n'
    
    products.slice(0, 5).forEach((product, index) => {
      message += `${index + 1}. **${product.title}**\n`
      message += `   üí∞ ${product.price.toLocaleString()} ‚ÇΩ\n`
      if (product.description) {
        message += `   üìù ${product.description.substring(0, 50)}...\n`
      }
      message += '\n'
    })
    
    if (products.length > 5) {
      message += `... –∏ –µ—â–µ ${products.length - 5} —Ç–æ–≤–∞—Ä–æ–≤\n\n`
    }
    
    message += '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥!'
    
    ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.webApp('üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥', `${webAppUrl}`)]
      ])
    })
  } catch (error) {
    console.error('Error in catalog command:', error)
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
})

bot.command('contact', (ctx) => {
  const contactMessage = `
üìû **–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:**

üïê **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** 9:00 - 21:00 (–ú–°–ö)

üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** +7 (999) 123-45-67
üìß **Email:** support@eshoppro.ru
üí¨ **Telegram:** @eshoppro_support

üè¢ **–ê–¥—Ä–µ—Å:**
–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123

‚ùì **–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏
‚Ä¢ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã

–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!
  `
  
  ctx.reply(contactMessage, {
    parse_mode: 'Markdown',
    reply_markup: Markup.inlineKeyboard([
      [Markup.button.url('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'https://t.me/eshoppro_support')],
      [Markup.button.webApp('üõçÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω', `${webAppUrl}`)]
    ])
  })
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.action('catalog', async (ctx) => {
  ctx.answerCbQuery()
  await ctx.reply('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥...')
  // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∫–∞—Ç–∞–ª–æ–≥–∞
  await bot.telegram.sendMessage(ctx.chat.id, 'catalog', { reply_markup: { remove_keyboard: true } })
})

bot.action('contact', async (ctx) => {
  ctx.answerCbQuery()
  await ctx.reply('üìû –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã...')
  // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  await bot.telegram.sendMessage(ctx.chat.id, 'contact', { reply_markup: { remove_keyboard: true } })
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp
bot.on(message('web_app_data'), async (ctx) => {
  try {
    const data = JSON.parse(ctx.webAppData.data.json())
    
    if (data.type === 'order') {
      const orderResult = await createOrder(data.order)
      
      ctx.reply(
        `‚úÖ **–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n` +
        `üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${orderResult.id}\n` +
        `üí∞ –°—É–º–º–∞: ${orderResult.total_amount.toLocaleString()} ‚ÇΩ\n` +
        `üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!`,
        { parse_mode: 'Markdown' }
      )
    } else if (data.type === 'feedback') {
      ctx.reply(
        `‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!**\n\n` +
        `üìù –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${data.feedback}"\n\n` +
        `–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏–º!`,
        { parse_mode: 'Markdown' }
      )
    }
  } catch (error) {
    console.error('Error processing web app data:', error)
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.')
  }
})

// ==================== EXPRESS API ====================

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'frontend', 'dist', 'index.html'))
})

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
app.get('/api/products', async (req, res) => {
  try {
    const products = await getProducts()
    res.json(products)
  } catch (error) {
    console.error('Error getting products:', error)
    res.status(500).json({ error: 'Internal server error' })
  }
})

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–∞–¥–º–∏–Ω)
app.post('/api/products', async (req, res) => {
  try {
    const productData = req.body
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JWT)
    if (!req.headers['x-admin-password'] || req.headers['x-admin-password'] !== 'admin123') {
      return res.status(403).json({ error: 'Access denied' })
    }
    
    const product = await createProduct(productData)
    res.json(product)
  } catch (error) {
    console.error('Error creating product:', error)
    res.status(500).json({ error: 'Internal server error' })
  }
})

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–∞–¥–º–∏–Ω)
app.put('/api/products/:id', async (req, res) => {
  try {
    const { id } = req.params
    const productData = req.body
    
    if (!req.headers['x-admin-password'] || req.headers['x-admin-password'] !== 'admin123') {
      return res.status(403).json({ error: 'Access denied' })
    }
    
    const product = await updateProduct(id, productData)
    if (!product) {
      return res.status(404).json({ error: 'Product not found' })
    }
    
    res.json(product)
  } catch (error) {
    console.error('Error updating product:', error)
    res.status(500).json({ error: 'Internal server error' })
  }
})

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–∞–¥–º–∏–Ω)
app.delete('/api/products/:id', async (req, res) => {
  try {
    const { id } = req.params
    
    if (!req.headers['x-admin-password'] || req.headers['x-admin-password'] !== 'admin123') {
      return res.status(403).json({ error: 'Access denied' })
    }
    
    const success = await deleteProduct(id)
    if (!success) {
      return res.status(404).json({ error: 'Product not found' })
    }
    
    res.json({ message: 'Product deleted successfully' })
  } catch (error) {
    console.error('Error deleting product:', error)
    res.status(500).json({ error: 'Internal server error' })
  }
})

// API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.post('/api/upload', async (req, res) => {
  try {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ multipart/form-data
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    res.json({ message: 'Upload endpoint ready' })
  } catch (error) {
    console.error('Error uploading image:', error)
    res.status(500).json({ error: 'Internal server error' })
  }
})

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.get('/uploads/:filename', (req, res) => {
  const filename = req.params.filename
  const imagePath = getImagePath(filename)
  res.sendFile(imagePath)
})

// ==================== STARTUP ====================

async function start() {
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
    app.listen(port, '0.0.0.0', () => {
      console.log(`üåê Web server running on http://0.0.0.0:${port}`)
    })
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    if (token) {
      await bot.launch()
      console.log('ü§ñ Telegram bot started successfully!')
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
      await bot.telegram.setMyCommands([
        { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
        { command: 'catalog', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥' },
        { command: 'contact', description: '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏' }
      ])
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebApp URL –≤ BotFather
      console.log(`üì± Set WebApp URL in @BotFather: ${webAppUrl}`)
    } else {
      console.log('‚ö†Ô∏è BOT_TOKEN not found - bot disabled')
    }
    
    console.log('üéâ Platform started successfully!')
    console.log('=' * 50)
    console.log(`üåê Web: http://0.0.0.0:${port}`)
    console.log(`üì± WebApp URL: ${webAppUrl}`)
    console.log('üõë Press Ctrl+C to stop')
    
  } catch (error) {
    console.error('‚ùå Error starting platform:', error)
    process.exit(1)
  }
}

// Graceful shutdown
process.once('SIGINT', () => {
  console.log('\nüõë Shutting down gracefully...')
  bot.stop('SIGINT')
  process.exit(0)
})

process.once('SIGTERM', () => {
  console.log('\nüõë Shutting down gracefully...')
  bot.stop('SIGTERM')
  process.exit(0)
})

start()

#!/usr/bin/env python3
"""
üè¢ PROFESSIONAL E-COMMERCE PLATFORM
===================================
–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏
—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram –±–æ—Ç–∞ –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- FastAPI –¥–ª—è API
- SQLite –¥–ª—è –¥–∞–Ω–Ω—ã—Ö  
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
"""

import asyncio
import json
import os
import sqlite3
import uuid
from datetime import datetime
from typing import List, Optional, Dict, Any
from pathlib import Path

import uvicorn
from fastapi import FastAPI, HTTPException, UploadFile, File, Form, Depends
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, FileResponse
from pydantic import BaseModel, Field
import base64
from PIL import Image
import io

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_PATH = "shop.db"
UPLOADS_DIR = "uploads"
STATIC_DIR = "static"
PORT = 8000

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
Path(UPLOADS_DIR).mkdir(exist_ok=True)
Path(STATIC_DIR).mkdir(exist_ok=True)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Professional E-Commerce Platform",
    description="–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏",
    version="1.0.0"
)

# CORS middleware
app.middleware("cors")(CORSMiddleware(
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
))

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class ProductCreate(BaseModel):
    title: str = Field(..., min_length=1, max_length=100)
    price: int = Field(..., gt=0)
    description: Optional[str] = Field(None, max_length=500)
    category: str = Field(default="general", max_length=50)

class ProductUpdate(BaseModel):
    title: Optional[str] = Field(None, min_length=1, max_length=100)
    price: Optional[int] = Field(None, gt=0)
    description: Optional[str] = Field(None, max_length=500)
    category: Optional[str] = Field(None, max_length=50)

class Product(BaseModel):
    id: int
    title: str
    price: int
    description: Optional[str]
    category: str
    image_url: Optional[str]
    created_at: datetime
    updated_at: datetime

class CartItem(BaseModel):
    product_id: int
    quantity: int = Field(..., gt=0)

class OrderCreate(BaseModel):
    items: List[CartItem]
    customer_name: str = Field(..., min_length=1, max_length=100)
    customer_phone: str = Field(..., min_length=1, max_length=20)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            price INTEGER NOT NULL,
            description TEXT,
            category TEXT DEFAULT 'general',
            image_url TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            customer_name TEXT NOT NULL,
            customer_phone TEXT NOT NULL,
            total_amount INTEGER NOT NULL,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # –¢–∞–±–ª–∏—Ü–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS order_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER,
            product_id INTEGER,
            quantity INTEGER NOT NULL,
            price INTEGER NOT NULL,
            FOREIGN KEY (order_id) REFERENCES orders (id),
            FOREIGN KEY (product_id) REFERENCES products (id)
        )
    """)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        test_products = [
            ("iPhone 15 Pro", 99999, "–ù–æ–≤–µ–π—à–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple", "electronics"),
            ("MacBook Air M3", 129999, "–ú–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã", "electronics"),
            ("Nike Air Max", 8999, "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏", "clothing"),
            ("–ö–æ—Ñ–µ Starbucks", 299, "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–æ—Ñ–µ", "food"),
            ("–ö–Ω–∏–≥–∞ Python", 1999, "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python", "books")
        ]
        
        for title, price, description, category in test_products:
            cursor.execute("""
                INSERT INTO products (title, price, description, category)
                VALUES (?, ?, ?, ?)
            """, (title, price, description, category))
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
init_database()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def save_image(image_data: str, filename: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
        if ',' in image_data:
            header, data = image_data.split(',', 1)
        else:
            data = image_data
        
        image_bytes = base64.b64decode(data)
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
        image = Image.open(io.BytesIO(image_bytes))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if image.mode in ('RGBA', 'LA', 'P'):
            image = image.convert('RGB')
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        image.thumbnail((800, 600), Image.Resampling.LANCZOS)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        filepath = Path(UPLOADS_DIR) / filename
        image.save(filepath, 'JPEG', quality=85, optimize=True)
        
        return f"/uploads/{filename}"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return ""

# API endpoints
@app.get("/", response_class=HTMLResponse)
async def get_homepage():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return FileResponse("static/index.html")

@app.get("/api/products", response_model=List[Product])
async def get_products(category: Optional[str] = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    conn = get_db()
    cursor = conn.cursor()
    
    if category:
        cursor.execute("""
            SELECT * FROM products 
            WHERE category = ? 
            ORDER BY created_at DESC
        """, (category,))
    else:
        cursor.execute("""
            SELECT * FROM products 
            ORDER BY created_at DESC
        """)
    
    products = cursor.fetchall()
    conn.close()
    
    return [Product(**dict(product)) for product in products]

@app.post("/api/products", response_model=Product)
async def create_product(product: ProductCreate, image_data: Optional[str] = Form(None)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    conn = get_db()
    cursor = conn.cursor()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_url = ""
    if image_data:
        filename = f"product_{uuid.uuid4().hex[:8]}.jpg"
        image_url = save_image(image_data, filename)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
    cursor.execute("""
        INSERT INTO products (title, price, description, category, image_url)
        VALUES (?, ?, ?, ?, ?)
    """, (product.title, product.price, product.description, product.category, image_url))
    
    product_id = cursor.lastrowid
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
    new_product = cursor.fetchone()
    conn.close()
    
    return Product(**dict(new_product))

@app.put("/api/products/{product_id}", response_model=Product)
async def update_product(product_id: int, product_update: ProductUpdate):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    conn = get_db()
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
    existing = cursor.fetchone()
    if not existing:
        conn.close()
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    update_fields = []
    values = []
    
    if product_update.title is not None:
        update_fields.append("title = ?")
        values.append(product_update.title)
    
    if product_update.price is not None:
        update_fields.append("price = ?")
        values.append(product_update.price)
    
    if product_update.description is not None:
        update_fields.append("description = ?")
        values.append(product_update.description)
    
    if product_update.category is not None:
        update_fields.append("category = ?")
        values.append(product_update.category)
    
    if update_fields:
        update_fields.append("updated_at = CURRENT_TIMESTAMP")
        values.append(product_id)
        
        query = f"UPDATE products SET {', '.join(update_fields)} WHERE id = ?"
        cursor.execute(query, values)
        conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
    updated_product = cursor.fetchone()
    conn.close()
    
    return Product(**dict(updated_product))

@app.delete("/api/products/{product_id}")
async def delete_product(product_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    conn = get_db()
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    if not product:
        conn.close()
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if product['image_url']:
        image_path = Path(UPLOADS_DIR) / product['image_url'].split('/')[-1]
        if image_path.exists():
            image_path.unlink()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
    cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
    conn.commit()
    conn.close()
    
    return {"message": "–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω"}

@app.get("/api/categories")
async def get_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT category FROM products ORDER BY category")
    categories = [row[0] for row in cursor.fetchall()]
    conn.close()
    return categories

@app.post("/api/orders")
async def create_order(order: OrderCreate):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    conn = get_db()
    cursor = conn.cursor()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    total_amount = 0
    for item in order.items:
        cursor.execute("SELECT price FROM products WHERE id = ?", (item.product_id,))
        product = cursor.fetchone()
        if not product:
            conn.close()
            raise HTTPException(status_code=400, detail=f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {item.product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        total_amount += product['price'] * item.quantity
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    cursor.execute("""
        INSERT INTO orders (customer_name, customer_phone, total_amount)
        VALUES (?, ?, ?)
    """, (order.customer_name, order.customer_phone, total_amount))
    
    order_id = cursor.lastrowid
    
    # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
    for item in order.items:
        cursor.execute("SELECT price FROM products WHERE id = ?", (item.product_id,))
        price = cursor.fetchone()['price']
        cursor.execute("""
            INSERT INTO order_items (order_id, product_id, quantity, price)
            VALUES (?, ?, ?, ?)
        """, (order_id, item.product_id, item.quantity, price))
    
    conn.commit()
    conn.close()
    
    return {"order_id": order_id, "total_amount": total_amount}

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/uploads", StaticFiles(directory=UPLOADS_DIR), name="uploads")
app.mount("/static", StaticFiles(directory=STATIC_DIR), name="static")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö PROFESSIONAL E-COMMERCE PLATFORM")
    print("=" * 50)
    print(f"üåê –°–µ—Ä–≤–µ—Ä: http://localhost:{PORT}")
    print(f"üìä API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:{PORT}/docs")
    print(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_PATH}")
    print("=" * 50)
    
    uvicorn.run(app, host="0.0.0.0", port=PORT)

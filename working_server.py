#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–ê–ë–û–ß–ò–ô –°–ï–†–í–ï–† –ë–ï–ó –û–®–ò–ë–û–ö
"""

import json
import socket
import uuid
import os
import base64
from urllib.parse import urlparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
PORT = 8000
DATA_FILE = 'products_data.json'
UPLOADS_DIR = 'uploads'
ADMIN_PASSWORD = "admin123"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
if not os.path.exists(UPLOADS_DIR):
    os.makedirs(UPLOADS_DIR)

def load_products():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('products', [])
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            initial_products = [
                {"id": 1, "title": "–§—É—Ç–±–æ–ª–∫–∞", "price": 1500, "description": "–ö—Ä—É—Ç–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞", "image": "üëï", "photo": "", "active": True},
                {"id": 2, "title": "–î–∂–∏–Ω—Å—ã", "price": 3000, "description": "–°—Ç–∏–ª—å–Ω—ã–µ –¥–∂–∏–Ω—Å—ã", "image": "üëñ", "photo": "", "active": True},
                {"id": 3, "title": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏", "price": 5000, "description": "–£–¥–æ–±–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏", "image": "üëü", "photo": "", "active": True},
                {"id": 4, "title": "–ö—É—Ä—Ç–∫–∞", "price": 4000, "description": "–¢–µ–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞", "image": "üß•", "photo": "", "active": True}
            ]
            save_products(initial_products)
            return initial_products
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []

def save_products(products):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        data = {
            'products': products,
            'last_saved': str(uuid.uuid4())
        }
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ {DATA_FILE}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def save_photo(photo_data, filename):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        if ',' in photo_data:
            photo_data = photo_data.split(',')[1]
        photo_bytes = base64.b64decode(photo_data)
        filepath = os.path.join(UPLOADS_DIR, filename)
        with open(filepath, 'wb') as f:
            f.write(photo_bytes)
        return f"/uploads/{filename}"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        return ""

def check_admin_password(password):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return password == ADMIN_PASSWORD

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
products = load_products()
carts = {}

def get_cart(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in carts:
        carts[user_id] = []
    return carts[user_id]

def handle_request(client_socket):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    global products
    
    try:
        request = client_socket.recv(8192).decode('utf-8')
        if not request:
            return
        
        lines = request.split('\n')
        first_line = lines[0]
        parts = first_line.split()
        if len(parts) < 3:
            return
        
        method, path, protocol = parts[0], parts[1], parts[2]
        parsed_path = urlparse(path)
        
        print(f"üì• {method} {path}")
        
        # API —Ç–æ–≤–∞—Ä–æ–≤ GET
        if parsed_path.path == '/api/products' and method == 'GET':
            response_body = json.dumps(products, ensure_ascii=False)
            response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
        
        # API –∫–æ—Ä–∑–∏–Ω—ã
        elif parsed_path.path.startswith('/api/cart/'):
            user_id = parsed_path.path.split('/')[-1]
            if method == 'GET':
                cart = get_cart(user_id)
                response_body = json.dumps(cart, ensure_ascii=False)
                response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
            elif method == 'POST':
                content_length = int(request.split('Content-Length: ')[1].split('\n')[0])
                post_data = request.split('\r\n\r\n')[1][:content_length]
                data = json.loads(post_data)
                product_id = data.get('product_id')
                quantity = data.get('quantity', 1)
                
                cart = get_cart(user_id)
                product = None
                for p in products:
                    if p['id'] == product_id:
                        product = p
                        break
                
                if product:
                    existing_item = None
                    for item in cart:
                        if item['product_id'] == product_id:
                            existing_item = item
                            break
                    
                    if existing_item:
                        existing_item['quantity'] += quantity
                    else:
                        cart.append({
                            'id': str(uuid.uuid4()),
                            'product_id': product_id,
                            'title': product['title'],
                            'price': product['price'],
                            'image': product['image'],
                            'photo': product.get('photo', ''),
                            'quantity': quantity
                        })
                    
                    response_body = json.dumps({"success": True, "cart": cart}, ensure_ascii=False)
                    response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
                else:
                    response_body = json.dumps({"success": False, "error": "Product not found"}, ensure_ascii=False)
                    response = f"""HTTP/1.1 404 Not Found
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
        
        # –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù –ü–ê–†–û–õ–Ø
        elif parsed_path.path == '/api/admin/check' and method == 'POST':
            content_length = int(request.split('Content-Length: ')[1].split('\n')[0])
            post_data = request.split('\r\n\r\n')[1][:content_length]
            data = json.loads(post_data)
            password = data.get('password', '')
            
            is_admin = check_admin_password(password)
            response_body = json.dumps({"success": is_admin}, ensure_ascii=False)
            response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
        
        # –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ê)
        elif parsed_path.path == '/api/products' and method == 'POST':
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                admin_password = ""
                for line in lines:
                    if line.startswith('X-Admin-Password:'):
                        admin_password = line.split(':')[1].strip()
                        break
                
                if not check_admin_password(admin_password):
                    response_body = json.dumps({"success": False, "error": "Access denied"}, ensure_ascii=False)
                    response = f"""HTTP/1.1 403 Forbidden
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
                else:
                    content_length = int(request.split('Content-Length: ')[1].split('\n')[0])
                    post_data = request.split('\r\n\r\n')[1][:content_length]
                    data = json.loads(post_data)
                    
                    max_id = max([p['id'] for p in products]) if products else 0
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    photo_url = ""
                    if data.get('photo'):
                        filename = f"product_{max_id + 1}_{uuid.uuid4().hex[:8]}.jpg"
                        photo_url = save_photo(data['photo'], filename)
                    
                    new_product = {
                        "id": max_id + 1,
                        "title": data.get('title', '–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä'),
                        "price": data.get('price', 0),
                        "description": data.get('description', ''),
                        "image": data.get('image', 'üì¶'),
                        "photo": photo_url,
                        "active": True
                    }
                    
                    products.append(new_product)
                    save_products(products)
                    print(f"‚úÖ –ê–î–ú–ò–ù –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä: {new_product['title']}")
                    
                    response_body = json.dumps({"success": True, "product": new_product}, ensure_ascii=False)
                    response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
            except Exception as e:
                response_body = json.dumps({"success": False, "error": str(e)}, ensure_ascii=False)
                response = f"""HTTP/1.1 500 Internal Server Error
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
        
        # –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–í–ê–†–ê (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ê)
        elif parsed_path.path.startswith('/api/products/') and method == 'PUT':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            admin_password = ""
            for line in lines:
                if line.startswith('X-Admin-Password:'):
                    admin_password = line.split(':')[1].strip()
                    break
            
            if not check_admin_password(admin_password):
                response_body = json.dumps({"success": False, "error": "Access denied"}, ensure_ascii=False)
                response = f"""HTTP/1.1 403 Forbidden
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
            else:
                product_id = int(parsed_path.path.split('/')[-1])
                content_length = int(request.split('Content-Length: ')[1].split('\n')[0])
                post_data = request.split('\r\n\r\n')[1][:content_length]
                data = json.loads(post_data)
                
                for i, product in enumerate(products):
                    if product['id'] == product_id:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                        photo_url = product.get('photo', '')
                        if data.get('photo'):
                            filename = f"product_{product_id}_{uuid.uuid4().hex[:8]}.jpg"
                            photo_url = save_photo(data['photo'], filename)
                        
                        products[i] = {
                            "id": product_id,
                            "title": data.get('title', product['title']),
                            "price": data.get('price', product['price']),
                            "description": data.get('description', product['description']),
                            "image": data.get('image', product.get('image', 'üì¶')),
                            "photo": photo_url,
                            "active": True
                        }
                        save_products(products)
                        print(f"‚úÖ –ê–î–ú–ò–ù –æ–±–Ω–æ–≤–∏–ª —Ç–æ–≤–∞—Ä: {products[i]['title']}")
                        
                        response_body = json.dumps({"success": True, "product": products[i]}, ensure_ascii=False)
                        response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
                        break
                else:
                    response_body = json.dumps({"success": False, "error": "Product not found"}, ensure_ascii=False)
                    response = f"""HTTP/1.1 404 Not Found
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
        
        # –£–î–ê–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ê)
        elif parsed_path.path.startswith('/api/products/') and method == 'DELETE':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            admin_password = ""
            for line in lines:
                if line.startswith('X-Admin-Password:'):
                    admin_password = line.split(':')[1].strip()
                    break
            
            if not check_admin_password(admin_password):
                response_body = json.dumps({"success": False, "error": "Access denied"}, ensure_ascii=False)
                response = f"""HTTP/1.1 403 Forbidden
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
            else:
                product_id = int(parsed_path.path.split('/')[-1])
                
                for i, product in enumerate(products):
                    if product['id'] == product_id:
                        del products[i]
                        save_products(products)
                        print(f"‚úÖ –ê–î–ú–ò–ù —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä ID: {product_id}")
                        
                        response_body = json.dumps({"success": True}, ensure_ascii=False)
                        response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
                        break
                else:
                    response_body = json.dumps({"success": False, "error": "Product not found"}, ensure_ascii=False)
                    response = f"""HTTP/1.1 404 Not Found
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
        
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)
        elif parsed_path.path.startswith('/uploads/'):
            file_path = parsed_path.path[1:]  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π /
            if os.path.exists(file_path):
                with open(file_path, 'rb') as f:
                    file_content = f.read()
                
                response = f"""HTTP/1.1 200 OK
Content-Type: image/jpeg
Content-Length: {len(file_content)}

"""
                response = response.encode() + file_content
            else:
                response_body = "<h1>404 - File not found</h1>"
                response = f"""HTTP/1.1 404 Not Found
Content-Type: text/html; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}

{response_body}"""
        
        # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        elif parsed_path.path == '/':
            html_content = """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–†–∞–±–æ—á–∏–π –ú–∞–≥–∞–∑–∏–Ω</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { background: #000; color: #fff; font-family: Arial, sans-serif; }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 20px; }
        .controls { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; flex-wrap: wrap; gap: 10px; }
        .search { padding: 8px; background: #111; border: 1px solid #333; border-radius: 5px; color: #fff; width: 200px; }
        .btn { background: #4CAF50; color: white; border: none; padding: 8px 15px; border-radius: 5px; cursor: pointer; }
        .btn.admin { background: #2196F3; }
        .btn.danger { background: #f44336; }
        .btn.warning { background: #ff9800; }
        .products { display: grid; grid-template-columns: 1fr 1fr; gap: 12px; }
        .product { border: 1px solid #333; padding: 12px; border-radius: 8px; height: 200px; position: relative; }
        .product-image { height: 60px; background: #222; border-radius: 6px; display: flex; align-items: center; justify-content: center; margin-bottom: 8px; overflow: hidden; }
        .product-image img { max-width: 100%; max-height: 100%; object-fit: cover; }
        .product-title { font-size: 13px; font-weight: bold; margin-bottom: 4px; }
        .product-desc { color: #ccc; font-size: 10px; margin-bottom: 6px; }
        .product-price { color: #4CAF50; font-weight: bold; margin-bottom: 8px; }
        .product-controls { display: flex; gap: 6px; align-items: center; }
        .qty-btn { background: #333; color: white; border: none; width: 20px; height: 20px; border-radius: 3px; font-size: 10px; cursor: pointer; }
        .qty-input { width: 35px; text-align: center; background: #222; border: 1px solid #333; color: #fff; padding: 2px; font-size: 10px; }
        .add-btn { background: #4CAF50; color: white; border: none; padding: 4px 8px; border-radius: 4px; font-size: 10px; flex: 1; cursor: pointer; }
        .admin-controls { position: absolute; top: 5px; right: 5px; display: none; gap: 3px; }
        .admin-controls.show { display: flex; }
        .admin-btn { border: none; padding: 3px 6px; border-radius: 3px; font-size: 10px; cursor: pointer; }
        .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 1000; }
        .modal.show { display: block; }
        .modal-content { background: #111; margin: 10% auto; padding: 20px; border-radius: 10px; width: 80%; max-width: 500px; }
        .modal-content.admin { margin: 5% auto; max-height: 90vh; overflow-y: auto; }
        .form-group { margin: 10px 0; }
        .form-input { width: 100%; padding: 8px; background: #222; border: 1px solid #333; color: #fff; border-radius: 4px; }
        .form-label { display: block; margin-bottom: 5px; }
        .close-btn { background: #666; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; }
        .success { color: #4CAF50; }
        .error { color: #f44336; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõçÔ∏è –†–∞–±–æ—á–∏–π –ú–∞–≥–∞–∑–∏–Ω</h1>
        </div>
        
        <div class="controls">
            <input type="text" placeholder="üîç –ü–æ–∏—Å–∫..." id="search" class="search">
            <button onclick="openCart()" class="btn">üõí –ö–æ—Ä–∑–∏–Ω–∞ <span id="cartCount">0</span></button>
            <button onclick="toggleAdmin()" class="btn admin">üîê –ê–¥–º–∏–Ω</button>
        </div>

        <div id="products" class="products"></div>
    </div>

    <!-- –ö–æ—Ä–∑–∏–Ω–∞ -->
    <div id="cartModal" class="modal">
        <div class="modal-content">
            <h2>üõí –ö–æ—Ä–∑–∏–Ω–∞</h2>
            <div id="cartContent"></div>
            <button onclick="closeCart()" class="close-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
    </div>

    <!-- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å -->
    <div id="adminModal" class="modal">
        <div class="modal-content">
            <h2>üîê –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å</h2>
            <div id="adminLogin">
                <div class="form-group">
                    <input type="password" id="adminPassword" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞" class="form-input">
                </div>
                <button onclick="checkAdminPassword()" class="btn">–í–æ–π—Ç–∏</button>
                <button onclick="closeAdmin()" class="close-btn">–û—Ç–º–µ–Ω–∞</button>
            </div>
            <div id="adminPanel" style="display:none;">
                <div class="success">‚úÖ –ê–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</div>
                <button onclick="logoutAdmin()" class="btn danger">–í—ã–π—Ç–∏</button>
                <button onclick="addNew()" class="btn">‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</button>
            </div>
        </div>
    </div>

    <!-- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ -->
    <div id="editModal" class="modal">
        <div class="modal-content admin">
            <h2 id="editTitle">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</h2>
            <form id="editForm">
                <input type="hidden" id="editId">
                <div class="form-group">
                    <input type="text" id="editName" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" class="form-input">
                </div>
                <div class="form-group">
                    <input type="number" id="editPrice" placeholder="–¶–µ–Ω–∞" class="form-input">
                </div>
                <div class="form-group">
                    <input type="text" id="editDesc" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" class="form-input">
                </div>
                <div class="form-group">
                    <input type="text" id="editEmoji" placeholder="–≠–º–æ–¥–∑–∏" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è:</label>
                    <input type="file" id="editPhoto" accept="image/*" class="form-input">
                    <div id="photoPreview" style="margin-top:10px;text-align:center;"></div>
                </div>
                <button type="submit" class="btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            </form>
            <button onclick="closeEdit()" class="close-btn">–û—Ç–º–µ–Ω–∞</button>
        </div>
    </div>

    <script>
        let products = [];
        let cart = [];
        let userId = 'user_' + Math.random().toString(36).substr(2, 9);
        let isAdmin = false;
        let adminPassword = '';
        let currentPhoto = null;

        async function loadProducts() {
            try {
                const response = await fetch('/api/products');
                products = await response.json();
                renderProducts();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
            }
        }

        function renderProducts() {
            let html = products.map(p => `
                <div class="product">
                    <div class="admin-controls ${isAdmin ? 'show' : ''}">
                        <button onclick="editProduct(${p.id})" class="admin-btn warning">‚úèÔ∏è</button>
                        <button onclick="deleteProduct(${p.id})" class="admin-btn danger">üóëÔ∏è</button>
                    </div>
                    <div class="product-image">
                        ${p.photo ? `<img src="${p.photo}" alt="${p.title}">` : `<span style="font-size:2em;">${p.image}</span>`}
                    </div>
                    <div class="product-title">${p.title}</div>
                    <div class="product-desc">${p.description}</div>
                    <div class="product-price">${p.price} ‚ÇΩ</div>
                    <div class="product-controls">
                        <button onclick="changeQty(${p.id}, -1)" class="qty-btn">-</button>
                        <input type="number" id="qty_${p.id}" value="1" min="1" max="99" class="qty-input">
                        <button onclick="changeQty(${p.id}, 1)" class="qty-btn">+</button>
                        <button onclick="addToCart(${p.id})" class="add-btn">‚ûï</button>
                    </div>
                </div>
            `).join('');
            
            document.getElementById('products').innerHTML = html;
        }

        function changeQty(id, change) {
            const input = document.getElementById('qty_' + id);
            let value = parseInt(input.value) + change;
            if (value < 1) value = 1;
            if (value > 99) value = 99;
            input.value = value;
        }

        async function addToCart(productId) {
            try {
                const quantity = parseInt(document.getElementById('qty_' + productId).value);
                const response = await fetch('/api/cart/' + userId, {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({product_id: productId, quantity: quantity})
                });
                if (response.ok) {
                    const result = await response.json();
                    cart = result.cart;
                    updateCartCount();
                    alert('‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!');
                    document.getElementById('qty_' + productId).value = 1;
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
            }
        }

        function updateCartCount() {
            const count = cart.reduce((sum, item) => sum + item.quantity, 0);
            document.getElementById('cartCount').textContent = count;
        }

        function openCart() {
            document.getElementById('cartModal').classList.add('show');
            loadCart();
        }

        function closeCart() {
            document.getElementById('cartModal').classList.remove('show');
        }

        async function loadCart() {
            try {
                const response = await fetch('/api/cart/' + userId);
                cart = await response.json();
                const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                document.getElementById('cartContent').innerHTML = cart.map(item => `
                    <div style="border:1px solid #333;padding:10px;margin:5px 0;border-radius:5px;">
                        <strong>${item.title}</strong> - ${item.price} ‚ÇΩ √ó ${item.quantity} = ${item.price * item.quantity} ‚ÇΩ
                    </div>
                `).join('') + `<div style="margin-top:10px;font-weight:bold;">–ò—Ç–æ–≥–æ: ${total} ‚ÇΩ</div>`;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
            }
        }

        function toggleAdmin() {
            document.getElementById('adminModal').classList.add('show');
        }

        async function checkAdminPassword() {
            try {
                const password = document.getElementById('adminPassword').value;
                
                const response = await fetch('/api/admin/check', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({password: password})
                });
                
                const result = await response.json();
                
                if (result.success) {
                    isAdmin = true;
                    adminPassword = password;
                    document.getElementById('adminLogin').style.display = 'none';
                    document.getElementById('adminPanel').style.display = 'block';
                    document.getElementById('adminPassword').value = '';
                    renderProducts();
                } else {
                    alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
                    document.getElementById('adminPassword').value = '';
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', error);
            }
        }

        function logoutAdmin() {
            isAdmin = false;
            adminPassword = '';
            document.getElementById('adminLogin').style.display = 'block';
            document.getElementById('adminPanel').style.display = 'none';
            renderProducts();
        }

        function closeAdmin() {
            document.getElementById('adminModal').classList.remove('show');
            document.getElementById('adminPassword').value = '';
        }

        function editProduct(id) {
            if (!isAdmin) {
                alert('‚ùå –ù—É–∂–Ω—ã –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞!');
                return;
            }
            
            const product = products.find(p => p.id === id);
            document.getElementById('editId').value = id;
            document.getElementById('editName').value = product.title;
            document.getElementById('editPrice').value = product.price;
            document.getElementById('editDesc').value = product.description;
            document.getElementById('editEmoji').value = product.image;
            document.getElementById('editTitle').textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
            
            const preview = document.getElementById('photoPreview');
            if (product.photo) {
                preview.innerHTML = `<img src="${product.photo}" alt="–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ" style="max-width:150px;max-height:100px;border-radius:5px;">`;
            } else {
                preview.innerHTML = '<div style="color:#666;">–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</div>';
            }
            
            document.getElementById('editModal').classList.add('show');
        }

        function addNew() {
            if (!isAdmin) {
                alert('‚ùå –ù—É–∂–Ω—ã –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞!');
                return;
            }
            
            document.getElementById('editId').value = '';
            document.getElementById('editName').value = '';
            document.getElementById('editPrice').value = '';
            document.getElementById('editDesc').value = '';
            document.getElementById('editEmoji').value = 'üì¶';
            document.getElementById('editTitle').textContent = '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
            document.getElementById('photoPreview').innerHTML = '<div style="color:#666;">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</div>';
            document.getElementById('editModal').classList.add('show');
        }

        document.getElementById('editPhoto').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    currentPhoto = e.target.result;
                    const preview = document.getElementById('photoPreview');
                    preview.innerHTML = `<img src="${currentPhoto}" alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" style="max-width:150px;max-height:100px;border-radius:5px;">`;
                };
                reader.readAsDataURL(file);
            }
        });

        document.getElementById('editForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (!isAdmin) {
                alert('‚ùå –ù—É–∂–Ω—ã –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞!');
                return;
            }
            
            const id = document.getElementById('editId').value;
            const isEdit = id !== '';
            
            const data = {
                title: document.getElementById('editName').value,
                price: parseInt(document.getElementById('editPrice').value),
                description: document.getElementById('editDesc').value,
                image: document.getElementById('editEmoji').value || 'üì¶',
                active: true
            };
            
            if (currentPhoto) {
                data.photo = currentPhoto;
            }
            
            try {
                let response;
                if (isEdit) {
                    response = await fetch(`/api/products/${id}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Admin-Password': adminPassword
                        },
                        body: JSON.stringify(data)
                    });
                } else {
                    response = await fetch('/api/products', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Admin-Password': adminPassword
                        },
                        body: JSON.stringify(data)
                    });
                }
                
                if (response.ok) {
                    alert(isEdit ? '‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!' : '‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!');
                    closeEdit();
                    loadProducts();
                } else {
                    const error = await response.text();
                    alert('‚ùå –û—à–∏–±–∫–∞: ' + error);
                }
            } catch (error) {
                alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message);
            }
        });

        async function deleteProduct(id) {
            if (!isAdmin) {
                alert('‚ùå –ù—É–∂–Ω—ã –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞!');
                return;
            }
            
            if (!confirm('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ù–ê–í–°–ï–ì–î–ê?')) return;
            
            try {
                const response = await fetch(`/api/products/${id}`, {
                    method: 'DELETE',
                    headers: {'X-Admin-Password': adminPassword}
                });
                if (response.ok) {
                    alert('‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!');
                    loadProducts();
                }
            } catch (error) {
                alert('‚ùå –û—à–∏–±–∫–∞');
            }
        }

        function closeEdit() {
            document.getElementById('editModal').classList.remove('show');
            currentPhoto = null;
            document.getElementById('editPhoto').value = '';
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('modal')) {
                e.target.classList.remove('show');
            }
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        loadProducts();
    </script>
</body>
</html>"""
            response = f"""HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: {len(html_content.encode('utf-8'))}

{html_content}"""
        else:
            response_body = "<h1>404 - Not Found</h1>"
            response = f"""HTTP/1.1 404 Not Found
Content-Type: text/html; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}

{response_body}"""
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if isinstance(response, str):
            client_socket.send(response.encode('utf-8'))
        else:
            client_socket.send(response)
        client_socket.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        client_socket.close()

def start_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    
    try:
        server_socket.bind(('', PORT))
        server_socket.listen(5)
        
        print(f"üöÄ –†–ê–ë–û–ß–ò–ô —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{PORT}")
        print(f"üì± –ú–∞–≥–∞–∑–∏–Ω: http://localhost:{PORT}")
        print(f"üîë –ê–î–ú–ò–ù –ü–ê–†–û–õ–¨: {ADMIN_PASSWORD}")
        print(f"üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {UPLOADS_DIR}")
        print(f"üíæ –î–∞–Ω–Ω—ã–µ: {DATA_FILE}")
        print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
        
        while True:
            client_socket, addr = server_socket.accept()
            handle_request(client_socket)
            
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤...")
        save_products(products)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        server_socket.close()

if __name__ == "__main__":
    start_server()

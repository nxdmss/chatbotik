#!/usr/bin/env python3
"""
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –æ–±—ã—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""

import os
import json
import sqlite3
import shutil
from datetime import datetime

DB_PATH = "shop.db"
BACKUP_DIR = "db_backups"
JSON_BACKUP = "products_backup.json"

def force_restore():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    
    if os.path.exists(DB_PATH):
        try:
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM products WHERE is_active = 1")
                active_count = cursor.fetchone()[0]
                cursor.execute("SELECT COUNT(*) FROM products")
                total_count = cursor.fetchone()[0]
            print(f"   üì¶ –ë–î: {total_count} —Ç–æ–≤–∞—Ä–æ–≤ –≤—Å–µ–≥–æ, {active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        except:
            print("   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ë–î")
    else:
        print("   ‚ùå –ë–î –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –±—ç–∫–∞–ø
    if os.path.exists(JSON_BACKUP):
        try:
            with open(JSON_BACKUP, 'r', encoding='utf-8') as f:
                products = json.load(f)
            print(f"   üìÑ JSON –±—ç–∫–∞–ø: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        except:
            print("   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –±—ç–∫–∞–ø–∞")
    else:
        print("   ‚ùå JSON –±—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º DB –±—ç–∫–∞–ø—ã
    if os.path.exists(BACKUP_DIR):
        backups = [f for f in os.listdir(BACKUP_DIR) if f.endswith('.db')]
        print(f"   üíæ DB –±—ç–∫–∞–ø—ã: {len(backups)} —Ñ–∞–π–ª–æ–≤")
        if backups:
            backups.sort(reverse=True)
            print(f"   üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π: {backups[0]}")
    else:
        print("   ‚ùå –ü–∞–ø–∫–∞ DB –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # 4. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ:")
    
    restored = False
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑ JSON
    if os.path.exists(JSON_BACKUP) and not restored:
        try:
            print("   üìÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ JSON...")
            with open(JSON_BACKUP, 'r', encoding='utf-8') as f:
                products = json.load(f)
            
            # –°–æ–∑–¥–∞–µ–º –ë–î –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS products (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        title TEXT NOT NULL,
                        description TEXT,
                        price REAL NOT NULL,
                        sizes TEXT,
                        photo TEXT,
                        is_active INTEGER DEFAULT 1,
                        created_at TEXT
                    )
                """)
                
                # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                cursor.execute("DELETE FROM products")
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                for product in products:
                    created_at = product.get("created_at", datetime.now().isoformat())
                    cursor.execute("""
                        INSERT INTO products (id, title, description, price, sizes, photo, is_active, created_at)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        product.get("id"),
                        product.get("title", ""),
                        product.get("description", ""),
                        product.get("price", 0),
                        json.dumps(product.get("sizes", [])),
                        product.get("photo", ""),
                        1 if product.get("is_active", True) else 0,
                        created_at
                    ))
                
                conn.commit()
            
            print(f"   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON")
            restored = True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ JSON: {e}")
    
    # –ï—Å–ª–∏ JSON –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑ DB –±—ç–∫–∞–ø–∞
    if not restored and os.path.exists(BACKUP_DIR):
        backups = [f for f in os.listdir(BACKUP_DIR) if f.endswith('.db')]
        if backups:
            try:
                backups.sort(reverse=True)
                latest_backup = os.path.join(BACKUP_DIR, backups[0])
                print(f"   üíæ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ DB –±—ç–∫–∞–ø–∞: {latest_backup}")
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ë–î
                if os.path.exists(DB_PATH):
                    os.remove(DB_PATH)
                
                # –ö–æ–ø–∏—Ä—É–µ–º –±—ç–∫–∞–ø
                shutil.copy2(latest_backup, DB_PATH)
                print("   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ DB –±—ç–∫–∞–ø–∞")
                restored = True
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ DB –±—ç–∫–∞–ø–∞: {e}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    
    if os.path.exists(DB_PATH):
        try:
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM products WHERE is_active = 1")
                active_count = cursor.fetchone()[0]
                cursor.execute("SELECT COUNT(*) FROM products")
                total_count = cursor.fetchone()[0]
            print(f"   üì¶ –ë–î: {total_count} —Ç–æ–≤–∞—Ä–æ–≤ –≤—Å–µ–≥–æ, {active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            
            if active_count > 0:
                print("   ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!")
            else:
                print("   ‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
    else:
        print("   ‚ùå –ë–î –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    print("\n" + "=" * 50)
    
    if restored:
        print("üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        print("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–Ω–æ–≤–æ")

if __name__ == "__main__":
    force_restore()

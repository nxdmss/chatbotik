#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –°–ï–†–í–ï–†
–° –ø–æ–ª–Ω—ã–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∂–µ—Å—Ç–∫–æ–π –ø—Ä–∏–≤—è–∑–∫–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import json
import socket
import os
import uuid

# –ü–æ—Ä—Ç
PORT = 8000

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
products = [
    {
        "id": 1, 
        "title": "–§—É—Ç–±–æ–ª–∫–∞", 
        "price": 1500, 
        "description": "–ö—Ä—É—Ç–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –∏–∑ —Ö–ª–æ–ø–∫–∞",
        "image": "üëï",
        "active": True
    },
    {
        "id": 2, 
        "title": "–î–∂–∏–Ω—Å—ã", 
        "price": 3000, 
        "description": "–°—Ç–∏–ª—å–Ω—ã–µ –¥–∂–∏–Ω—Å—ã —Å–∫–∏–Ω–Ω–∏",
        "image": "üëñ", 
        "active": True
    },
    {
        "id": 3, 
        "title": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏", 
        "price": 5000, 
        "description": "–£–¥–æ–±–Ω—ã–µ –±–µ–≥–æ–≤—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏",
        "image": "üëü", 
        "active": True
    },
    {
        "id": 4, 
        "title": "–ö—É—Ä—Ç–∫–∞", 
        "price": 4000, 
        "description": "–¢–µ–ø–ª–∞—è –∑–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞",
        "image": "üß•", 
        "active": True
    },
    {
        "id": 5, 
        "title": "–†—é–∫–∑–∞–∫", 
        "price": 2500, 
        "description": "–°—Ç–∏–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Ä—é–∫–∑–∞–∫",
        "image": "üéí", 
        "active": True
    },
    {
        "id": 6, 
        "title": "–ß–∞—Å—ã", 
        "price": 8000, 
        "description": "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –Ω–∞—Ä—É—á–Ω—ã–µ —á–∞—Å—ã",
        "image": "‚åö", 
        "active": True
    }
]

# –ö–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
carts = {}

def get_cart(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in carts:
        carts[user_id] = []
    return carts[user_id]

def handle_request(client_socket):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"""
    request = client_socket.recv(4096).decode('utf-8')
    
    if not request:
        return
    
    # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å
    lines = request.split('\n')
    first_line = lines[0]
    parts = first_line.split()
    
    if len(parts) < 3:
        return
    
    method, path, protocol = parts[0], parts[1], parts[2]
    
    print(f"üì• {method} {path}")
    
    # API —Ç–æ–≤–∞—Ä–æ–≤
    if path == '/api/products':
        response_body = json.dumps(products, ensure_ascii=False)
        response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS
Access-Control-Allow-Headers: Content-Type

{response_body}"""
    
    # API –∫–æ—Ä–∑–∏–Ω—ã
    elif path.startswith('/api/cart/'):
        user_id = path.split('/')[-1]
        
        if method == 'GET':
            # –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
            cart = get_cart(user_id)
            response_body = json.dumps(cart, ensure_ascii=False)
            response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
        
        elif method == 'POST':
            # –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
            content_length = int(request.split('Content-Length: ')[1].split('\n')[0])
            post_data = request.split('\r\n\r\n')[1][:content_length]
            
            try:
                data = json.loads(post_data)
                product_id = data.get('product_id')
                quantity = data.get('quantity', 1)
                
                cart = get_cart(user_id)
                
                # –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä
                product = None
                for p in products:
                    if p['id'] == product_id:
                        product = p
                        break
                
                if product:
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
                    existing_item = None
                    for item in cart:
                        if item['product_id'] == product_id:
                            existing_item = item
                            break
                    
                    if existing_item:
                        existing_item['quantity'] += quantity
                    else:
                        cart.append({
                            'id': str(uuid.uuid4()),
                            'product_id': product_id,
                            'title': product['title'],
                            'price': product['price'],
                            'image': product['image'],
                            'quantity': quantity
                        })
                    
                    response_body = json.dumps({"success": True, "cart": cart}, ensure_ascii=False)
                    response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
                else:
                    response_body = json.dumps({"success": False, "error": "Product not found"}, ensure_ascii=False)
                    response = f"""HTTP/1.1 404 Not Found
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
            except Exception as e:
                response_body = json.dumps({"success": False, "error": str(e)}, ensure_ascii=False)
                response = f"""HTTP/1.1 400 Bad Request
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
        
        elif method == 'DELETE':
            # –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            content_length = int(request.split('Content-Length: ')[1].split('\n')[0])
            post_data = request.split('\r\n\r\n')[1][:content_length]
            
            try:
                data = json.loads(post_data)
                item_id = data.get('item_id')
                
                cart = get_cart(user_id)
                cart = [item for item in cart if item['id'] != item_id]
                carts[user_id] = cart
                
                response_body = json.dumps({"success": True, "cart": cart}, ensure_ascii=False)
                response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
            except Exception as e:
                response_body = json.dumps({"success": False, "error": str(e)}, ensure_ascii=False)
                response = f"""HTTP/1.1 400 Bad Request
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    elif path == '/api/products' and method == 'POST':
        content_length = int(request.split('Content-Length: ')[1].split('\n')[0])
        post_data = request.split('\r\n\r\n')[1][:content_length]
        
        try:
            data = json.loads(post_data)
            
            new_product = {
                "id": len(products) + 1,
                "title": data.get('title', '–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä'),
                "price": data.get('price', 0),
                "description": data.get('description', ''),
                "image": data.get('image', 'üì¶'),
                "active": True
            }
            
            products.append(new_product)
            
            response_body = json.dumps({"success": True, "product": new_product}, ensure_ascii=False)
            response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
        except Exception as e:
            response_body = json.dumps({"success": False, "error": str(e)}, ensure_ascii=False)
            response = f"""HTTP/1.1 400 Bad Request
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    elif path.startswith('/api/products/') and method == 'PUT':
        product_id = int(path.split('/')[-1])
        content_length = int(request.split('Content-Length: ')[1].split('\n')[0])
        post_data = request.split('\r\n\r\n')[1][:content_length]
        
        try:
            data = json.loads(post_data)
            
            for i, product in enumerate(products):
                if product['id'] == product_id:
                    products[i] = {
                        "id": product_id,
                        "title": data.get('title', product['title']),
                        "price": data.get('price', product['price']),
                        "description": data.get('description', product['description']),
                        "image": data.get('image', product.get('image', 'üì¶')),
                        "active": data.get('active', product['active'])
                    }
                    
                    response_body = json.dumps({"success": True, "product": products[i]}, ensure_ascii=False)
                    response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
                    break
            else:
                response_body = json.dumps({"success": False, "error": "Product not found"}, ensure_ascii=False)
                response = f"""HTTP/1.1 404 Not Found
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
        except Exception as e:
            response_body = json.dumps({"success": False, "error": str(e)}, ensure_ascii=False)
            response = f"""HTTP/1.1 400 Bad Request
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–†–ï–ê–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï)
    elif path.startswith('/api/products/') and method == 'DELETE':
        product_id = int(path.split('/')[-1])
        
        for i, product in enumerate(products):
            if product['id'] == product_id:
                del products[i]
                response_body = json.dumps({"success": True}, ensure_ascii=False)
                response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
                break
        else:
            response_body = json.dumps({"success": False, "error": "Product not found"}, ensure_ascii=False)
            response = f"""HTTP/1.1 404 Not Found
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
    
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    elif path == '/':
        try:
            with open('final_index.html', 'r', encoding='utf-8') as f:
                html_content = f.read()
        except FileNotFoundError:
            html_content = "<h1>–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>"
        
        response = f"""HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: {len(html_content.encode('utf-8'))}

{html_content}"""
    
    else:
        # 404
        response_body = "<h1>404 - Not Found</h1>"
        response = f"""HTTP/1.1 404 Not Found
Content-Type: text/html; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}

{response_body}"""
    
    client_socket.send(response.encode('utf-8'))
    client_socket.close()

def start_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind(('', PORT))
    server_socket.listen(5)
    
    print(f"üåê –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{PORT}")
    print(f"üì± –ú–∞–≥–∞–∑–∏–Ω: http://localhost:{PORT}")
    print(f"üõí –ö–æ—Ä–∑–∏–Ω–∞: –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
    
    try:
        while True:
            client_socket, addr = server_socket.accept()
            handle_request(client_socket)
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        server_socket.close()

if __name__ == "__main__":
    start_server()

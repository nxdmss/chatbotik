#!/usr/bin/env python3
# coding: utf-8

import os
import json
import asyncio
from typing import Dict, List, Optional, Any
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    LabeledPrice,
    PreCheckoutQuery,
    WebAppInfo,
)

from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
from models import (
    Product, CartItem, OrderCreate, Order, AdminNote, 
    DialogMessage, UserProfile, WebAppData, PaymentData, AdminAction
)
from logger_config import setup_logging, bot_logger
from error_handlers import (
    handle_errors, handle_webapp_errors, safe_send_message, 
    safe_send_photo, validate_user_input, validate_admin_access, 
    validate_order_data, ValidationError, SecurityError, BusinessLogicError
)
from database import db

from shop.catalog import PRODUCTS, get_product, format_price, add_product as catalog_add_product
from shop.cart import get_cart, cart_total

# ======================
# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# ======================

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMINS = [x.strip() for x in os.getenv("ADMINS", "").split(",") if x.strip()]

# –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
db.migrate_from_json()

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

ADMINS = [str(x) for x in ADMINS]

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging(log_level=os.getenv("LOG_LEVEL", "INFO"))
bot_logger.logger.info("Bot starting up", admins_count=len(ADMINS))

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

DATA_FILE = "orders.json"
ADMIN_MSGS_FILE = "admin_msgs.json"

data = {
    "orders": {},
    "order_counter": 1,
    "user_states": {},
    "admin_note_state": {},
    "dialogs": {}
}

STATUSES = {"–ù–æ–≤—ã–π": "new", "–í —Ä–∞–±–æ—Ç–µ": "work", "–ó–∞–≤–µ—Ä—à—ë–Ω": "done"}
REVERSE_STATUSES = {v: k for k, v in STATUSES.items()}

# ======================
# üîπ FSM: –∞–¥–º–∏–Ω—Å–∫–∏–π –¥–∏–∞–ª–æ–≥
# ======================

class AdminDialog(StatesGroup):
    chatting = State()

class ContactAdmin(StatesGroup):
    waiting_message = State()

# ======================
# üîπ –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
# ======================

def save_data() -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        bot_logger.logger.debug("Data saved successfully")
    except Exception as e:
        bot_logger.log_error(e, {"action": "save_data"})
        raise

def load_data() -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                loaded = json.load(f)
                data.update(loaded)
            bot_logger.logger.debug("Data loaded successfully")
    except Exception as e:
        bot_logger.log_error(e, {"action": "load_data"})
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
        data.update({
            "orders": {},
            "order_counter": 1,
            "user_states": {},
            "admin_note_state": {},
            "dialogs": {}
        })

load_data()

def save_admin_msgs(admin_id: str, msg_id: int) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        msgs = {}
        if os.path.exists(ADMIN_MSGS_FILE):
            with open(ADMIN_MSGS_FILE, "r", encoding="utf-8") as f:
                msgs = json.load(f)
        msgs.setdefault(str(admin_id), []).append(msg_id)
        with open(ADMIN_MSGS_FILE, "w", encoding="utf-8") as f:
            json.dump(msgs, f, ensure_ascii=False, indent=2)
    except Exception as e:
        bot_logger.log_error(e, {"action": "save_admin_msgs", "admin_id": admin_id})

def get_admin_msgs(admin_id: str) -> List[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        if not os.path.exists(ADMIN_MSGS_FILE):
            return []
        with open(ADMIN_MSGS_FILE, "r", encoding="utf-8") as f:
            msgs = json.load(f)
        return msgs.get(str(admin_id), [])
    except Exception as e:
        bot_logger.log_error(e, {"action": "get_admin_msgs", "admin_id": admin_id})
        return []

def clear_admin_msgs(admin_id: str) -> None:
    """–û—á–∏—Å—Ç–∫–∞ ID —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        if not os.path.exists(ADMIN_MSGS_FILE):
            return
        with open(ADMIN_MSGS_FILE, "r", encoding="utf-8") as f:
            msgs = json.load(f)
        msgs[str(admin_id)] = []
        with open(ADMIN_MSGS_FILE, "w", encoding="utf-8") as f:
            json.dump(msgs, f, ensure_ascii=False, indent=2)
    except Exception as e:
        bot_logger.log_error(e, {"action": "clear_admin_msgs", "admin_id": admin_id})

# ======================
# üîπ –§—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# ======================

@handle_errors
async def register_user(message: Message) -> bool:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    user = message.from_user
    return db.add_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )

@handle_errors
async def is_user_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    user = db.get_user(user_id)
    return user and user.get('is_admin', False)

@handle_errors
async def send_notification_to_admins(message_text: str, order_data: Dict = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º"""
    for admin_id in ADMINS:
        try:
            if order_data:
                text = f"üîî **–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n{message_text}\n\n"
                text += f"üì¶ **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:**\n"
                text += f"üí∞ –°—É–º–º–∞: {order_data.get('total_amount', 0)} ‚ÇΩ\n"
                text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order_data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                text += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            else:
                text = f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n{message_text}"
            
            await safe_send_message(bot, int(admin_id), text)
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@handle_errors
async def send_order_notification(order_id: int, user_id: int, status: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    status_messages = {
        'paid': "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω! –ú—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É.",
        'shipped': "üöö –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É.",
        'delivered': "üéâ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        'cancelled': "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
    }
    
    message = status_messages.get(status, f"üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id}: {status}")
    await safe_send_message(bot, user_id, message)

# ======================
# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ======================

def main_kb() -> ReplyKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    web_url = os.getenv('WEBAPP_URL') or os.getenv('REPL_URL') or os.getenv('REPL_SLUG')
    kb = []
    
    if web_url and isinstance(web_url, str) and web_url.startswith('http'):
        kb.append([KeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=web_url))])
    else:
        kb.append([KeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω")])
    
    kb.append([KeyboardButton(text="‚ùì FAQ"), KeyboardButton(text="üí¨ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º")])
    
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def admin_main_kb() -> ReplyKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    web_url = os.getenv('WEBAPP_URL') or os.getenv('REPL_URL') or os.getenv('REPL_SLUG')
    kb = []
    
    kb.append([KeyboardButton(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    kb.append([KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")])
    kb.append([KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")])
    kb.append([KeyboardButton(text="üõí –ú–ê–ì–ê–ó–ò–ù", web_app=WebAppInfo(url=web_url))])
    
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_user_kb(user_id: int) -> ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return admin_main_kb() if str(user_id) in ADMINS else main_kb()

def exit_dialog_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –í—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞")]],
        resize_keyboard=True
    )

async def get_user_name(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        chat = await bot.get_chat(int(user_id))
        return getattr(chat, "full_name", None) or getattr(chat, "username", None) or str(user_id)
    except Exception as e:
        bot_logger.log_error(e, {"user_id": user_id, "action": "get_user_name"})
        return str(user_id)

async def admin_clients_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    buttons = []
    try:
        for user_id in data.get("orders", {}):
            user_name = await get_user_name(user_id)
            buttons.append([
                InlineKeyboardButton(
                    text=user_name,
                    callback_data=f"adminclient_{user_id}"
                ),
                InlineKeyboardButton(
                    text=f"üí¨ –°–≤—è–∑—å —Å {user_name}",
                    callback_data=f"adminchat_{user_id}"
                )
            ])
        if not buttons:
            buttons.append([InlineKeyboardButton(text="–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="none")])
    except Exception as e:
        bot_logger.log_error(e, {"action": "admin_clients_kb"})
        buttons.append([InlineKeyboardButton(text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", callback_data="none")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def admin_client_orders_kb(user_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    buttons = []
    try:
        orders = data.get("orders", {}).get(user_id, [])
        for order in orders:
            btn_text = f"–ó–∞–∫–∞–∑ ‚Ññ{order['order_id']} | {order['text'][:20]}"
            buttons.append([
                InlineKeyboardButton(
                    text=btn_text,
                    callback_data=f"adminorder_{user_id}_{order['order_id']}"
                )
            ])
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminback")])
        if len(orders) == 0:
            buttons.insert(0, [InlineKeyboardButton(text="–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤", callback_data="none")])
    except Exception as e:
        bot_logger.log_error(e, {"action": "admin_client_orders_kb", "user_id": user_id})
        buttons.append([InlineKeyboardButton(text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", callback_data="none")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def admin_order_full_kb(order: dict, user_id: str, order_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º"""
    kb = [
        [InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"note_{user_id}_{order_id}")]
    ] + [
        [InlineKeyboardButton(text=f"üìå {name}", callback_data=f"status_{user_id}_{order_id}_{code}")]
        for name, code in STATUSES.items()
    ]
    kb.append([InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"delete_{user_id}_{order_id}")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# ======================
# üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
# ======================

@dp.message(Command("start"))
@handle_errors
async def start(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(msg.chat.id)
    data["user_states"].pop(user_id, None)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await register_user(msg)
    
    bot_logger.log_user_action(user_id, "start_command")
    
    if user_id in ADMINS:
        await msg.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!", reply_markup=admin_main_kb())
        bot_logger.log_admin_action(user_id, "start_command")
    else:
        await msg.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}!", reply_markup=main_kb())

@dp.message(F.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
@handle_errors
async def admin_panel_btn(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = str(msg.chat.id)
    
    try:
        validate_admin_access(user_id, ADMINS)
    except SecurityError:
        await msg.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    
    kb = await admin_clients_kb()
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–≤—è–∑–∏:",
        reply_markup=kb
    )
    bot_logger.log_admin_action(user_id, "open_admin_panel")

@dp.callback_query(lambda c: c.data.startswith("adminclient_"))
@handle_errors
async def admin_client_orders(c: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = c.data.split("_")[1]
    kb = admin_client_orders_kb(user_id)
    user_name = await get_user_name(user_id)
    user_link = f"<a href='tg://user?id={user_id}'>{user_name}</a>"
    
    await c.message.edit_text(
        f"–ö–ª–∏–µ–Ω—Ç: {user_link}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    save_admin_msgs(c.from_user.id, c.message.message_id)
    await c.answer()
    
    bot_logger.log_admin_action(str(c.from_user.id), "view_client_orders", user_id)

@dp.callback_query(lambda c: c.data.startswith("adminchat_"))
@handle_errors
async def admin_chat_with_client(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
    user_id = c.data.split("_")[1]
    admin_id = str(c.from_user.id)
    
    try:
        validate_admin_access(admin_id, ADMINS)
    except SecurityError:
        await c.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!", show_alert=True)
        return
    
    await state.set_state(AdminDialog.chatting)
    await state.update_data(user_id=user_id, order_id=None)
    
    history = data.get("dialogs", {}).get(user_id, [])
    history_text = "\n".join([
        f"{'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if m['from']=='user' else 'üõ† –ê–¥–º–∏–Ω'}: {m.get('text','')}"
        for m in history[-20:]
    ]) if history else "–ß–∞—Ç –ø—É—Å—Ç. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É."
    
    user_name = await get_user_name(user_id)
    await bot.send_message(
        c.from_user.id,
        f"üí¨ –î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º <b>{user_name}</b>:\n\n{history_text}",
        reply_markup=exit_dialog_kb(),
        parse_mode="HTML"
    )
    await c.answer()
    
    bot_logger.log_admin_action(admin_id, "start_chat_with_client", user_id)

@dp.callback_query(lambda c: c.data == "adminback")
@handle_errors
async def admin_back_to_clients(c: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    kb = await admin_clients_kb()
    await c.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–≤—è–∑–∏:",
        reply_markup=kb
    )
    save_admin_msgs(c.from_user.id, c.message.message_id)
    await c.answer()

@dp.callback_query(lambda c: c.data.startswith("adminorder_"))
@handle_errors
async def admin_order_info(c: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
    _, user_id, order_id = c.data.split("_")
    order_id = int(order_id)
    
    try:
        validate_admin_access(str(c.from_user.id), ADMINS)
    except SecurityError:
        await c.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!", show_alert=True)
        return
    
    user_orders = data["orders"].get(user_id, [])
    order = next((o for o in user_orders if o["order_id"] == order_id), None)
    
    if not order:
        await c.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user_name = await get_user_name(user_id)
    user_link = f"<a href='tg://user?id={user_id}'>{user_name}</a>"

    status_name = REVERSE_STATUSES.get(order["status"], order["status"])
    text = (f"üõí –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n"
            f"–°—Ç–∞—Ç—É—Å: <b>{status_name}</b>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
            f"–¢–µ–∫—Å—Ç: {order['text']}\n\n")
    
    notes = order.get("admin_notes", [])
    if notes:
        text += "üîí –ó–∞–º–µ—Ç–∫–∏ –∞–¥–º–∏–Ω–∞ (–ø—Ä–∏–≤–∞—Ç–Ω–æ):\n"
        for n in notes:
            t = n.get("time", "")
            aid = n.get("admin_id", "")
            atxt = n.get("text", "")
            text += f"- [{t}] admin {aid}: {atxt}\n"
    else:
        text += "üîí –ó–∞–º–µ—Ç–æ–∫ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç.\n"

    kb = admin_order_full_kb(order, user_id, order_id)
    
    try:
        if "photo_id" in order:
            msg = await bot.send_photo(c.from_user.id, order["photo_id"], caption=text, reply_markup=kb)
        else:
            msg = await bot.send_message(c.from_user.id, text, reply_markup=kb)
        save_admin_msgs(
            c.from_user.id,
            msg.message_id if hasattr(msg, "message_id") else c.message.message_id)
    except Exception as e:
        bot_logger.log_error(e, {"action": "admin_order_info", "order_id": order_id})
        await c.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", show_alert=True)
        return
    
    await c.answer()
    bot_logger.log_admin_action(str(c.from_user.id), "view_order", f"order_{order_id}")

@dp.callback_query(lambda c: c.data.startswith("note_"))
@handle_errors
async def admin_add_note_cb(c: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∫ –∑–∞–∫–∞–∑—É"""
    try:
        validate_admin_access(str(c.from_user.id), ADMINS)
    except SecurityError:
        await c.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!", show_alert=True)
        return
    
    _, user_id, order_id = c.data.split("_")
    data["admin_note_state"][str(c.from_user.id)] = (user_id, int(order_id))
    await bot.send_message(c.from_user.id, "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É. –û–Ω–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    await c.answer()
    
    bot_logger.log_admin_action(str(c.from_user.id), "add_note_request", f"order_{order_id}")

@dp.callback_query(lambda c: c.data.startswith("delete_"))
@handle_errors
async def admin_delete_order(c: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        validate_admin_access(str(c.from_user.id), ADMINS)
    except SecurityError:
        await c.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!", show_alert=True)
        return
    
    _, user_id, order_id = c.data.split("_")
    order_id = int(order_id)
    user_orders = data.get('orders', {}).get(user_id, [])
    idx = next((i for i,o in enumerate(user_orders) if o.get('order_id')==order_id), None)
    
    if idx is None:
        await c.answer('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
    removed = user_orders.pop(idx)
    data['orders'][user_id] = user_orders
    save_data()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
    try:
        await safe_send_message(bot, int(user_id), f"üóë –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
    except Exception as e:
        bot_logger.log_error(e, {"action": "notify_user_order_deleted", "user_id": user_id})
    
    for admin_id in ADMINS:
        try:
            await safe_send_message(bot, int(admin_id), f"üóë –ó–∞–∫–∞–∑ #{order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {c.from_user.id}")
        except Exception as e:
            bot_logger.log_error(e, {"action": "notify_admin_order_deleted", "admin_id": admin_id})
    
    await c.answer('–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω', show_alert=True)
    bot_logger.log_admin_action(str(c.from_user.id), "delete_order", f"order_{order_id}")

@dp.callback_query(lambda c: c.data.startswith("status_"))
@handle_errors
async def change_order_status(c: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    try:
        validate_admin_access(str(c.from_user.id), ADMINS)
    except SecurityError:
        await c.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!", show_alert=True)
        return
    
    _, user_id, order_id, status_code = c.data.split("_")
    order_id = int(order_id)
    
    if status_code not in REVERSE_STATUSES:
        await c.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.", show_alert=True)
        return
    
    user_orders = data["orders"].get(user_id, [])
    order = next((o for o in user_orders if o["order_id"] == order_id), None)
    
    if not order:
        await c.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    old_status = order["status"]
    order["status"] = status_code
    save_data()
    
    await c.answer(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{REVERSE_STATUSES[status_code]}'", show_alert=True)
    
    try:
        await admin_order_info(c)
    except Exception as e:
        bot_logger.log_error(e, {"action": "refresh_order_info"})
    
    bot_logger.log_order_status_changed(order_id, old_status, status_code, str(c.from_user.id))

@dp.message(F.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
@handle_errors
async def admin_clear_chat(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        validate_admin_access(str(msg.chat.id), ADMINS)
    except SecurityError:
        await msg.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    
    msgs = get_admin_msgs(msg.chat.id)
    for mid in msgs:
        try:
            await bot.delete_message(msg.chat.id, mid)
        except Exception as e:
            bot_logger.log_error(e, {"action": "delete_admin_message", "message_id": mid})
    
    clear_admin_msgs(msg.chat.id)
    await state.clear()
    await msg.answer("‚úÖ –ß–∞—Ç –∏ –≤—Å–µ –æ–∫–Ω–∞ –æ—á–∏—â–µ–Ω—ã.", reply_markup=admin_main_kb())
    
    bot_logger.log_admin_action(str(msg.chat.id), "clear_chat")


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@handle_errors
async def admin_statistics(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    user_id = str(msg.chat.id)
    
    try:
        validate_admin_access(user_id, ADMINS)
    except SecurityError:
        await msg.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        products_count = len(db.get_products())
        orders = db.get_all_orders()
        orders_count = len(orders)
        total_revenue = sum(order['total_amount'] for order in orders)
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞**

üõç **–¢–æ–≤–∞—Ä—ã:** {products_count}
üì¶ **–ó–∞–∫–∞–∑—ã:** {orders_count}
üí∞ **–í—ã—Ä—É—á–∫–∞:** {total_revenue:,.0f} ‚ÇΩ

üìà **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:**
"""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤
        for order in orders[:5]:
            stats_text += f"‚Ä¢ #{order['id']} - {order['total_amount']:,.0f} ‚ÇΩ ({order['status']})\n"
        
        await msg.answer(stats_text, reply_markup=admin_main_kb())
        bot_logger.log_admin_action(user_id, "view_statistics")
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", reply_markup=admin_main_kb())
        bot_logger.log_error(e, {"action": "admin_statistics", "admin_id": user_id})

@dp.message(F.text == "‚ùì FAQ")
@handle_errors
async def faq(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ FAQ"""
    await msg.answer(
        "‚ùì <b>FAQ</b>\n\n"
        "üì¶ –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚Äî –Ω–∞–∂–º–∏—Ç–µ 'üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' –∏ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ.\n"
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –º—ã —Å–≤—è–∂–µ–º—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.\n"
        "üîÅ –í–æ–∑–≤—Ä–∞—Ç ‚Äî –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π.\n"
        "üí¨ –í–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç!",
        reply_markup=get_user_kb(msg.chat.id)
    )
    
    bot_logger.log_user_action(str(msg.chat.id), "view_faq")

# ======================
# üîπ WebApp –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ======================


@dp.message()
@handle_webapp_errors
async def handle_web_app_message(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp"""
    wad = getattr(msg, 'web_app_data', None)
    if not wad:
        return
    
    try:
        payload = json.loads(wad.data)
    except Exception as e:
        bot_logger.log_error(e, {"action": "parse_webapp_data"})
        await msg.answer('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App.')
        return

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Pydantic
    try:
        webapp_data = WebAppData(**payload)
    except ValidationError as e:
        bot_logger.log_error(e, {"action": "validate_webapp_data", "user_id": str(msg.from_user.id)})
        await msg.answer('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App.')
        return

    action = webapp_data.action
    user_id = str(msg.from_user.id)
    
    bot_logger.log_webapp_interaction(user_id, action, True)

    if action == 'add_product':
        # –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ WebApp
        try:
            validate_admin_access(user_id, ADMINS)
        except SecurityError:
            await msg.answer('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã.')
            return
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä
            product = Product(**webapp_data.product.dict())
            created = catalog_add_product(product.dict())
            await msg.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{created.get('title')}' –¥–æ–±–∞–≤–ª–µ–Ω —Å id {created.get('id')}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
            for admin_id in ADMINS:
                try:
                    await safe_send_message(
                        bot, int(admin_id), 
                        f"üÜï –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä: <b>{created.get('title')}</b> (id: {created.get('id')})", 
                        parse_mode='HTML'
                    )
                except Exception as e:
                    bot_logger.log_error(e, {"action": "notify_admin_product_added", "admin_id": admin_id})
            
            bot_logger.log_admin_action(user_id, "add_product", created.get('id'))
        except ValidationError as e:
            await msg.answer(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e.message}')
        except Exception as e:
            bot_logger.log_error(e, {"action": "add_product", "user_id": user_id})
            await msg.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.')
        return

    if action != 'checkout':
        await msg.answer('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ Web App.')
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_data = OrderCreate(
            text=f"–ó–∞–∫–∞–∑ –∏–∑ WebApp, {len(webapp_data.items)} –ø–æ–∑–∏—Ü–∏–π, —Å—É–º–º–∞ {webapp_data.total} ‚ÇΩ",
            items=webapp_data.items,
            total=webapp_data.total
        )
        
        # Server-side validation: –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
        expected_total = 0
        for item in order_data.items:
            prod = get_product(item.product_id)
            if not prod:
                raise ValidationError(f"–¢–æ–≤–∞—Ä {item.product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            expected_total += prod['price'] * item.qty

        if expected_total != order_data.total:
            raise ValidationError("–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_id = data['order_counter']
        data['order_counter'] += 1
        
        order = Order(
            order_id=order_id,
            text=order_data.text,
            status='new',
            items=[item.dict() for item in order_data.items],
            total=expected_total,
            from_webapp=True
        )
        
        data.setdefault('orders', {}).setdefault(user_id, []).append(order.dict())
        save_data()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMINS:
            try:
                await safe_send_message(
                    bot, int(admin_id), 
                    f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} (WebApp) –æ—Ç <a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>\n–°—É–º–º–∞: {format_price(expected_total)}", 
                    parse_mode='HTML'
                )
            except Exception as e:
                bot_logger.log_error(e, {"action": "notify_admin_new_order", "admin_id": admin_id})

        await msg.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        bot_logger.log_order_created(order_id, user_id, expected_total, len(order_data.items))
        
    except ValidationError as e:
        await msg.answer(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞: {e.message}')
    except Exception as e:
        bot_logger.log_error(e, {"action": "process_webapp_order", "user_id": user_id})
        await msg.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.')

# ======================
# üîπ –î–∏–∞–ª–æ–≥–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
# ======================

@dp.message(F.text == "üí¨ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º")
@handle_errors
async def client_start_chat(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    await state.set_state(ContactAdmin.waiting_message)
    await msg.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ 'üîô –í—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞'.", reply_markup=exit_dialog_kb())
    
    bot_logger.log_user_action(str(msg.chat.id), "start_admin_chat")

@dp.message(ContactAdmin.waiting_message)
@handle_errors
async def client_chat_message(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = str(msg.chat.id)
    
    if msg.text and msg.text.strip() and msg.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞":
        await state.clear()
        await msg.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å –∞–¥–º–∏–Ω–æ–º.", reply_markup=get_user_kb(msg.chat.id))
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if msg.text:
            validated_text = validate_user_input(msg.text, max_length=2000)
        else:
            validated_text = None
    except ValidationError as e:
        await msg.answer(f"‚ùå {e.message}")
        return
    
    dialogs = data.setdefault("dialogs", {}).setdefault(user_id, [])
    
    if msg.text and validated_text:
        dialogs.append({"from": "user", "text": validated_text})
    elif msg.photo:
        file_id = msg.photo[-1].file_id
        dialogs.append({"from": "user", "text": "[–§–æ—Ç–æ]", "photo_id": file_id})
    elif msg.document:
        file_id = msg.document.file_id
        dialogs.append({"from": "user", "text": "[–î–æ–∫—É–º–µ–Ω—Ç]", "file_id": file_id})
    else:
        await msg.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    data["dialogs"][user_id] = dialogs[-100:]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    save_data()
    
    user_name = await get_user_name(user_id)
    user_link = f"<a href='tg://user?id={user_id}'>{user_name}</a>"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        try:
            if msg.text:
                await safe_send_message(
                    bot, int(admin_id), 
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {user_link}:\n{validated_text}"
                )
            elif msg.photo:
                file_id = msg.photo[-1].file_id
                await safe_send_photo(
                    bot, int(admin_id), file_id, 
                    caption=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {user_link}: [–§–æ—Ç–æ]"
                )
            elif msg.document:
                file_id = msg.document.file_id
                await bot.send_document(
                    int(admin_id), file_id, 
                    caption=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {user_link}: [–î–æ–∫—É–º–µ–Ω—Ç]"
                )
        except Exception as e:
            bot_logger.log_error(e, {"action": "send_message_to_admin", "admin_id": admin_id})
    
    await msg.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=exit_dialog_kb())
    bot_logger.log_user_action(user_id, "send_message_to_admin")

@dp.message(AdminDialog.chatting)
@handle_errors
async def admin_to_user(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É"""
    admin_id = str(msg.chat.id)
    data_state = await state.get_data()
    user_id = data_state.get("user_id")
    
    if not user_id:
        await msg.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ª–æ–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_user_kb(msg.chat.id))
        await state.clear()
        return
    
    if msg.text and msg.text.strip() and msg.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞":
        await state.clear()
        await msg.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.", reply_markup=get_user_kb(msg.chat.id))
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if msg.text:
            validated_text = validate_user_input(msg.text, max_length=2000)
        else:
            validated_text = None
    except ValidationError as e:
        await msg.answer(f"‚ùå {e.message}")
        return
    
    if not validated_text and not msg.photo and not msg.document:
        await msg.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    dialogs = data.setdefault("dialogs", {}).setdefault(user_id, [])
    
    if msg.text and validated_text:
        dialogs.append({"from": "admin", "text": validated_text})
    elif msg.photo:
        file_id = msg.photo[-1].file_id
        dialogs.append({"from": "admin", "text": "[–§–æ—Ç–æ]", "photo_id": file_id})
    elif msg.document:
        file_id = msg.document.file_id
        dialogs.append({"from": "admin", "text": "[–î–æ–∫—É–º–µ–Ω—Ç]", "file_id": file_id})
    
    data["dialogs"][user_id] = dialogs[-100:]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    save_data()
    
    try:
        if msg.text and validated_text:
            await safe_send_message(
                bot, int(user_id), 
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{validated_text}", 
                reply_markup=get_user_kb(user_id)
            )
            await msg.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.", reply_markup=exit_dialog_kb())
        elif msg.photo:
            file_id = msg.photo[-1].file_id
            await safe_send_photo(
                bot, int(user_id), file_id, 
                caption="üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", 
                reply_markup=get_user_kb(user_id)
            )
            await msg.answer("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.", reply_markup=exit_dialog_kb())
        elif msg.document:
            file_id = msg.document.file_id
            await bot.send_document(
                int(user_id), file_id, 
                caption="üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", 
                reply_markup=get_user_kb(user_id)
            )
            await msg.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.", reply_markup=exit_dialog_kb())
    except Exception as e:
        bot_logger.log_error(e, {"action": "send_message_to_user", "user_id": user_id})
        await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É.", reply_markup=exit_dialog_kb())
    
    bot_logger.log_admin_action(admin_id, "send_message_to_user", user_id)

@dp.message(F.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞")
@handle_errors
async def exit_dialog(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
    current_state = await state.get_state()
    if current_state == AdminDialog.chatting.state or current_state == ContactAdmin.waiting_message.state:
        await state.clear()
        await msg.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.", reply_markup=get_user_kb(msg.chat.id))
        return

    await msg.answer("‚ÑπÔ∏è –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ.", reply_markup=get_user_kb(msg.chat.id))

@dp.message(lambda m: str(m.chat.id) in data.get("admin_note_state", {}))
@handle_errors
async def admin_receive_note(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    admin_id = str(msg.chat.id)
    
    try:
        validate_admin_access(admin_id, ADMINS)
    except SecurityError:
        await msg.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        data["admin_note_state"].pop(admin_id, None)
        return
    
    state = data["admin_note_state"].pop(admin_id, None)
    if not state:
        await msg.answer("‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    user_id, order_id = state
    user_orders = data["orders"].get(user_id, [])
    order = next((o for o in user_orders if o["order_id"] == order_id), None)
    
    if not order:
        await msg.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫—É
    try:
        validated_text = validate_user_input(msg.text, max_length=1000)
    except ValidationError as e:
        await msg.answer(f"‚ùå {e.message}")
        return
    
    note = AdminNote(
        admin_id=admin_id,
        text=validated_text
    )
    
    order.setdefault("admin_notes", []).append(note.dict())
    order["admin_notes"] = order["admin_notes"][-100:]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫
    save_data()
    
    await msg.answer("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º).", reply_markup=get_user_kb(msg.chat.id))
    bot_logger.log_admin_action(admin_id, "add_note", f"order_{order_id}")

# ======================
# üîπ Telegram Payments
# ======================

@dp.pre_checkout_query()
@handle_errors
async def handle_pre_checkout(pre: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        await bot.answer_pre_checkout_query(pre.id, ok=True)
        bot_logger.logger.info("Pre-checkout approved", query_id=pre.id)
    except Exception as e:
        bot_logger.log_error(e, {"action": "pre_checkout", "query_id": pre.id})
        try:
            await bot.answer_pre_checkout_query(pre.id, ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
        except Exception:
            pass

@dp.message()
@handle_errors
async def handle_successful_payment(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    if not getattr(msg, 'successful_payment', None):
        return
    
    payload = msg.successful_payment.invoice_payload
    if not payload or not payload.startswith('order_'):
        return
    
    try:
        order_id = int(payload.split('_', 1)[1])
    except (ValueError, IndexError):
        bot_logger.log_error(Exception("Invalid payload format"), {"payload": payload})
        return

    user_id = str(msg.from_user.id)
    user_orders = data.get('orders', {}).get(user_id, [])
    order = next((o for o in user_orders if o.get('order_id') == order_id), None)
    
    if not order:
        # –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ –≤—Å–µ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É
        for uid, orders in data.get('orders', {}).items():
            for o in orders:
                if o.get('invoice_payload') == payload:
                    order = o
                    user_id = uid
                    break
            if order:
                break

    if not order:
        bot_logger.log_error(Exception("Order not found"), {"order_id": order_id, "payload": payload})
        return

    order['status'] = 'paid'
    order['paid_at'] = datetime.now().isoformat()
    save_data()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in ADMINS:
        try:
            await safe_send_message(
                bot, int(admin_id), 
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ–ø–ª–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>", 
                parse_mode='HTML'
            )
        except Exception as e:
            bot_logger.log_error(e, {"action": "notify_admin_payment", "admin_id": admin_id})

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await msg.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
    except Exception as e:
        bot_logger.log_error(e, {"action": "confirm_payment_to_user", "user_id": user_id})
    
    bot_logger.log_payment_received(order_id, user_id, order.get('total', 0))

# ======================
# üîπ –ó–∞–ø—É—Å–∫
# ======================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        bot_logger.logger.info("Bot starting up", version="2.0", features=["validation", "logging", "error_handling"])
        print("ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ aiogram 3.x —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫!")
        await dp.start_polling(bot)
    except Exception as e:
        bot_logger.log_error(e, {"action": "main_startup"})
        raise

if __name__ == "__main__":
    asyncio.run(main())

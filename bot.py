#!/usr/bin/env python3
# coding: utf-8

import os
import json
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    LabeledPrice,
    PreCheckoutQuery,
    WebAppInfo,
)
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime
from shop.catalog import PRODUCTS, get_product, format_price
from shop.cart import get_cart, cart_total

# ======================
# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# ======================

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMINS = [x.strip() for x in os.getenv("ADMINS", "").split(",") if x.strip()]

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

ADMINS = [str(x) for x in ADMINS]

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

DATA_FILE = "orders.json"
ADMIN_MSGS_FILE = "admin_msgs.json"

data = {
    "orders": {},
    "order_counter": 1,
    "user_states": {},
    "admin_note_state": {},
    "dialogs": {}  # user_id: [ {"from": "user"/"admin", "text": ...} ]
}

STATUSES = {"–ù–æ–≤—ã–π": "new", "–í —Ä–∞–±–æ—Ç–µ": "work", "–ó–∞–≤–µ—Ä—à—ë–Ω": "done"}
REVERSE_STATUSES = {v: k for k, v in STATUSES.items()}

# Catalog and cart helpers are provided by shop package (shop.catalog, shop.cart)


# ======================
# üîπ FSM: –∞–¥–º–∏–Ω—Å–∫–∏–π –¥–∏–∞–ª–æ–≥
# ======================
class AdminDialog(StatesGroup):
    chatting = State()

class ContactAdmin(StatesGroup):
    waiting_message = State()

# ======================
# üîπ –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
# ======================

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            loaded = json.load(f)
            data.update(loaded)

load_data()

def save_admin_msgs(admin_id, msg_id):
    msgs = {}
    if os.path.exists(ADMIN_MSGS_FILE):
        with open(ADMIN_MSGS_FILE, "r", encoding="utf-8") as f:
            msgs = json.load(f)
    msgs.setdefault(str(admin_id), []).append(msg_id)
    with open(ADMIN_MSGS_FILE, "w", encoding="utf-8") as f:
        json.dump(msgs, f, ensure_ascii=False, indent=2)

def get_admin_msgs(admin_id):
    if not os.path.exists(ADMIN_MSGS_FILE):
        return []
    with open(ADMIN_MSGS_FILE, "r", encoding="utf-8") as f:
        msgs = json.load(f)
    return msgs.get(str(admin_id), [])

def clear_admin_msgs(admin_id):
    if not os.path.exists(ADMIN_MSGS_FILE):
        return
    with open(ADMIN_MSGS_FILE, "r", encoding="utf-8") as f:
        msgs = json.load(f)
    msgs[str(admin_id)] = []
    with open(ADMIN_MSGS_FILE, "w", encoding="utf-8") as f:
        json.dump(msgs, f, ensure_ascii=False, indent=2)

# ======================
# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ======================

def main_kb():
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –µ—Å–ª–∏ –µ—Å—Ç—å WEBAPP_URL ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º WebApp –∫–Ω–æ–ø–∫—É
    web_url = os.getenv('WEBAPP_URL') or os.getenv('REPL_URL') or os.getenv('REPL_SLUG')
    kb = []
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∫—Ä—É–ø–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ (WebApp –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if web_url and isinstance(web_url, str) and web_url.startswith('http'):
        kb.append([KeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=web_url))])
    else:
        kb.append([KeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω")])

    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî FAQ –∏ —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏)
    kb.append([KeyboardButton(text="‚ùì FAQ"), KeyboardButton(text="üí¨ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º")])

    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def admin_main_kb():
    web_url = os.getenv('WEBAPP_URL') or os.getenv('REPL_URL') or os.getenv('REPL_SLUG')
    kb = []
    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
    kb.append([KeyboardButton(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    kb.append([KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")])
    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω webapp ‚Äî –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if web_url and isinstance(web_url, str) and web_url.startswith('http'):
        # Open admin view (add admin=1 param)
        admin_url = web_url
        if '?' in admin_url:
            admin_url = admin_url + '&admin=1'
        else:
            admin_url = admin_url + '?admin=1'
        kb.append([KeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω (–∞–¥–º–∏–Ω)", web_app=WebAppInfo(url=admin_url))])
    else:
        kb.append([KeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω (–∞–¥–º–∏–Ω)")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_user_kb(user_id):
    return admin_main_kb() if str(user_id) in ADMINS else main_kb()

def exit_dialog_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –í—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞")]],
        resize_keyboard=True
    )

def rating_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=str(i)) for i in range(1, 6)]],
        resize_keyboard=True
    )

def cancel_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

async def get_user_name(user_id):
    try:
        chat = await bot.get_chat(int(user_id))
        return getattr(chat, "full_name", None) or getattr(chat, "username", None) or str(user_id)
    except Exception:
        return str(user_id)

async def admin_clients_kb():
    buttons = []
    for user_id in data.get("orders", {}):
        user_name = await get_user_name(user_id)
        buttons.append([
            InlineKeyboardButton(
                text=user_name,
                callback_data=f"adminclient_{user_id}"
            ),
            InlineKeyboardButton(
                text=f"üí¨ –°–≤—è–∑—å —Å {user_name}",
                callback_data=f"adminchat_{user_id}"
            )
        ])
    if not buttons:
        buttons.append([InlineKeyboardButton(text="–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="none")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def admin_client_orders_kb(user_id):
    buttons = []
    orders = data.get("orders", {}).get(user_id, [])
    for order in orders:
        btn_text = f"–ó–∞–∫–∞–∑ ‚Ññ{order['order_id']} | {order['text'][:20]}"
        buttons.append([
            InlineKeyboardButton(
                text=btn_text,
                callback_data=f"adminorder_{user_id}_{order['order_id']}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminback")])
    if len(orders) == 0:
        buttons.insert(0, [InlineKeyboardButton(text="–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤", callback_data="none")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def admin_order_full_kb(order, user_id, order_id):
    kb = [
        [InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"note_{user_id}_{order_id}")]
    ] + [
        [InlineKeyboardButton(text=f"üìå {name}", callback_data=f"status_{user_id}_{order_id}_{code}")]
        for name, code in STATUSES.items()
    ]
    # add delete button
    kb.append([InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"delete_{user_id}_{order_id}")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# ======================
# üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
# ======================

@dp.message(Command("start"))
async def start(msg: Message):
    data["user_states"].pop(str(msg.chat.id), None)
    if str(msg.chat.id) in ADMINS:
        await msg.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!", reply_markup=admin_main_kb())
    else:
        await msg.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}!", reply_markup=main_kb())

@dp.message(F.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_btn(msg: Message):
    if str(msg.chat.id) not in ADMINS:
        await msg.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    kb = await admin_clients_kb()
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–≤—è–∑–∏:",
        reply_markup=kb
    )

@dp.callback_query(lambda c: c.data.startswith("adminclient_"))
async def admin_client_orders(c: CallbackQuery):
    user_id = c.data.split("_")[1]
    kb = admin_client_orders_kb(user_id)
    user_name = await get_user_name(user_id)
    user_link = f"<a href='tg://user?id={user_id}'>{user_name}</a>"
    await c.message.edit_text(
        f"–ö–ª–∏–µ–Ω—Ç: {user_link}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    save_admin_msgs(c.from_user.id, c.message.message_id)
    await c.answer()

@dp.callback_query(lambda c: c.data.startswith("adminchat_"))
async def admin_chat_with_client(c: CallbackQuery, state: FSMContext):
    user_id = c.data.split("_")[1]
    await state.set_state(AdminDialog.chatting)
    await state.update_data(user_id=user_id, order_id=None)
    history = data.get("dialogs", {}).get(user_id, [])
    history_text = "\n".join([
        f"{'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if m['from']=='user' else 'üõ† –ê–¥–º–∏–Ω'}: {m.get('text','')}"
        for m in history[-20:]
    ]) if history else "–ß–∞—Ç –ø—É—Å—Ç. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É."
    user_name = await get_user_name(user_id)
    await bot.send_message(
        c.from_user.id,
        f"üí¨ –î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º <b>{user_name}</b>:\n\n{history_text}",
        reply_markup=exit_dialog_kb(),
        parse_mode="HTML"
    )
    await c.answer()

@dp.callback_query(lambda c: c.data == "adminback")
async def admin_back_to_clients(c: CallbackQuery):
    kb = await admin_clients_kb()
    await c.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–≤—è–∑–∏:",
        reply_markup=kb
    )
    save_admin_msgs(c.from_user.id, c.message.message_id)
    await c.answer()

@dp.callback_query(lambda c: c.data.startswith("adminorder_"))
async def admin_order_info(c: CallbackQuery):
    _, user_id, order_id = c.data.split("_")
    order_id = int(order_id)
    user_orders = data["orders"].get(user_id, [])
    order = next((o for o in user_orders if o["order_id"] == order_id), None)
    if not order:
        await c.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user_name = await get_user_name(user_id)
    user_link = f"<a href='tg://user?id={user_id}'>{user_name}</a>"

    status_name = REVERSE_STATUSES.get(order["status"], order["status"])
    text = (f"üõí –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n"
            f"–°—Ç–∞—Ç—É—Å: <b>{status_name}</b>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
            f"–¢–µ–∫—Å—Ç: {order['text']}\n\n")
    notes = order.get("admin_notes", [])
    if notes:
        text += "üîí –ó–∞–º–µ—Ç–∫–∏ –∞–¥–º–∏–Ω–∞ (–ø—Ä–∏–≤–∞—Ç–Ω–æ):\n"
        for n in notes:
            t = n.get("time", "")
            aid = n.get("admin_id", "")
            atxt = n.get("text", "")
            text += f"- [{t}] admin {aid}: {atxt}\n"
    else:
        text += "üîí –ó–∞–º–µ—Ç–æ–∫ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç.\n"

    kb = admin_order_full_kb(order, user_id, order_id)
    try:
        if "photo_id" in order:
            msg = await bot.send_photo(c.from_user.id, order["photo_id"], caption=text, reply_markup=kb)
        else:
            msg = await bot.send_message(c.from_user.id, text, reply_markup=kb)
        save_admin_msgs(
            c.from_user.id,
            msg.message_id if hasattr(msg, "message_id") else c.message.message_id)
    except Exception:
        pass
    await c.answer()

@dp.callback_query(lambda c: c.data.startswith("open_"))
async def admin_open_order_dialog(c: CallbackQuery, state: FSMContext):
    await c.answer("–î–∏–∞–ª–æ–≥ –ø–æ –∑–∞–∫–∞–∑—É –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("note_"))
async def admin_add_note_cb(c: CallbackQuery):
    if str(c.from_user.id) not in ADMINS:
        await c.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!", show_alert=True)
        return
    _, user_id, order_id = c.data.split("_")
    data["admin_note_state"][str(c.from_user.id)] = (user_id, int(order_id))
    await bot.send_message(c.from_user.id, "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É. –û–Ω–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    await c.answer()


@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def admin_delete_order(c: CallbackQuery):
    if str(c.from_user.id) not in ADMINS:
        await c.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!", show_alert=True)
        return
    _, user_id, order_id = c.data.split("_")
    order_id = int(order_id)
    user_orders = data.get('orders', {}).get(user_id, [])
    idx = next((i for i,o in enumerate(user_orders) if o.get('order_id')==order_id), None)
    if idx is None:
        await c.answer('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        return
    # remove order
    removed = user_orders.pop(idx)
    # save back
    data['orders'][user_id] = user_orders
    save_data()
    # notify involved parties
    try:
        await bot.send_message(int(user_id), f"üóë –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
    except Exception:
        pass
    for admin_id in ADMINS:
        try:
            await bot.send_message(int(admin_id), f"üóë –ó–∞–∫–∞–∑ #{order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {c.from_user.id}")
        except Exception:
            pass
    await c.answer('–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω', show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("status_"))
async def change_order_status(c: CallbackQuery):
    _, user_id, order_id, status_code = c.data.split("_")
    order_id = int(order_id)
    if status_code not in REVERSE_STATUSES:
        await c.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.", show_alert=True)
        return
    user_orders = data["orders"].get(user_id, [])
    order = next((o for o in user_orders if o["order_id"] == order_id), None)
    if not order:
        await c.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    order["status"] = status_code
    save_data()
    await c.answer(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{REVERSE_STATUSES[status_code]}'", show_alert=True)
    try:
        await admin_order_info(c)
    except Exception:
        pass

@dp.message(F.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
async def admin_clear_chat(msg: Message, state: FSMContext):
    if str(msg.chat.id) not in ADMINS:
        await msg.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    msgs = get_admin_msgs(msg.chat.id)
    for mid in msgs:
        try:
            await bot.delete_message(msg.chat.id, mid)
        except Exception:
            pass
    clear_admin_msgs(msg.chat.id)
    await state.clear()
    await msg.answer("‚úÖ –ß–∞—Ç –∏ –≤—Å–µ –æ–∫–Ω–∞ –æ—á–∏—â–µ–Ω—ã.", reply_markup=admin_main_kb())

@dp.message(F.text == "‚ùì FAQ")
async def faq(msg: Message):
    await msg.answer(
        "‚ùì <b>FAQ</b>\n\n"
        "üì¶ –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚Äî –Ω–∞–∂–º–∏—Ç–µ 'üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' –∏ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ.\n"
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –º—ã —Å–≤—è–∂–µ–º—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.\n"
        "üîÅ –í–æ–∑–≤—Ä–∞—Ç ‚Äî –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π.\n"
        "üí¨ –í–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç!",
        reply_markup=get_user_kb(msg.chat.id)
    )


# ======================
# üîπ –ú–∞–≥–∞–∑–∏–Ω: –∫–∞—Ç–∞–ª–æ–≥, –∫–æ—Ä–∑–∏–Ω–∞, checkout (MVP)
# ======================

@dp.message(Command("catalog"))
@dp.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(msg: Message):
    # –í—ã–≤–æ–¥ –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å inline-–∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å"
    webapp_url = os.getenv('WEBAPP_URL') or os.getenv('REPL_URL') or os.getenv('REPL_SLUG')
    if webapp_url and webapp_url.startswith('http'):
        kb_main = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=webapp_url))]])
        try:
            await msg.answer("–û—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω –≤–Ω—É—Ç—Ä–∏ Telegram:", reply_markup=kb_main)
        except Exception:
            pass
    for p in PRODUCTS:
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text=f"–î–æ–±–∞–≤–∏—Ç—å ‚Äî {format_price(p['price'])}", callback_data=f"addcart_{p['id']}")
        ]])
        text = f"<b>{p['title']}</b>\n–¶–µ–Ω–∞: {format_price(p['price'])}\n–†–∞–∑–º–µ—Ä—ã: {', '.join(map(str,p['sizes']))}"
        try:
            if p.get('photo'):
                await msg.answer_photo(p['photo'], caption=text, reply_markup=kb)
            else:
                await msg.answer(text, reply_markup=kb)
        except Exception:
            await msg.answer(text, reply_markup=kb)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ web_app_data: –∫–æ–≥–¥–∞ Web App –≤—ã–∑—ã–≤–∞–µ—Ç Telegram.WebApp.sendData()
@dp.message()
async def handle_web_app_message(msg: Message):
    wad = getattr(msg, 'web_app_data', None)
    if not wad:
        return
    try:
        payload = json.loads(wad.data)
    except Exception:
        await msg.answer('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App.')
        return

    # –û–∂–∏–¥–∞–µ–º payload –≤–∏–¥–∞ { action: 'checkout', items: [{id, qty}], total }
    action = payload.get('action')
    if action == 'add_product':
        # –∞–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ WebApp
        if str(msg.from_user.id) not in ADMINS:
            await msg.answer('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã.')
            return
        prod = payload.get('product') or {}
        # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        title = prod.get('title')
        price = int(prod.get('price') or 0)
        sizes = prod.get('sizes') or []
        from shop.catalog import add_product
        if not title or price <= 0:
            await msg.answer('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É.')
            return
        newp = {'title': title, 'price': price, 'currency': prod.get('currency','RUB'), 'photo': prod.get('photo',''), 'sizes': sizes}
        created = add_product(newp)
        await msg.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{created.get('title')}' –¥–æ–±–∞–≤–ª–µ–Ω —Å id {created.get('id')}")
        # Notify other admins
        for admin_id in ADMINS:
            try:
                await bot.send_message(int(admin_id), f"üÜï –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä: <b>{created.get('title')}</b> (id: {created.get('id')})", parse_mode='HTML')
            except Exception:
                pass
        return

    if action != 'checkout':
        await msg.answer('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ Web App.')
        return

    user_id = str(msg.from_user.id)
    items = payload.get('items', [])
    total = payload.get('total', 0)

    # --- Server-side validation: –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É –ø–æ PRODUCTS, —á—Ç–æ–±—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–¥–µ–ª–∫–∏ —Å—É–º–º—ã ---
    expected_total = 0
    bad_items = []
    for it in items:
        pid = it.get('id') or it.get('product_id')
        qty = int(it.get('qty', 0) or 0)
        if not pid or qty <= 0:
            bad_items.append(it)
            continue
        prod = get_product(pid)
        if not prod:
            bad_items.append(it)
            continue
        expected_total += prod['price'] * qty

    if bad_items:
        await msg.answer('‚ö†Ô∏è –í –∑–∞–∫–∞–∑–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return

    if int(expected_total) != int(total):
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await msg.answer('‚ö†Ô∏è –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return

    order_id = data['order_counter']
    data['order_counter'] += 1
    order = {
        'order_id': order_id,
        'text': f"–ó–∞–∫–∞–∑ –∏–∑ WebApp, {len(items)} –ø–æ–∑–∏—Ü–∏–π, —Å—É–º–º–∞ {expected_total} ‚ÇΩ",
        'status': 'new',
        'items': items,
        'total': expected_total,
        'created_at': datetime.now().isoformat(),
        'from_webapp': True,
    }
    data.setdefault('orders', {}).setdefault(user_id, []).append(order)
    save_data()

    for admin_id in ADMINS:
        try:
            await bot.send_message(int(admin_id), f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} (WebApp) –æ—Ç <a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>\n–°—É–º–º–∞: {format_price(total)}", parse_mode='HTML')
        except Exception:
            pass

    await msg.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")


@dp.callback_query(lambda c: c.data and c.data.startswith('addcart_'))
async def add_to_cart_cb(c: CallbackQuery):
    pid = c.data.split('_', 1)[1]
    user_id = str(c.from_user.id)
    cart = get_cart(data, user_id)
    cart[pid] = cart.get(pid, 0) + 1
    save_data()
    await c.answer(text=f"–î–æ–±–∞–≤–ª–µ–Ω–æ {get_product(pid)['title']} –≤ –∫–æ—Ä–∑–∏–Ω—É.")


@dp.message(F.text == "üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞")
@dp.message(Command("cart"))
async def show_cart(msg: Message):
    user_id = str(msg.chat.id)
    cart = get_cart(data, user_id)
    if not cart:
        await msg.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=get_user_kb(msg.chat.id))
        return
    text = "üßæ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    for pid, qty in cart.items():
        p = get_product(pid)
        if p:
            text += f"{p['title']} x{qty} ‚Äî {format_price(p['price']*qty)}\n"
    total = cart_total(data, cart)
    text += f"\n<b>–ò—Ç–æ–≥–æ: {format_price(total)}</b>"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clearcart")]
    ])
    await msg.answer(text, reply_markup=kb, parse_mode="HTML")


@dp.callback_query(lambda c: c.data == 'clearcart')
async def clear_cart_cb(c: CallbackQuery):
    user_id = str(c.from_user.id)
    data.setdefault('carts', {})[user_id] = {}
    save_data()
    await c.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞')
    await c.message.edit_text('üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')


@dp.callback_query(lambda c: c.data == 'checkout')
async def checkout_cb(c: CallbackQuery):
    user_id = str(c.from_user.id)
    cart = get_cart(data, user_id)
    if not cart:
        await c.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', show_alert=True)
        return
    total = cart_total(data, cart)
    # MVP: —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –∏ –∏–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ–ø–ª–∞—Ç—É (–∑–∞–≥–ª—É—à–∫–∞)
    order_id = data['order_counter']
    data['order_counter'] += 1
    items = []
    for pid, qty in cart.items():
        p = get_product(pid)
        if not p:
            continue
        items.append({'product_id': pid, 'title': p['title'], 'qty': qty, 'price': p['price']})

    order = {
        'order_id': order_id,
        'text': f"–ó–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, {len(items)} –ø–æ–∑–∏—Ü–∏–π, —Å—É–º–º–∞ {total} ‚ÇΩ",
        'status': 'new',
        'items': items,
        'total': total,
        'created_at': datetime.now().isoformat()
    }
    data.setdefault('orders', {}).setdefault(user_id, []).append(order)
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    data.setdefault('carts', {})[user_id] = {}
    save_data()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    for admin_id in ADMINS:
        try:
            await bot.send_message(int(admin_id), f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç <a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>\n–°—É–º–º–∞: {format_price(total)}", parse_mode='HTML')
        except Exception:
            pass

    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Invoice —á–µ—Ä–µ–∑ Telegram Payments, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω PROVIDER_TOKEN
    provider = os.getenv('PROVIDER_TOKEN')
    invoice_payload = f"order_{order_id}"
    order['invoice_payload'] = invoice_payload
    save_data()

    if provider:
        try:
            prices = [LabeledPrice(label=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}", amount=int(total * 100))]
            await bot.send_invoice(
                chat_id=c.from_user.id,
                title=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}",
                description=f"–ó–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, {len(items)} –ø–æ–∑–∏—Ü–∏–π",
                payload=invoice_payload,
                provider_token=provider,
                currency="RUB",
                prices=prices,
                start_parameter=invoice_payload,
            )
            await c.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω. –°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç.")
            await c.answer()
            return
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî fallback –Ω–∞ —Å—Å—ã–ª–∫—É
            pass

    # fallback: –∏–º–∏—Ç–∏—Ä—É–µ–º –æ–ø–ª–∞—Ç—É: –¥–∞—ë–º —Å—Å—ã–ª–∫—É-–∑–∞–≥–ª—É—à–∫—É
    pay_link = f"https://example.com/pay?order_id={order_id}&user_id={user_id}"
    await c.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω. –°—É–º–º–∞: {format_price(total)}\n–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {pay_link}")
    await c.answer()


# Removed legacy 'make order' flow handlers: users create orders via WebApp or cart checkout.

async def send_order_to_admin(admin_id: int, user_id: str, order_info: dict):
    kb = admin_order_full_kb(order_info, user_id, order_info['order_id'])
    status_name = REVERSE_STATUSES.get(order_info['status'], "–ù–æ–≤—ã–π")
    user_name = await get_user_name(user_id)
    user_link = f"<a href='tg://user?id={user_id}'>{user_name}</a>"
    text = f"üõí –ó–∞–∫–∞–∑ ‚Ññ{order_info['order_id']} –æ—Ç {user_link}:\n{order_info['text']}\n–°—Ç–∞—Ç—É—Å: {status_name}"
    try:
        if "photo_id" in order_info:
            msg = await bot.send_photo(
                admin_id,
                order_info["photo_id"],
                caption=text,
                reply_markup=kb)
        else:
            msg = await bot.send_message(admin_id, text, reply_markup=kb)
        save_admin_msgs(admin_id, msg.message_id)
    except Exception:
        pass

@dp.message(F.text == "üí¨ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º")
async def client_start_chat(msg: Message, state: FSMContext):
    await state.set_state(ContactAdmin.waiting_message)
    await msg.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ 'üîô –í—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞'.", reply_markup=exit_dialog_kb())

@dp.message(ContactAdmin.waiting_message)
async def client_chat_message(msg: Message, state: FSMContext):
    user_id = str(msg.chat.id)
    if msg.text and msg.text.strip() and msg.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞":
        await state.clear()
        await msg.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å –∞–¥–º–∏–Ω–æ–º.", reply_markup=get_user_kb(msg.chat.id))
        return
    dialogs = data.setdefault("dialogs", {}).setdefault(user_id, [])
    if msg.text:
        dialogs.append({"from": "user", "text": msg.text})
    elif msg.photo:
        file_id = msg.photo[-1].file_id
        dialogs.append({"from": "user", "text": "[–§–æ—Ç–æ]", "photo_id": file_id})
    elif msg.document:
        file_id = msg.document.file_id
        dialogs.append({"from": "user", "text": "[–î–æ–∫—É–º–µ–Ω—Ç]", "file_id": file_id})
    else:
        await msg.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    data["dialogs"][user_id] = dialogs[-100:]
    save_data()
    user_name = await get_user_name(user_id)
    user_link = f"<a href='tg://user?id={user_id}'>{user_name}</a>"
    for admin_id in ADMINS:
        try:
            if msg.text:
                await bot.send_message(int(admin_id), f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {user_link}:\n{msg.text}")
            elif msg.photo:
                file_id = msg.photo[-1].file_id
                await bot.send_photo(int(admin_id), file_id, caption=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {user_link}: [–§–æ—Ç–æ]")
            elif msg.document:
                file_id = msg.document.file_id
                await bot.send_document(int(admin_id), file_id, caption=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {user_link}: [–î–æ–∫—É–º–µ–Ω—Ç]")
        except Exception:
            pass
    await msg.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=exit_dialog_kb())

# Handler for 'My orders' removed per request; users can view orders via commands or admin panels.

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(msg: Message):
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_user_kb(msg.chat.id))

@dp.message(Command("profile"))
async def user_profile(msg: Message):
    if str(msg.chat.id) in ADMINS:
        await msg.answer("–ü—Ä–æ—Ñ–∏–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=admin_main_kb())
        return
    user_id = str(msg.chat.id)
    orders = data["orders"].get(user_id, [])
    total = len(orders)
    done = sum(o["status"] == "done" for o in orders)
    await msg.answer(f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\nID: <code>{user_id}</code>\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{total}</b>\n–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö: <b>{done}</b>")


@dp.message(Command("dump_products"))
async def dump_products_cmd(msg: Message):
    if str(msg.chat.id) not in ADMINS:
        await msg.answer('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤')
        return
    path = os.path.join(os.path.dirname(__file__), 'shop', 'products.json')
    if not os.path.exists(path):
        await msg.answer('–§–∞–π–ª –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    try:
        await bot.send_document(msg.chat.id, path)
    except Exception:
        await msg.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª')


# ======================
# üîπ –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–∏–∞–ª–æ–≥–∏ –∏ –∑–∞–º–µ—Ç–∫–∏
# ======================

@dp.message(AdminDialog.chatting)
async def admin_to_user(msg: Message, state: FSMContext):
    admin_id = str(msg.chat.id)
    data_state = await state.get_data()
    user_id = data_state.get("user_id")
    order_id = data_state.get("order_id")
    if not user_id:
        await msg.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ª–æ–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_user_kb(msg.chat.id))
        await state.clear()
        return
    if msg.text and msg.text.strip() and msg.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞":
        await state.clear()
        await msg.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.", reply_markup=get_user_kb(msg.chat.id))
        return
    if not (msg.text and msg.text.strip()) and not msg.photo and not msg.document:
        await msg.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    dialogs = data.setdefault("dialogs", {}).setdefault(user_id, [])
    if msg.text:
        dialogs.append({"from": "admin", "text": msg.text})
    elif msg.photo:
        file_id = msg.photo[-1].file_id
        dialogs.append({"from": "admin", "text": "[–§–æ—Ç–æ]", "photo_id": file_id})
    elif msg.document:
        file_id = msg.document.file_id
        dialogs.append({"from": "admin", "text": "[–î–æ–∫—É–º–µ–Ω—Ç]", "file_id": file_id})
    data["dialogs"][user_id] = dialogs[-100:]
    save_data()
    try:
        if msg.text:
            await bot.send_message(int(user_id), f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{msg.text}", reply_markup=get_user_kb(user_id))
            await msg.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.", reply_markup=exit_dialog_kb())
        elif msg.photo:
            file_id = msg.photo[-1].file_id
            await bot.send_photo(int(user_id), file_id, caption="üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_user_kb(user_id))
            await msg.answer("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.", reply_markup=exit_dialog_kb())
        elif msg.document:
            file_id = msg.document.file_id
            await bot.send_document(int(user_id), file_id, caption="üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_user_kb(user_id))
            await msg.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.", reply_markup=exit_dialog_kb())
    except Exception:
        await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É.", reply_markup=exit_dialog_kb())
    return

# NOTE: –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∑–∞–∫–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É.

@dp.message(F.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞")
async def exit_dialog(msg: Message, state: FSMContext):
    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ FSM-–¥–∏–∞–ª–æ–≥–∞ (–∞–¥–º–∏–Ω—Å–∫–∏–π –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —Å –∞–¥–º–∏–Ω–æ–º)
    current_state = await state.get_state()
    if current_state == AdminDialog.chatting.state or current_state == ContactAdmin.waiting_message.state:
        await state.clear()
        await msg.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.", reply_markup=get_user_kb(msg.chat.id))
        return

    await msg.answer("‚ÑπÔ∏è –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ.", reply_markup=get_user_kb(msg.chat.id))

@dp.message(lambda m: data["user_states"].get(str(m.chat.id)) == "waiting_rating")
async def receive_rating(msg: Message):
    user_id = str(msg.chat.id)
    rating = (msg.text or "").strip()
    if rating not in ["1", "2", "3", "4", "5"]:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 5.", reply_markup=rating_kb())
        return
    data["user_states"].pop(user_id, None)
    for admin_id in ADMINS:
        try:
            await bot.send_message(int(admin_id), f"‚≠ê –û—Ü–µ–Ω–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {rating}/5")
        except Exception:
            pass
    await msg.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!", reply_markup=get_user_kb(user_id))

@dp.message(lambda m: str(m.chat.id) in data.get("admin_note_state", {}))
async def admin_receive_note(msg: Message):
    admin_id = str(msg.chat.id)
    if admin_id not in ADMINS:
        await msg.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        data["admin_note_state"].pop(admin_id, None)
        return
    state = data["admin_note_state"].pop(admin_id, None)
    if not state:
        await msg.answer("‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    user_id, order_id = state
    user_orders = data["orders"].get(user_id, [])
    order = next((o for o in user_orders if o["order_id"] == order_id), None)
    if not order:
        await msg.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    note = {
        "admin_id": admin_id,
        "text": msg.text,
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    order.setdefault("admin_notes", []).append(note)
    order["admin_notes"] = order["admin_notes"][-100:]
    save_data()
    await msg.answer("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º).", reply_markup=get_user_kb(msg.chat.id))

# ======================
# üîπ –ó–∞–ø—É—Å–∫
# ======================

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ aiogram 3.x (—Å FSM –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤)!")
    await dp.start_polling(bot)


# ======================
# üîπ Telegram Payments: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ pre_checkout –∏ successful_payment
# ======================


@dp.pre_checkout_query()
async def handle_pre_checkout(pre: PreCheckoutQuery):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º pre-checkout (–ø–æ–∫–∞ –≤—Å–µ–≥–¥–∞ –æ–¥–æ–±—Ä—è–µ–º)
    try:
        await bot.answer_pre_checkout_query(pre.id, ok=True)
    except Exception:
        pass


@dp.message()
async def handle_successful_payment(msg: Message):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç successful_payment ‚Äî –æ—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
    if not getattr(msg, 'successful_payment', None):
        return
    payload = msg.successful_payment.invoice_payload
    # payload –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ order['invoice_payload'] –∫–∞–∫ 'order_<id>'
    if not payload or not payload.startswith('order_'):
        return
    try:
        order_id = int(payload.split('_', 1)[1])
    except Exception:
        return

    user_id = str(msg.from_user.id)
    user_orders = data.get('orders', {}).get(user_id, [])
    order = next((o for o in user_orders if o.get('order_id') == order_id), None)
    if not order:
        # –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–∞–∑ –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ ‚Äî –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –ø–æ –≤—Å–µ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É
        for uid, orders in data.get('orders', {}).items():
            for o in orders:
                if o.get('invoice_payload') == payload:
                    order = o
                    user_id = uid
                    break
            if order:
                break

    if not order:
        return

    order['status'] = 'paid'
    order['paid_at'] = datetime.now().isoformat()
    save_data()

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞(–æ–≤)
    for admin_id in ADMINS:
        try:
            await bot.send_message(int(admin_id), f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ–ø–ª–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>", parse_mode='HTML')
        except Exception:
            pass

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await msg.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
    except Exception:
        pass

if __name__ == "__main__":
    asyncio.run(main())
#!/usr/bin/env python3
# coding: utf-8

import os
import json
import asyncio
from typing import Dict, List, Optional, Any
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    LabeledPrice,
    PreCheckoutQuery,
    WebAppInfo,
)

from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from models import Product, CartItem, OrderCreate, Order, Review
from logger_config import setup_logging, bot_logger
from error_handlers import handle_errors, safe_send_message, validate_user_input, ValidationError
from database import db

# ======================
# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# ======================

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://your-replit-url.replit.dev")

# –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
ADMINS = ["1593426947"]

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging(log_level=os.getenv("LOG_LEVEL", "INFO"))
bot_logger.logger.info("Bot starting up", admins_count=len(ADMINS))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ======================
# üîπ –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
# ======================

class AdminStates(StatesGroup):
    waiting_for_note = State()

class ReviewStates(StatesGroup):
    waiting_for_review = State()

# ======================
# üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ======================

def is_admin(user_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return str(user_id) == "1593426947"

def format_price(price: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
    return f"{price:.2f} ‚ÇΩ"

def get_user_name(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
    except:
        return str(user_id)

# ======================
# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ======================

def main_kb() -> ReplyKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=WEBAPP_URL))],
            [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"), KeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤—ã")],
            [KeyboardButton(text="‚ùì FAQ")]
        ],
        resize_keyboard=True
    )

def admin_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=WEBAPP_URL))],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üë• –ö–ª–∏–µ–Ω—Ç—ã")],
            [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"), KeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤—ã")],
            [KeyboardButton(text="‚ùì FAQ")]
        ],
        resize_keyboard=True
    )

def reviews_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤")],
            [KeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_user_kb(user_id: str) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if is_admin(user_id):
        return admin_kb()
    return main_kb()

# ======================
# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ======================

@dp.message(Command("start"))
@handle_errors
async def start(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(msg.chat.id)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.register_user(user_id, msg.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏")
    
    bot_logger.logger.info("User started bot", user_id=user_id, username=msg.from_user.username)
    
    if is_admin(user_id):
        await msg.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º! üõçÔ∏è\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=admin_kb()
        )
    else:
        await msg.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}!\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! üõçÔ∏è\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥:",
            reply_markup=main_kb()
        )

@dp.message(Command("myid"))
@handle_errors
async def cmd_myid(msg: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(msg.chat.id)
    username = msg.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    
    await msg.answer(
        f"üÜî **–í–∞—à Telegram ID:** `{user_id}`\n\n"
        f"üë§ **–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** @{username}\n\n"
        f"üìù **–ò–º—è:** {msg.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üìù **–§–∞–º–∏–ª–∏—è:** {msg.from_user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        f"üí° –ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
        parse_mode="Markdown"
    )

# ======================
# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
# ======================

@dp.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
@handle_errors
async def contact_us(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏'"""
    user_id = str(msg.chat.id)
    
    await msg.answer(
        "üìû **–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:\n\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebApp –¥–ª—è –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤! ‚è∞",
        reply_markup=get_user_kb(user_id)
    )

@dp.message(F.text == "‚ùì FAQ")
@handle_errors
async def faq(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ FAQ"""
    user_id = str(msg.chat.id)
    
    await msg.answer(
        "‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n"
        "**Q: –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?**\n"
        "A: –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üõí –ö–∞—Ç–∞–ª–æ–≥' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ WebApp\n\n"
        "**Q: –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑?**\n"
        "A: –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ Telegram Payments\n\n"
        "**Q: –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∞?**\n"
        "A: –û–±—ã—á–Ω–æ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è\n\n"
        "**Q: –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?**\n"
        "A: –î–∞, –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
        reply_markup=get_user_kb(user_id)
    )

@dp.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
@handle_errors
async def contact_admin(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'"""
    user_id = str(msg.chat.id)
    
    await msg.answer(
        "üìû **–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n"
        "‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 24 —á–∞—Å–æ–≤",
        reply_markup=get_user_kb(user_id)
    )

@dp.message(F.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
@handle_errors
async def reviews_menu(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–∑—ã–≤—ã'"""
    user_id = str(msg.chat.id)
    
    await msg.answer(
        "‚≠ê **–û—Ç–∑—ã–≤—ã**\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ ‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ\n"
        "‚Ä¢ üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reviews_kb()
    )

@dp.message(F.text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤")
@handle_errors
async def write_review(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤'"""
    user_id = str(msg.chat.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reviews = await db.get_all_reviews()
    user_review = next((r for r in reviews if r['user_id'] == user_id), None)
    
    if user_review:
        await msg.answer(
            "‚ö†Ô∏è **–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤!**\n\n"
            f"–í–∞—à –æ—Ç–∑—ã–≤:\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {user_review['rating']}/5\n"
            f"üìù –¢–µ–∫—Å—Ç: {user_review['text']}\n"
            f"üìÖ –î–∞—Ç–∞: {user_review['created_at']}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–û–¥–æ–±—Ä–µ–Ω' if user_review['is_approved'] else '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'}",
            reply_markup=reviews_kb()
        )
        return
    
    await msg.answer(
        "‚úçÔ∏è **–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤**\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "**–†–µ–π—Ç–∏–Ω–≥ (1-5):** [–æ—Ü–µ–Ω–∫–∞]\n"
        "**–û—Ç–∑—ã–≤:** [—Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞]\n\n"
        "**–ü—Ä–∏–º–µ—Ä:**\n"
        "–†–µ–π—Ç–∏–Ω–≥: 5\n"
        "–û—Ç–∑—ã–≤: –û—Ç–ª–∏—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω! –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã. –†–µ–∫–æ–º–µ–Ω–¥—É—é!",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )
    
    await state.set_state(ReviewStates.waiting_for_review)

@dp.message(F.text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")
@handle_errors
async def view_reviews(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã'"""
    user_id = str(msg.chat.id)
    
    reviews = await db.get_approved_reviews(limit=10)
    
    if not reviews:
        await msg.answer(
            "üëÄ **–û—Ç–∑—ã–≤—ã**\n\n"
            "üòî –ü–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.\n"
            "–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤!",
            reply_markup=reviews_kb()
        )
        return
    
    response = "üëÄ **–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π**\n\n"
    
    for i, review in enumerate(reviews, 1):
        stars = "‚≠ê" * review['rating']
        username = review['username']
        text = review['text']
        date = review['created_at'][:10]  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
        
        response += f"**{i}. {username}** {stars}\n"
        response += f"üìù {text}\n"
        response += f"üìÖ {date}\n\n"
    
    if len(response) > 4000:
        response = response[:4000] + "\n\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã)"
    
    await msg.answer(response, reply_markup=reviews_kb())

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
@handle_errors
async def back_to_main(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    user_id = str(msg.chat.id)
    await state.clear()
    
    await msg.answer(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_user_kb(user_id)
    )

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@handle_errors
async def admin_stats(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = str(msg.chat.id)
    
    if not is_admin(user_id):
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        products_count = len(db.get_products())
        orders = db.get_all_orders()
        orders_count = len(orders)
        total_revenue = sum(order['total_amount'] for order in orders)
        
        await msg.answer(
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞**\n\n"
            f"üõçÔ∏è **–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ:** {products_count}\n"
            f"üì¶ **–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:** {orders_count}\n"
            f"üí∞ **–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:** {format_price(total_revenue)}\n\n"
            f"üìà **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len([o for o in orders if o.get('created_at', '') > '2024-01-01'])}\n"
            f"‚Ä¢ –í—ã—Ä—É—á–∫–∞: {format_price(sum(o['total_amount'] for o in orders if o.get('created_at', '') > '2024-01-01'))}",
            reply_markup=admin_kb()
        )
    except Exception as e:
        bot_logger.logger.error("Error getting stats", error=str(e))
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@dp.message(F.text == "üë• –ö–ª–∏–µ–Ω—Ç—ã")
@handle_errors
async def admin_clients(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = str(msg.chat.id)
    
    if not is_admin(user_id):
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.")
        return
    
    try:
        orders = db.get_all_orders()
        unique_clients = len(set(order['user_id'] for order in orders))
        
        await msg.answer(
            f"üë• **–ö–ª–∏–µ–Ω—Ç—ã**\n\n"
            f"üë§ **–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:** {unique_clients}\n"
            f"üì¶ **–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:** {len(orders)}\n\n"
            f"üí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ WebApp",
            reply_markup=admin_kb()
        )
    except Exception as e:
        bot_logger.logger.error("Error getting clients", error=str(e))
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö.")

# ======================
# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebApp
# ======================

@dp.message(F.web_app_data)
@handle_errors
async def handle_web_app_data(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp"""
    user_id = str(msg.chat.id)
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp
        data = json.loads(msg.web_app_data.data)
        action = data.get('action')
        
        if action == 'order':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
            await process_order(msg, data)
        elif action == 'add_product' and is_admin(user_id):
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            await process_add_product(msg, data)
        else:
            await msg.answer("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ WebApp.")
            
    except Exception as e:
        bot_logger.logger.error("Error processing webapp data", error=str(e))
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp.")

async def process_order(msg: Message, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ WebApp"""
    user_id = str(msg.chat.id)
    
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_data = OrderCreate(
            text=f"–ó–∞–∫–∞–∑ –∏–∑ WebApp, {len(data.get('items', []))} –ø–æ–∑–∏—Ü–∏–π",
            items=[CartItem(**item) for item in data.get('items', [])],
            total=data.get('total', 0)
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order_id = await db.create_order(user_id, order_data)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        try:
            await safe_send_message(
                bot, int(ADMINS[0]),
                f"üÜï **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}**\n\n"
                f"üë§ **–ö–ª–∏–µ–Ω—Ç:** {msg.from_user.first_name}\n"
                f"üí∞ **–°—É–º–º–∞:** {format_price(order_data.total)}\n"
                f"üì¶ **–ü–æ–∑–∏—Ü–∏–π:** {len(order_data.items)}"
            )
        except Exception as e:
            bot_logger.logger.error("Error notifying admin", error=str(e))
        
        await msg.answer(
            f"‚úÖ **–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"üí∞ **–°—É–º–º–∞:** {format_price(order_data.total)}\n"
            f"üì¶ **–ü–æ–∑–∏—Ü–∏–π:** {len(order_data.items)}\n\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=get_user_kb(user_id)
        )
        
    except Exception as e:
        bot_logger.logger.error("Error processing order", error=str(e))
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")

async def process_add_product(msg: Message, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = str(msg.chat.id)
    
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        product_data = Product(**data.get('product', {}))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        product_id = await db.create_product(product_data)
        
        await msg.answer(
            f"‚úÖ **–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
            f"üÜî **ID:** {product_id}\n"
            f"üì¶ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {product_data.title}\n"
            f"üí∞ **–¶–µ–Ω–∞:** {format_price(product_data.price)}",
            reply_markup=admin_kb()
        )
        
    except Exception as e:
        bot_logger.logger.error("Error adding product", error=str(e))
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")

# ======================
# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# ======================

@dp.message(ReviewStates.waiting_for_review)
@handle_errors
async def process_review(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    user_id = str(msg.chat.id)
    text = msg.text
    
    try:
        # –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤
        lines = text.strip().split('\n')
        rating = None
        review_text = ""
        
        for line in lines:
            line = line.strip()
            if line.lower().startswith('—Ä–µ–π—Ç–∏–Ω–≥'):
                try:
                    rating = int(line.split(':')[1].strip())
                    if rating < 1 or rating > 5:
                        rating = None
                except (ValueError, IndexError):
                    rating = None
            elif line.lower().startswith('–æ—Ç–∑—ã–≤'):
                review_text = ':'.join(line.split(':')[1:]).strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not rating:
            await msg.answer(
                "‚ùå **–û—à–∏–±–∫–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ**\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 5.\n"
                "**–ü—Ä–∏–º–µ—Ä:** –†–µ–π—Ç–∏–Ω–≥: 5",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return
        
        if not review_text or len(review_text) < 10:
            await msg.answer(
                "‚ùå **–û—à–∏–±–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–∑—ã–≤–∞**\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "**–ü—Ä–∏–º–µ—Ä:** –û—Ç–∑—ã–≤: –û—Ç–ª–∏—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω! –†–µ–∫–æ–º–µ–Ω–¥—É—é!",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = msg.from_user.username or msg.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = await db.add_review(user_id, username, review_text, rating)
        
        if success:
            await msg.answer(
                "‚úÖ **–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!**\n\n"
                f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {rating}/5\n"
                f"üìù **–û—Ç–∑—ã–≤:** {review_text}\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ü–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–∑—ã–≤–æ–≤.",
                reply_markup=get_user_kb(user_id)
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            for admin_id in ADMINS:
                try:
                    await bot.send_message(
                        admin_id,
                        f"üìù **–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é**\n\n"
                        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {username} (ID: {user_id})\n"
                        f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {rating}/5\n"
                        f"üìù **–û—Ç–∑—ã–≤:** {review_text}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏"
                    )
                except Exception as e:
                    bot_logger.logger.error(f"Failed to notify admin {admin_id}: {e}")
        else:
            await msg.answer(
                "‚ö†Ô∏è **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞**\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ —Ä–∞–Ω–µ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_user_kb(user_id)
            )
    
    except Exception as e:
        bot_logger.logger.error(f"Error processing review: {e}")
        await msg.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_user_kb(user_id)
        )
    
    finally:
        await state.clear()

# ======================
# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
# ======================

@dp.pre_checkout_query()
@handle_errors
async def handle_pre_checkout(pre: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        await bot.answer_pre_checkout_query(pre.id, ok=True)
        bot_logger.logger.info("Pre-checkout approved", query_id=pre.id)
    except Exception as e:
        bot_logger.logger.error("Pre-checkout error", error=str(e))
        try:
            await bot.answer_pre_checkout_query(pre.id, ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
        except Exception:
            pass

@dp.message(F.successful_payment)
@handle_errors
async def handle_successful_payment(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    user_id = str(msg.chat.id)
    
    try:
        payment = msg.successful_payment
        order_id = payment.invoice_payload.split('_')[-1] if '_' in payment.invoice_payload else "unknown"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        await db.update_order_status(order_id, 'paid')

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        try:
            await safe_send_message(
                bot, int(ADMINS[0]),
                f"üí∞ **–û–ø–ª–∞—á–µ–Ω –∑–∞–∫–∞–∑ #{order_id}**\n\n"
                f"üë§ **–ö–ª–∏–µ–Ω—Ç:** {msg.from_user.first_name}\n"
                f"üí≥ **–°—É–º–º–∞:** {format_price(payment.total_amount / 100)}"
            )
        except Exception as e:
            bot_logger.logger.error("Error notifying admin about payment", error=str(e))
        
        await msg.answer(
            "‚úÖ **–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!**\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à –∑–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=get_user_kb(user_id)
        )
        
    except Exception as e:
        bot_logger.logger.error("Error processing payment", error=str(e))
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

# ======================
# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ======================

@dp.message()
@handle_errors
async def handle_message(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(msg.chat.id)
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
    if msg.text and not msg.text.startswith('/'):
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            validated_text = validate_user_input(msg.text, max_length=2000)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            try:
                await safe_send_message(
                    bot, int(ADMINS[0]),
                    f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞**\n\n"
                    f"üë§ **–ò–º—è:** {msg.from_user.first_name}\n"
                    f"üÜî **ID:** {user_id}\n\n"
                    f"üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{validated_text}"
                )
            except Exception as e:
                bot_logger.logger.error("Error sending message to admin", error=str(e))
            
            await msg.answer(
                "‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
                "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_user_kb(user_id)
            )
            
        except ValidationError as e:
            await msg.answer(f"‚ùå {e.message}")
        except Exception as e:
            bot_logger.logger.error("Error processing message", error=str(e))
            await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# ======================
# üîπ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# ======================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        bot_logger.logger.info("Bot starting up", version="2.0", features=["validation", "logging", "error_handling"])
        print("ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ aiogram 3.x —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        bot_logger.logger.error("Fatal error", error=str(e))
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import asyncio
import json
from database import db
from models import Product, OrderCreate
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = 123456789
    success = db.add_user(
        telegram_id=user_id,
        username="test_user",
        first_name="Test",
        last_name="User"
    )
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(user_id)
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {'–£—Å–ø–µ—à–Ω–æ' if user else '–û—à–∏–±–∫–∞'}")
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    product_id = db.add_product(
        title="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
        description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
        price=1000.0,
        sizes=["S", "M", "L"],
        photo="test.jpg"
    )
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {'–£—Å–ø–µ—à–Ω–æ' if product_id else '–û—à–∏–±–∫–∞'}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    products = db.get_products()
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    order_id = db.add_order(
        user_id=user_id,
        products=[{"id": 1, "title": "–¢–µ—Å—Ç", "price": 100, "qty": 1}],
        total_amount=100.0
    )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {'–£—Å–ø–µ—à–Ω–æ' if order_id else '–û—à–∏–±–∫–∞'}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders = db.get_user_orders(user_id)
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤: {len(orders)} –∑–∞–∫–∞–∑–æ–≤")
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    success = db.add_admin_message(user_id, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
    
    print("‚úÖ –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!\n")

def test_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Pydantic –º–æ–¥–µ–ª–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ Product
        product = Product(
            id=1,
            title="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
            price=1000.0,
            sizes=["S", "M", "L"],
            photo="test.jpg"
        )
        print("‚úÖ –ú–æ–¥–µ–ª—å Product: –£—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ OrderCreate
        order = OrderCreate(
            items=[{"id": 1, "qty": 2, "size": "M"}],
            total_amount=2000.0
        )
        print("‚úÖ –ú–æ–¥–µ–ª—å OrderCreate: –£—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª—è—Ö: {e}")
    
    print("‚úÖ –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω!\n")

def test_json_files():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç JSON —Ñ–∞–π–ª—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON —Ñ–∞–π–ª—ã...")
    
    files_to_check = [
        "webapp/products.json",
        "webapp/admins.json",
        "admin_msgs.json",
        "orders.json"
    ]
    
    for file_path in files_to_check:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                print(f"‚úÖ {file_path}: {len(data) if isinstance(data, list) else 'OK'}")
        except FileNotFoundError:
            print(f"‚ö†Ô∏è {file_path}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except json.JSONDecodeError as e:
            print(f"‚ùå {file_path}: –û—à–∏–±–∫–∞ JSON - {e}")
        except Exception as e:
            print(f"‚ùå {file_path}: –û—à–∏–±–∫–∞ - {e}")
    
    print("‚úÖ –¢–µ—Å—Ç JSON —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n")

def test_webapp_files():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã WebApp"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã WebApp...")
    
    webapp_files = [
        "webapp/index.html",
        "webapp/styles.css",
        "webapp/app.js",
        "webapp/manifest.json"
    ]
    
    for file_path in webapp_files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                print(f"‚úÖ {file_path}: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        except FileNotFoundError:
            print(f"‚ùå {file_path}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå {file_path}: –û—à–∏–±–∫–∞ - {e}")
    
    print("‚úÖ –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤ WebApp –∑–∞–≤–µ—Ä—à–µ–Ω!\n")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π...\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await test_database()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    test_models()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON —Ñ–∞–π–ª—ã
    test_json_files()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã WebApp
    test_webapp_files()
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìã –°–≤–æ–¥–∫–∞:")
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite - —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö - —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ - —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ WebApp –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å - —Ä–∞–±–æ—Ç–∞–µ—Ç")

if __name__ == "__main__":
    asyncio.run(main())

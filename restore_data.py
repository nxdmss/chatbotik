#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
"""

import os
import json
import sqlite3
import shutil
from datetime import datetime

DB_PATH = "shop.db"
BACKUP_DIR = "db_backups"
JSON_BACKUP = "products_backup.json"

def restore_from_json():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        if not os.path.exists(JSON_BACKUP):
            print(f"‚ùå JSON –±—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {JSON_BACKUP}")
            return False
        
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {JSON_BACKUP}...")
        
        with open(JSON_BACKUP, 'r', encoding='utf-8') as f:
            products = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º –ë–î –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title TEXT NOT NULL,
                    description TEXT,
                    price REAL NOT NULL,
                    sizes TEXT,
                    photo TEXT,
                    is_active INTEGER DEFAULT 1,
                    created_at TEXT
                )
            """)
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            cursor.execute("DELETE FROM products")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            for product in products:
                created_at = product.get("created_at", datetime.now().isoformat())
                cursor.execute("""
                    INSERT INTO products (id, title, description, price, sizes, photo, is_active, created_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    product.get("id"),
                    product.get("title", ""),
                    product.get("description", ""),
                    product.get("price", 0),
                    json.dumps(product.get("sizes", [])),
                    product.get("photo", ""),
                    1 if product.get("is_active", True) else 0,
                    created_at
                ))
            
            conn.commit()
        
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ JSON: {e}")
        return False

def restore_from_db_backup():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ DB –±—ç–∫–∞–ø–∞"""
    try:
        if not os.path.exists(BACKUP_DIR):
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {BACKUP_DIR}")
            return False
        
        backups = [f for f in os.listdir(BACKUP_DIR) if f.endswith('.db')]
        if not backups:
            print("‚ùå DB –±—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø
        backups.sort(reverse=True)
        latest_backup = os.path.join(BACKUP_DIR, backups[0])
        
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ DB –±—ç–∫–∞–ø–∞: {latest_backup}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –±—ç–∫–∞–ø
        shutil.copy2(latest_backup, DB_PATH)
        
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ DB –±—ç–∫–∞–ø–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ DB –±—ç–∫–∞–ø–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    if os.path.exists(DB_PATH):
        try:
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM products")
                count = cursor.fetchone()[0]
            
            if count > 0:
                print(f"üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {count} —Ç–æ–≤–∞—Ä–æ–≤")
                return
        except:
            pass
    
    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ JSON
    if restore_from_json():
        return
    
    # –ï—Å–ª–∏ JSON –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑ DB –±—ç–∫–∞–ø–∞
    if restore_from_db_backup():
        return
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –±—ç–∫–∞–ø–æ–≤")

if __name__ == "__main__":
    main()

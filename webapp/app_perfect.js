// ===== –ò–î–ï–ê–õ–¨–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–ê =====

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
if ('caches' in window) {
    caches.keys().then(function(names) {
        for (let name of names) {
            caches.delete(name);
        }
    });
}

localStorage.clear();
sessionStorage.clear();

console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ò–î–ï–ê–õ–¨–ù–û–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ 1.0 - –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢');

class PerfectShopApp {
    constructor() {
        this.products = [];
        this.cart = [];
        this.isAdmin = false;
        this.currentPage = 'catalog';
        this.editingProduct = null;
        this.userInfo = null;
        
        this.init();
    }

    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–î–ï–ê–õ–¨–ù–û–ì–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {
                window.Telegram.WebApp.ready();
                window.Telegram.WebApp.expand();
                this.userInfo = window.Telegram.WebApp.initDataUnsafe?.user;
                console.log('‚úÖ Telegram WebApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await this.fetchProducts();
            await this.checkAdminStatus();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.setupEventListeners();
            this.renderCurrentPage();
            this.updateCartBadge();
            
            console.log('‚úÖ –ò–î–ï–ê–õ–¨–ù–û–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    // ===== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• =====

    async fetchProducts() {
        try {
            const response = await fetch('/webapp/products.json');
            const data = await response.json();
            this.products = data.products || [];
            console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', this.products.length);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
            this.products = [];
        }
    }

    // ===== –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–°–ö–ò–• –ü–†–ê–í =====

    async checkAdminStatus() {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞...');
            
            const ADMIN_ID = '1593426947';
            let userId = null;
            
            // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {
                console.log('‚úÖ Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
                
                if (this.userInfo && this.userInfo.id) {
                    userId = this.userInfo.id.toString();
                    console.log('üì± User ID –∏–∑ Telegram:', userId);
                    
                    // –°–¢–†–û–ì–û–ï –°–†–ê–í–ù–ï–ù–ò–ï
                    if (userId === ADMIN_ID) {
                        this.isAdmin = true;
                        console.log('üëë –í–´ –ê–î–ú–ò–ù! ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç:', userId);
                    } else {
                        this.isAdmin = false;
                        console.log('üë§ –í–´ –ö–õ–ò–ï–ù–¢! ID:', userId);
                    }
                } else {
                    console.log('‚ùå User ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram WebApp');
                    this.isAdmin = false;
                }
            } else {
                console.log('üåê –ó–∞–ø—É—â–µ–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º hostname –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                const isLocalhost = window.location.hostname === 'localhost';
                const isReplit = window.location.hostname.includes('replit.com') || 
                                window.location.hostname.includes('replit.dev');
                
                if (isLocalhost || isReplit) {
                    console.log('üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: localhost/Replit –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
                    this.isAdmin = true;
                    console.log('üîß –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
                } else {
                    console.log('‚ùå –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º: –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ù–ï –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
                    this.isAdmin = false;
                }
            }
            
            console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢:');
            console.log('   User ID:', userId);
            console.log('   –ê–¥–º–∏–Ω:', this.isAdmin ? '–î–ê' : '–ù–ï–¢');
            
            if (this.isAdmin) {
                this.showAdminPanel();
                console.log('‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
            } else {
                console.log('‚ùå –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ù–ï –ø–æ–∫–∞–∑–∞–Ω–∞ - –≤—ã –∫–ª–∏–µ–Ω—Ç');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤:', error);
            this.isAdmin = false;
        }
    }

    showAdminPanel() {
        console.log('üëë –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const adminNavBtn = document.getElementById('admin-nav-btn');
        if (adminNavBtn) {
            adminNavBtn.style.display = 'block';
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∞');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        const adminActions = document.getElementById('admin-actions');
        if (adminActions) {
            adminActions.style.display = 'block';
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
        }
    }

    // ===== –ù–ê–í–ò–ì–ê–¶–ò–Ø =====

    setupEventListeners() {
        // –ü–æ–∏—Å–∫
        const searchInput = document.getElementById('search');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.filterProducts(e.target.value);
            });
        }

        // –§–æ—Ä–º–∞ —Ç–æ–≤–∞—Ä–∞
        const productForm = document.getElementById('product-form');
        if (productForm) {
            productForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleProductSubmit();
            });
        }

        // –ü—Ä–µ–≤—å—é —Ñ–æ—Ç–æ
        const photoInput = document.getElementById('product-photo');
        if (photoInput) {
            photoInput.addEventListener('change', (e) => {
                this.handlePhotoPreview(e);
            });
        }
    }

    showPage(pageName) {
        console.log('üìÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', pageName);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pages = document.querySelectorAll('.page');
        pages.forEach(page => {
            page.classList.remove('active');
            page.style.display = 'none';
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const targetPage = document.getElementById(`${pageName}-page`);
        if (targetPage) {
            targetPage.style.display = 'block';
            targetPage.classList.add('active');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        const navItems = document.querySelectorAll('.nav-item');
        navItems.forEach(item => {
            item.classList.remove('active');
        });

        const activeNavItem = document.querySelector(`[data-page="${pageName}"]`);
        if (activeNavItem) {
            activeNavItem.classList.add('active');
        }

        this.currentPage = pageName;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (pageName === 'admin') {
            this.loadAdminPage();
        } else if (pageName === 'cart') {
            this.renderCart();
        }
    }

    renderCurrentPage() {
        this.showPage(this.currentPage);
    }

    // ===== –ö–ê–¢–ê–õ–û–ì –¢–û–í–ê–†–û–í =====

    renderProducts() {
        const productsGrid = document.getElementById('products-grid');
        if (!productsGrid) return;

        if (this.products.length === 0) {
            productsGrid.innerHTML = `
                <div class="loading">
                    –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...
                </div>
            `;
            return;
        }

        const filteredProducts = this.products.filter(product => product.is_active !== false);
        
        productsGrid.innerHTML = filteredProducts.map(product => `
            <div class="product-card" data-product-id="${product.id}">
                <img src="${product.photo || '/webapp/static/uploads/default.jpg'}" 
                     alt="${product.title}" 
                     onerror="this.src='/webapp/static/uploads/default.jpg'">
                <h3>${product.title}</h3>
                <p>${product.description}</p>
                <div class="product-price">${product.price} ‚ÇΩ</div>
                <div class="product-sizes">–†–∞–∑–º–µ—Ä—ã: ${product.sizes ? product.sizes.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</div>
                
                ${this.isAdmin ? `
                    <div class="product-actions">
                        <button class="btn btn-secondary btn-sm" onclick="app.editProduct(${product.id})">
                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="app.deleteProduct(${product.id})">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                ` : `
                    <div class="product-actions">
                        <button class="btn btn-primary btn-sm" onclick="app.addToCart(${product.id})">
                            üõí –í –∫–æ—Ä–∑–∏–Ω—É
                        </button>
                    </div>
                `}
            </div>
        `).join('');
    }

    filterProducts(searchTerm) {
        const productCards = document.querySelectorAll('.product-card');
        const term = searchTerm.toLowerCase();

        productCards.forEach(card => {
            const title = card.querySelector('h3').textContent.toLowerCase();
            const description = card.querySelector('p').textContent.toLowerCase();
            
            if (title.includes(term) || description.includes(term)) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    }

    // ===== –ö–û–†–ó–ò–ù–ê =====

    addToCart(productId) {
        const product = this.products.find(p => p.id === productId);
        if (!product) return;

        const existingItem = this.cart.find(item => item.productId === productId);
        
        if (existingItem) {
            existingItem.quantity += 1;
        } else {
            this.cart.push({
                productId: productId,
                product: product,
                quantity: 1
            });
        }

        this.updateCartBadge();
        this.showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!', 'success');
        console.log('üõí –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É:', product.title);
    }

    removeFromCart(productId) {
        this.cart = this.cart.filter(item => item.productId !== productId);
        this.updateCartBadge();
        this.renderCart();
        this.showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', 'success');
    }

    updateCartQuantity(productId, quantity) {
        const item = this.cart.find(item => item.productId === productId);
        if (item) {
            if (quantity <= 0) {
                this.removeFromCart(productId);
            } else {
                item.quantity = quantity;
                this.updateCartBadge();
                this.renderCart();
            }
        }
    }

    updateCartBadge() {
        const totalItems = this.cart.reduce((sum, item) => sum + item.quantity, 0);
        
        const navBadge = document.getElementById('nav-cart-badge');
        if (navBadge) {
            if (totalItems > 0) {
                navBadge.textContent = totalItems;
                navBadge.style.display = 'block';
            } else {
                navBadge.style.display = 'none';
            }
        }
    }

    renderCart() {
        const cartItems = document.getElementById('cart-items');
        if (!cartItems) return;

        if (this.cart.length === 0) {
            cartItems.innerHTML = `
                <div class="loading">
                    –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
                </div>
            `;
            return;
        }

        cartItems.innerHTML = this.cart.map(item => `
            <div class="cart-item">
                <img src="${item.product.photo || '/webapp/static/uploads/default.jpg'}" 
                     alt="${item.product.title}"
                     onerror="this.src='/webapp/static/uploads/default.jpg'">
                <div class="cart-item-info">
                    <div class="cart-item-title">${item.product.title}</div>
                    <div class="cart-item-price">${item.product.price} ‚ÇΩ</div>
                </div>
                <div class="cart-item-controls">
                    <button onclick="app.updateCartQuantity(${item.productId}, ${item.quantity - 1})">-</button>
                    <span>${item.quantity}</span>
                    <button onclick="app.updateCartQuantity(${item.productId}, ${item.quantity + 1})">+</button>
                    <button onclick="app.removeFromCart(${item.productId})" style="background: #dc3545; margin-left: 0.5rem;">üóëÔ∏è</button>
                </div>
            </div>
        `).join('');

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        const total = this.cart.reduce((sum, item) => sum + (item.product.price * item.quantity), 0);
        const cartTotal = document.getElementById('cart-total');
        if (cartTotal) {
            cartTotal.textContent = `${total} ‚ÇΩ`;
        }
    }

    clearCart() {
        this.cart = [];
        this.updateCartBadge();
        this.renderCart();
        this.showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', 'success');
    }

    checkout() {
        if (this.cart.length === 0) {
            this.showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!', 'error');
            return;
        }

        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Payments
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'success');
        console.log('üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:', this.cart);
    }

    // ===== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ =====

    loadAdminPage() {
        this.renderAdminStats();
        this.renderAdminProducts();
    }

    renderAdminStats() {
        const productsCount = document.getElementById('products-count');
        const ordersCount = document.getElementById('orders-count');
        
        if (productsCount) {
            productsCount.textContent = this.products.length;
        }
        
        if (ordersCount) {
            ordersCount.textContent = '0'; // –ó–∞–≥–ª—É—à–∫–∞
        }
    }

    renderAdminProducts() {
        const adminProductsList = document.getElementById('admin-products-list');
        if (!adminProductsList) return;

        adminProductsList.innerHTML = this.products.map(product => `
            <div class="admin-product-item">
                <img src="${product.photo || '/webapp/static/uploads/default.jpg'}" 
                     alt="${product.title}"
                     onerror="this.src='/webapp/static/uploads/default.jpg'">
                <div class="admin-product-info">
                    <div class="admin-product-title">${product.title}</div>
                    <div class="admin-product-price">${product.price} ‚ÇΩ</div>
                </div>
                <div class="admin-product-actions">
                    <button class="btn btn-secondary btn-sm" onclick="app.editProduct(${product.id})">
                        ‚úèÔ∏è
                    </button>
                    <button class="btn btn-danger btn-sm" onclick="app.deleteProduct(${product.id})">
                        üóëÔ∏è
                    </button>
                </div>
            </div>
        `).join('');
    }

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò =====

    showAddProductModal() {
        if (!this.isAdmin) {
            this.showNotification('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error');
            return;
        }

        this.editingProduct = null;
        document.getElementById('product-modal-title').textContent = '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
        document.getElementById('product-form').reset();
        document.getElementById('photo-preview').style.display = 'none';
        this.showModal('product-modal');
    }

    editProduct(productId) {
        if (!this.isAdmin) {
            this.showNotification('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error');
            return;
        }

        const product = this.products.find(p => p.id === productId);
        if (!product) {
            this.showNotification('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        this.editingProduct = product;
        document.getElementById('product-modal-title').textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä';
        document.getElementById('product-title').value = product.title;
        document.getElementById('product-description').value = product.description;
        document.getElementById('product-price').value = product.price;
        document.getElementById('product-sizes').value = product.sizes ? product.sizes.join(', ') : '';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
        if (product.photo) {
            const preview = document.getElementById('photo-preview');
            const previewImg = document.getElementById('preview-img');
            previewImg.src = product.photo;
            preview.style.display = 'block';
        }
        
        this.showModal('product-modal');
    }

    async deleteProduct(productId) {
        if (!this.isAdmin) {
            this.showNotification('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error');
            return;
        }

        const product = this.products.find(p => p.id === productId);
        if (!product) {
            this.showNotification('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${product.title}"?`)) {
            return;
        }

        try {
            const response = await fetch(`/webapp/admin/products/${productId}?user_id=admin`, {
                method: 'DELETE'
            });

            if (response.ok) {
                this.products = this.products.filter(p => p.id !== productId);
                this.renderProducts();
                this.renderAdminProducts();
                this.showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω', 'success');
                console.log('üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω:', product.title);
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'error');
        }
    }

    async handleProductSubmit() {
        if (!this.isAdmin) {
            this.showNotification('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error');
            return;
        }

        const formData = new FormData();
        formData.append('title', document.getElementById('product-title').value);
        formData.append('description', document.getElementById('product-description').value);
        formData.append('price', document.getElementById('product-price').value);
        formData.append('sizes', document.getElementById('product-sizes').value);

        const photoFile = document.getElementById('product-photo').files[0];
        if (photoFile) {
            formData.append('photo', photoFile);
        }

        try {
            const url = this.editingProduct 
                ? `/webapp/admin/products/${this.editingProduct.id}?user_id=admin`
                : `/webapp/admin/products?user_id=admin`;
            
            const method = this.editingProduct ? 'PUT' : 'POST';

            const response = await fetch(url, {
                method: method,
                body: formData
            });

            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ –¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', result);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
                await this.fetchProducts();
                this.renderProducts();
                this.renderAdminProducts();
                
                this.hideModal('product-modal');
                this.showNotification(
                    this.editingProduct ? '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω' : '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω', 
                    'success'
                );
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'error');
        }
    }

    handlePhotoPreview(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const preview = document.getElementById('photo-preview');
                const previewImg = document.getElementById('preview-img');
                previewImg.src = e.target.result;
                preview.style.display = 'block';
            };
            reader.readAsDataURL(file);
        }
    }

    // ===== –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê =====

    showModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('active');
        }
    }

    hideModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('active');
        }
    }

    // ===== –ü–†–û–§–ò–õ–¨ =====

    contactAdmin() {
        this.showNotification('–§—É–Ω–∫—Ü–∏—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'success');
    }

    // ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====

    showNotification(message, type = 'success') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(notification => notification.remove());

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;

        document.body.appendChild(notification);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setTimeout(() => {
            notification.classList.add('show');
        }, 100);

        // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }, 3000);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = new PerfectShopApp();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è onclick
window.showModal = (modalId) => app.showModal(modalId);
window.hideModal = (modalId) => app.hideModal(modalId);
window.clearCart = () => app.clearCart();
window.checkout = () => app.checkout();
// ===== –ò–î–ï–ê–õ–¨–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–ê =====

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
if ('caches' in window) {
    caches.keys().then(function(names) {
        for (let name of names) {
            caches.delete(name);
        }
    });
}

localStorage.clear();
sessionStorage.clear();

console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ò–î–ï–ê–õ–¨–ù–û–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ 1.0 - –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢');

class PerfectShopApp {
    constructor() {
        this.products = [];
        this.cart = [];
        this.isAdmin = false;
        this.currentPage = 'catalog';
        this.editingProduct = null;
        this.userInfo = null;
        
        this.init();
    }

    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–î–ï–ê–õ–¨–ù–û–ì–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {
                window.Telegram.WebApp.ready();
                window.Telegram.WebApp.expand();
                this.userInfo = window.Telegram.WebApp.initDataUnsafe?.user;
                console.log('‚úÖ Telegram WebApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await this.fetchProducts();
            await this.checkAdminStatus();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.setupEventListeners();
            this.renderCurrentPage();
            this.updateCartBadge();
            
            console.log('‚úÖ –ò–î–ï–ê–õ–¨–ù–û–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    // ===== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• =====

    async fetchProducts() {
        try {
            const response = await fetch('/webapp/products.json');
            const data = await response.json();
            this.products = data.products || [];
            console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', this.products.length);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
            this.products = [];
        }
    }

    // ===== –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ê–î–ú–ò–ù–°–ö–ò–• –ü–†–ê–í =====

    async checkAdminStatus() {
        console.log('üîí SENIOR APPROACH: –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï –∞–¥–º–∏–Ω
        this.isAdmin = false;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º user ID –∏–∑ Telegram WebApp
            let userId = null;
            
            if (window.Telegram && window.Telegram.WebApp) {
                console.log('üì± Telegram WebApp –Ω–∞–π–¥–µ–Ω');
                
                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å user ID
                if (this.userInfo && this.userInfo.id) {
                    userId = this.userInfo.id.toString();
                    console.log('üì± User ID –∏–∑ userInfo:', userId);
                } else if (window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
                    userId = window.Telegram.WebApp.initDataUnsafe.user.id.toString();
                    console.log('üì± User ID –∏–∑ initDataUnsafe:', userId);
                }
                
                console.log('üì± –ò—Ç–æ–≥–æ–≤—ã–π User ID:', userId);
                
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –≤–∞—à ID = –∞–¥–º–∏–Ω
                if (userId === '1593426947') {
                    this.isAdmin = true;
                    console.log('‚úÖ –í–´ –ê–î–ú–ò–ù! ID:', userId);
                } else {
                    this.isAdmin = false;
                    console.log('‚ùå –í—ã –∫–ª–∏–µ–Ω—Ç. ID:', userId || '–Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –º—ã –≤ Telegram –Ω–æ WebApp –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è
                console.log('üåê WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏...');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º user agent
                const userAgent = navigator.userAgent;
                const isTelegram = userAgent.includes('TelegramBot') || userAgent.includes('Telegram');
                
                console.log('üì± User Agent:', userAgent);
                console.log('ü§ñ Telegram User Agent:', isTelegram);
                
                if (isTelegram) {
                    // –ï—Å–ª–∏ —ç—Ç–æ Telegram, –Ω–æ WebApp –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è - –¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                    console.log('üîß Telegram –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ User Agent - –¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞');
                    this.isAdmin = true;
                } else {
                    // –í –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ - –ù–ï –∞–¥–º–∏–Ω
                    this.isAdmin = false;
                    console.log('üåê –û–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä - –ù–ï –∞–¥–º–∏–Ω');
                }
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
            this.isAdmin = false;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –∞–¥–º–∏–Ω
        if (this.isAdmin) {
            console.log('üîß –í—ã–∑—ã–≤–∞–µ–º showAdminPanel()...');
            this.showAdminPanel();
            console.log('‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        } else {
            console.log('‚ùå –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ù–ï –ø–æ–∫–∞–∑–∞–Ω–∞');
        }
        
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢: –ê–¥–º–∏–Ω =', this.isAdmin ? '–î–ê' : '–ù–ï–¢');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä—è–º–æ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        this.showDebugInfo();
    }

    showAdminPanel() {
        console.log('üëë –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const adminNavBtn = document.getElementById('admin-nav-btn');
        console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∞ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', adminNavBtn);
        
        if (adminNavBtn) {
            adminNavBtn.style.display = 'block';
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∞');
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ù–ï –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        const adminActions = document.getElementById('admin-actions');
        console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', adminActions);
        
        if (adminActions) {
            adminActions.style.display = 'block';
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        console.log('üìä –°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞:', this.isAdmin);
        console.log('üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', document.querySelectorAll('*').length);
    }

    showDebugInfo() {
        // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∏–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∞–¥–º–∏–Ω–∞
        const debugDiv = document.createElement('div');
        debugDiv.id = 'debug-info';
        debugDiv.style.cssText = `
            position: fixed;
            top: 10px;
            left: 10px;
            background: ${this.isAdmin ? '#28a745' : '#dc3545'};
            color: white;
            padding: 10px 15px;
            border-radius: 5px;
            font-size: 14px;
            font-weight: bold;
            z-index: 10000;
            max-width: 300px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        `;
        
        let userId = '–Ω–µ –Ω–∞–π–¥–µ–Ω';
        if (this.userInfo && this.userInfo.id) {
            userId = this.userInfo.id.toString();
        } else if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
            userId = window.Telegram.WebApp.initDataUnsafe.user.id.toString();
        }
        
        debugDiv.innerHTML = `
            <div>üîí –°–¢–ê–¢–£–°: ${this.isAdmin ? '–ê–î–ú–ò–ù' : '–ö–õ–ò–ï–ù–¢'}</div>
            <div>üì± ID: ${userId}</div>
            <div>üåê WebApp: ${window.Telegram && window.Telegram.WebApp ? '–î–ê' : '–ù–ï–¢'}</div>
            <div>‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: ${this.isAdmin ? '–í–ö–õ–Æ–ß–ï–ù–ê' : '–í–´–ö–õ–Æ–ß–ï–ù–ê'}</div>
        `;
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldDebug = document.getElementById('debug-info');
        if (oldDebug) {
            oldDebug.remove();
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        document.body.appendChild(debugDiv);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
        if (!this.isAdmin) {
            const forceAdminBtn = document.createElement('button');
            forceAdminBtn.textContent = 'üîß –í–ö–õ–Æ–ß–ò–¢–¨ –ê–î–ú–ò–ù';
            forceAdminBtn.style.cssText = `
                position: fixed;
                top: 10px;
                right: 10px;
                background: #007bff;
                color: white;
                border: none;
                padding: 8px 12px;
                border-radius: 5px;
                font-size: 12px;
                font-weight: bold;
                cursor: pointer;
                z-index: 10001;
                box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            `;
            
            forceAdminBtn.onclick = () => {
                console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞');
                this.isAdmin = true;
                this.showAdminPanel();
                this.showNotification('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –≤–∫–ª—é—á–µ–Ω–∞!', 'success');
                debugDiv.remove();
                forceAdminBtn.remove();
            };
            
            document.body.appendChild(forceAdminBtn);
            
            // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ (–±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)
            setTimeout(() => {
                if (forceAdminBtn && forceAdminBtn.parentNode) {
                    forceAdminBtn.remove();
                }
            }, 60000);
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (debugDiv && debugDiv.parentNode) {
                debugDiv.remove();
            }
        }, 10000);
        
        console.log('‚úÖ Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–Ω–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∞ (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞)
        this.createPermanentAdminButton();
    }

    createPermanentAdminButton() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldBtn = document.getElementById('permanent-admin-btn');
        if (oldBtn) {
            oldBtn.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∞
        const adminBtn = document.createElement('button');
        adminBtn.id = 'permanent-admin-btn';
        adminBtn.textContent = 'üëë –ê–î–ú–ò–ù';
        adminBtn.style.cssText = `
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: #28a745;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 25px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            z-index: 10000;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
            animation: pulse 2s infinite;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        const style = document.createElement('style');
        style.textContent = `
            @keyframes pulse {
                0% { transform: scale(1); box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3); }
                50% { transform: scale(1.05); box-shadow: 0 6px 20px rgba(40, 167, 69, 0.5); }
                100% { transform: scale(1); box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3); }
            }
        `;
        document.head.appendChild(style);
        
        adminBtn.onclick = () => {
            console.log('üëë –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω–∞ –Ω–∞–∂–∞—Ç–∞');
            this.isAdmin = true;
            this.showAdminPanel();
            this.showNotification('üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π
            adminBtn.style.background = '#17a2b8';
            adminBtn.textContent = '‚úÖ –ê–î–ú–ò–ù';
            
            // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            style.remove();
        };
        
        document.body.appendChild(adminBtn);
        
        console.log('‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }

    // ===== –ù–ê–í–ò–ì–ê–¶–ò–Ø =====

    setupEventListeners() {
        // –ü–æ–∏—Å–∫
        const searchInput = document.getElementById('search');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.filterProducts(e.target.value);
            });
        }

        // –§–æ—Ä–º–∞ —Ç–æ–≤–∞—Ä–∞
        const productForm = document.getElementById('product-form');
        if (productForm) {
            productForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleProductSubmit();
            });
        }

        // –ü—Ä–µ–≤—å—é —Ñ–æ—Ç–æ
        const photoInput = document.getElementById('product-photo');
        if (photoInput) {
            photoInput.addEventListener('change', (e) => {
                this.handlePhotoPreview(e);
            });
        }
    }

    showPage(pageName) {
        console.log('üìÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', pageName);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pages = document.querySelectorAll('.page');
        pages.forEach(page => {
            page.classList.remove('active');
            page.style.display = 'none';
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const targetPage = document.getElementById(`${pageName}-page`);
        if (targetPage) {
            targetPage.style.display = 'block';
            targetPage.classList.add('active');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        const navItems = document.querySelectorAll('.nav-item');
        navItems.forEach(item => {
            item.classList.remove('active');
        });

        const activeNavItem = document.querySelector(`[data-page="${pageName}"]`);
        if (activeNavItem) {
            activeNavItem.classList.add('active');
        }

        this.currentPage = pageName;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (pageName === 'admin') {
            this.loadAdminPage();
        } else if (pageName === 'cart') {
            this.renderCart();
        }
    }

    renderCurrentPage() {
        this.showPage(this.currentPage);
    }

    // ===== –ö–ê–¢–ê–õ–û–ì –¢–û–í–ê–†–û–í =====

    renderProducts() {
        const productsGrid = document.getElementById('products-grid');
        if (!productsGrid) return;

        if (this.products.length === 0) {
            productsGrid.innerHTML = `
                <div class="loading">
                    –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...
                </div>
            `;
            return;
        }

        const filteredProducts = this.products.filter(product => product.is_active !== false);
        
        productsGrid.innerHTML = filteredProducts.map(product => `
            <div class="product-card" data-product-id="${product.id}">
                <img src="${product.photo || '/webapp/static/uploads/default.jpg'}" 
                     alt="${product.title}" 
                     onerror="this.src='/webapp/static/uploads/default.jpg'">
                <h3>${product.title}</h3>
                <p>${product.description}</p>
                <div class="product-price">${product.price} ‚ÇΩ</div>
                <div class="product-sizes">–†–∞–∑–º–µ—Ä—ã: ${product.sizes ? product.sizes.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</div>
                
                ${this.isAdmin ? `
                    <div class="product-actions">
                        <button class="btn btn-secondary btn-sm" onclick="app.editProduct(${product.id})">
                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="app.deleteProduct(${product.id})">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                ` : `
                    <div class="product-actions">
                        <button class="btn btn-primary btn-sm" onclick="app.addToCart(${product.id})">
                            üõí –í –∫–æ—Ä–∑–∏–Ω—É
                        </button>
                    </div>
                `}
            </div>
        `).join('');
    }

    filterProducts(searchTerm) {
        const productCards = document.querySelectorAll('.product-card');
        const term = searchTerm.toLowerCase();

        productCards.forEach(card => {
            const title = card.querySelector('h3').textContent.toLowerCase();
            const description = card.querySelector('p').textContent.toLowerCase();
            
            if (title.includes(term) || description.includes(term)) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    }

    // ===== –ö–û–†–ó–ò–ù–ê =====

    addToCart(productId) {
        const product = this.products.find(p => p.id === productId);
        if (!product) return;

        const existingItem = this.cart.find(item => item.productId === productId);
        
        if (existingItem) {
            existingItem.quantity += 1;
        } else {
            this.cart.push({
                productId: productId,
                product: product,
                quantity: 1
            });
        }

        this.updateCartBadge();
        this.showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!', 'success');
        console.log('üõí –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É:', product.title);
    }

    removeFromCart(productId) {
        this.cart = this.cart.filter(item => item.productId !== productId);
        this.updateCartBadge();
        this.renderCart();
        this.showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', 'success');
    }

    updateCartQuantity(productId, quantity) {
        const item = this.cart.find(item => item.productId === productId);
        if (item) {
            if (quantity <= 0) {
                this.removeFromCart(productId);
            } else {
                item.quantity = quantity;
                this.updateCartBadge();
                this.renderCart();
            }
        }
    }

    updateCartBadge() {
        const totalItems = this.cart.reduce((sum, item) => sum + item.quantity, 0);
        
        const navBadge = document.getElementById('nav-cart-badge');
        if (navBadge) {
            if (totalItems > 0) {
                navBadge.textContent = totalItems;
                navBadge.style.display = 'block';
            } else {
                navBadge.style.display = 'none';
            }
        }
    }

    renderCart() {
        const cartItems = document.getElementById('cart-items');
        if (!cartItems) return;

        if (this.cart.length === 0) {
            cartItems.innerHTML = `
                <div class="loading">
                    –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
                </div>
            `;
            return;
        }

        cartItems.innerHTML = this.cart.map(item => `
            <div class="cart-item">
                <img src="${item.product.photo || '/webapp/static/uploads/default.jpg'}" 
                     alt="${item.product.title}"
                     onerror="this.src='/webapp/static/uploads/default.jpg'">
                <div class="cart-item-info">
                    <div class="cart-item-title">${item.product.title}</div>
                    <div class="cart-item-price">${item.product.price} ‚ÇΩ</div>
                </div>
                <div class="cart-item-controls">
                    <button onclick="app.updateCartQuantity(${item.productId}, ${item.quantity - 1})">-</button>
                    <span>${item.quantity}</span>
                    <button onclick="app.updateCartQuantity(${item.productId}, ${item.quantity + 1})">+</button>
                    <button onclick="app.removeFromCart(${item.productId})" style="background: #dc3545; margin-left: 0.5rem;">üóëÔ∏è</button>
                </div>
            </div>
        `).join('');

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        const total = this.cart.reduce((sum, item) => sum + (item.product.price * item.quantity), 0);
        const cartTotal = document.getElementById('cart-total');
        if (cartTotal) {
            cartTotal.textContent = `${total} ‚ÇΩ`;
        }
    }

    clearCart() {
        this.cart = [];
        this.updateCartBadge();
        this.renderCart();
        this.showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', 'success');
    }

    checkout() {
        if (this.cart.length === 0) {
            this.showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!', 'error');
            return;
        }

        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Payments
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'success');
        console.log('üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:', this.cart);
    }

    // ===== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ =====

    loadAdminPage() {
        this.renderAdminStats();
        this.renderAdminProducts();
    }

    renderAdminStats() {
        const productsCount = document.getElementById('products-count');
        const ordersCount = document.getElementById('orders-count');
        
        if (productsCount) {
            productsCount.textContent = this.products.length;
        }
        
        if (ordersCount) {
            ordersCount.textContent = '0'; // –ó–∞–≥–ª—É—à–∫–∞
        }
    }

    renderAdminProducts() {
        const adminProductsList = document.getElementById('admin-products-list');
        if (!adminProductsList) return;

        adminProductsList.innerHTML = this.products.map(product => `
            <div class="admin-product-item">
                <img src="${product.photo || '/webapp/static/uploads/default.jpg'}" 
                     alt="${product.title}"
                     onerror="this.src='/webapp/static/uploads/default.jpg'">
                <div class="admin-product-info">
                    <div class="admin-product-title">${product.title}</div>
                    <div class="admin-product-price">${product.price} ‚ÇΩ</div>
                </div>
                <div class="admin-product-actions">
                    <button class="btn btn-secondary btn-sm" onclick="app.editProduct(${product.id})">
                        ‚úèÔ∏è
                    </button>
                    <button class="btn btn-danger btn-sm" onclick="app.deleteProduct(${product.id})">
                        üóëÔ∏è
                    </button>
                </div>
            </div>
        `).join('');
    }

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò =====

    showAddProductModal() {
        if (!this.isAdmin) {
            this.showNotification('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error');
            return;
        }

        this.editingProduct = null;
        document.getElementById('product-modal-title').textContent = '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
        document.getElementById('product-form').reset();
        document.getElementById('photo-preview').style.display = 'none';
        this.showModal('product-modal');
    }

    editProduct(productId) {
        if (!this.isAdmin) {
            this.showNotification('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error');
            return;
        }

        const product = this.products.find(p => p.id === productId);
        if (!product) {
            this.showNotification('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        this.editingProduct = product;
        document.getElementById('product-modal-title').textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä';
        document.getElementById('product-title').value = product.title;
        document.getElementById('product-description').value = product.description;
        document.getElementById('product-price').value = product.price;
        document.getElementById('product-sizes').value = product.sizes ? product.sizes.join(', ') : '';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
        if (product.photo) {
            const preview = document.getElementById('photo-preview');
            const previewImg = document.getElementById('preview-img');
            previewImg.src = product.photo;
            preview.style.display = 'block';
        }
        
        this.showModal('product-modal');
    }

    async deleteProduct(productId) {
        if (!this.isAdmin) {
            this.showNotification('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error');
            return;
        }

        const product = this.products.find(p => p.id === productId);
        if (!product) {
            this.showNotification('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${product.title}"?`)) {
            return;
        }

        try {
            const response = await fetch(`/webapp/admin/products/${productId}?user_id=admin`, {
                method: 'DELETE'
            });

            if (response.ok) {
                this.products = this.products.filter(p => p.id !== productId);
                this.renderProducts();
                this.renderAdminProducts();
                this.showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω', 'success');
                console.log('üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω:', product.title);
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'error');
        }
    }

    async handleProductSubmit() {
        if (!this.isAdmin) {
            this.showNotification('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error');
            return;
        }

        const formData = new FormData();
        formData.append('title', document.getElementById('product-title').value);
        formData.append('description', document.getElementById('product-description').value);
        formData.append('price', document.getElementById('product-price').value);
        formData.append('sizes', document.getElementById('product-sizes').value);

        const photoFile = document.getElementById('product-photo').files[0];
        if (photoFile) {
            formData.append('photo', photoFile);
        }

        try {
            const url = this.editingProduct 
                ? `/webapp/admin/products/${this.editingProduct.id}?user_id=admin`
                : `/webapp/admin/products?user_id=admin`;
            
            const method = this.editingProduct ? 'PUT' : 'POST';

            const response = await fetch(url, {
                method: method,
                body: formData
            });

            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ –¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', result);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
                await this.fetchProducts();
                this.renderProducts();
                this.renderAdminProducts();
                
                this.hideModal('product-modal');
                this.showNotification(
                    this.editingProduct ? '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω' : '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω', 
                    'success'
                );
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'error');
        }
    }

    handlePhotoPreview(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const preview = document.getElementById('photo-preview');
                const previewImg = document.getElementById('preview-img');
                previewImg.src = e.target.result;
                preview.style.display = 'block';
            };
            reader.readAsDataURL(file);
        }
    }

    // ===== –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê =====

    showModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('active');
        }
    }

    hideModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('active');
        }
    }

    // ===== –ü–†–û–§–ò–õ–¨ =====

    contactAdmin() {
        this.showNotification('–§—É–Ω–∫—Ü–∏—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'success');
    }

    // ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====

    showNotification(message, type = 'success') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(notification => notification.remove());

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;

        document.body.appendChild(notification);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setTimeout(() => {
            notification.classList.add('show');
        }, 100);

        // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }, 3000);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = new PerfectShopApp();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è onclick
window.showModal = (modalId) => app.showModal(modalId);
window.hideModal = (modalId) => app.hideModal(modalId);
window.clearCart = () => app.clearCart();
window.checkout = () => app.checkout();
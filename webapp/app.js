/**
 * –ß–∏—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Telegram WebApp –º–∞–≥–∞–∑–∏–Ω–∞
 * –í–µ—Ä—Å–∏—è 2.0 - —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é –¥–ª—è Replit
 */

// ======================
// üîπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
// ======================

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if ('caches' in window) {
    caches.keys().then(function(names) {
        for (let name of names) {
            caches.delete(name);
        }
    });
}

console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ 2.0 —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é');

class MobileShopApp {
    constructor() {
        this.products = [];
        this.cart = [];
        this.isAdmin = false;
        this.currentPage = 'catalog';
        this.editingProduct = null;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API
        this.API_BASE = this.getApiBase();
        console.log('üîó API Base URL:', this.API_BASE);
        
        this.init();
    }
    
    getApiBase() {
        // –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram Web App, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π URL
        if (window.Telegram?.WebApp?.initDataUnsafe) {
            // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            const currentUrl = window.location.origin;
            // –í Replit –æ–±—ã—á–Ω–æ URL –≤–∏–¥–∞ https://PROJECT-NAME.USERNAME.repl.co
            if (currentUrl.includes('repl.co') || currentUrl.includes('replit')) {
                return currentUrl;
            }
        }
        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        return '';  // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
    }

    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã DOM
            const app = document.querySelector('.app');
            const header = document.querySelector('.header');
            const main = document.querySelector('.main');
            const nav = document.querySelector('.nav');
            
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤:');
            console.log('- .app:', !!app);
            console.log('- .header:', !!header);
            console.log('- .main:', !!main);
            console.log('- .nav:', !!nav);
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {
                window.Telegram.WebApp.ready();
                window.Telegram.WebApp.expand();
                this.userInfo = window.Telegram.WebApp.initDataUnsafe?.user;
                console.log('üì± Telegram WebApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            } else {
                console.log('üåê –ó–∞–ø—É—Å–∫ –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
            }
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await this.fetchProducts();
            await this.checkAdminStatus();
            this.loadCart();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.setupEventListeners();
            this.renderCurrentPage();
            this.updateCartBadge();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.setupAutoRefresh();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
            window.addEventListener('beforeunload', () => this.destroy());
            
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ù–ï –¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
            this.isAdmin = false;
            console.log('üîí –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ù–ï –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
        }
    }

    // ===== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• =====

    async fetchProducts() {
        try {
            console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ API
            const response = await fetch(`${this.API_BASE}/webapp/products.json`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            console.log('üì° –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç API:', data);
            
            // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
            this.products = Array.isArray(data) ? data : (data.products || []);
            console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API:', this.products.length);
            
            // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–∞–∫ fallback
            if (this.products.length === 0) {
                console.log('‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ API, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞...');
                const fallbackResponse = await fetch(`${this.API_BASE}/webapp/static/products.json`);
                if (fallbackResponse.ok) {
                    const fallbackData = await fallbackResponse.json();
                    this.products = Array.isArray(fallbackData) ? fallbackData : (fallbackData.products || []);
                    console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞:', this.products.length);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
            this.handleNetworkError(error, '–ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤');
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
            try {
                console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞...');
                const fallbackResponse = await fetch(`${this.API_BASE}/webapp/static/products.json`);
                if (fallbackResponse.ok) {
                    const fallbackData = await fallbackResponse.json();
                    this.products = Array.isArray(fallbackData) ? fallbackData : (fallbackData.products || []);
                    console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ (fallback):', this.products.length);
                } else {
                    throw new Error('–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                }
            } catch (fallbackError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞:', fallbackError);
            this.products = [];
                this.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.', 'error');
            }
        }
    }

    addDebugAdminButton() {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        const debugButton = document.createElement('button');
        debugButton.textContent = 'üîß –í–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (–æ—Ç–ª–∞–¥–∫–∞)';
        debugButton.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            background: #ff6b6b;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
            z-index: 9999;
            font-size: 12px;
        `;
        
        debugButton.onclick = () => {
            this.isAdmin = true;
            this.showAdminPanel();
            debugButton.remove();
            console.log('üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞');
        };
        
        document.body.appendChild(debugButton);
    }

    async checkAdminStatus() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            let userId = null;
            
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ user_id:');
            console.log('üåê Hostname:', window.location.hostname);
            console.log('üîó URL:', window.location.href);
            
            // 1. –ò–∑ Telegram WebApp initDataUnsafe
            if (window.Telegram && window.Telegram.WebApp) {
                const webApp = window.Telegram.WebApp;
                console.log('üì± Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω');
                console.log('üì± WebApp.initDataUnsafe:', webApp.initDataUnsafe);
                console.log('üì± WebApp.initData:', webApp.initData);
                
                if (webApp.initDataUnsafe?.user?.id) {
                    userId = webApp.initDataUnsafe.user.id.toString();
                    console.log('‚úÖ User ID –∏–∑ initDataUnsafe:', userId);
                    console.log('üë§ –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', webApp.initDataUnsafe.user);
                } else {
                    console.log('‚ùå User ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ initDataUnsafe');
                    console.log('üîç initDataUnsafe.user:', webApp.initDataUnsafe?.user);
                    console.log('üîç initDataUnsafe:', webApp.initDataUnsafe);
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ initData
                    if (webApp.initData) {
                        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º initData –Ω–∞–ø—Ä—è–º—É—é:', webApp.initData);
                        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å initData
                        try {
                            const params = new URLSearchParams(webApp.initData);
                            const userParam = params.get('user');
                            if (userParam) {
                                const userData = JSON.parse(userParam);
                                if (userData.id) {
                                    userId = userData.id.toString();
                                    console.log('‚úÖ User ID –Ω–∞–π–¥–µ–Ω –≤ initData:', userId);
                                }
                            }
                        } catch (e) {
                            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:', e);
                        }
                    }
                }
            } else {
                console.log('‚ùå Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                console.log('üîç window.Telegram:', window.Telegram);
            }
            
            // 2. –ò–∑ userInfo (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (!userId && this.userInfo && this.userInfo.id) {
                userId = this.userInfo.id.toString();
                console.log('‚úÖ User ID –∏–∑ userInfo:', userId);
            }
            
            // 3. –ò–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            if (!userId) {
                const urlParams = new URLSearchParams(window.location.search);
                userId = urlParams.get('user_id');
                if (userId) {
                    console.log('‚úÖ User ID –∏–∑ URL:', userId);
                }
            }
            
            // 4. –ï—Å–ª–∏ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
            if (!userId) {
                console.log('‚ö†Ô∏è User ID –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º');
                
                // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: –µ—Å–ª–∏ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ (–Ω–µ –≤ Telegram), –¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                if (!window.Telegram || !window.Telegram.WebApp) {
                    console.log('üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: –±—Ä–∞—É–∑–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞');
                    userId = '1593426947'; // –í–∞—à ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    this.isAdmin = true;
                    console.log('üëë –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ');
                    return;
                } else {
                    // –í Telegram WebApp, –Ω–æ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
                    console.log('‚ùå Telegram WebApp –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Replit –∏–ª–∏ –Ω–∞ localhost
                    const isLocalhost = window.location.hostname === 'localhost';
                    const isReplit = window.location.hostname.includes('replit.com') || 
                                    window.location.hostname.includes('replit.dev');
                    
                    if (isLocalhost || isReplit) {
                        console.log('üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: Replit/localhost –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞');
                        userId = '1593426947'; // –í–∞—à ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        this.isAdmin = true;
                        console.log('üëë –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ (Replit)');
                        return;
                    } else {
                        console.log('‚ùå –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º: –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ù–ï –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
                        this.isAdmin = false;
                        return;
                    }
                }
            }
            
            console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-—Å—Ç–∞—Ç—É—Å –¥–ª—è ID:', userId);
            
            // –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - 1593426947
            this.isAdmin = (userId === '1593426947');
            
            // –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            const isLocalhost = window.location.hostname === 'localhost';
            const isReplit = window.location.hostname.includes('replit.com') || 
                            window.location.hostname.includes('replit.dev');
            
            if (!this.isAdmin && (isLocalhost || isReplit)) {
                console.log('üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞');
                this.addDebugAdminButton();
            }
            
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω-—Å—Ç–∞—Ç—É—Å–∞:', this.isAdmin);
            
            if (this.isAdmin) {
                this.showAdminPanel();
                console.log('üëë –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω, ID:', userId);
            } else {
                console.log('üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, ID:', userId);
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ù–ï –¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
            this.isAdmin = false;
            console.log('üîí –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ù–ï –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏');
        }
    }

    showAdminPanel() {
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const adminNavBtn = document.getElementById('admin-nav-btn');
        if (adminNavBtn) {
            adminNavBtn.style.display = 'block';
            console.log('–ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∞');
    } else {
            console.error('–ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        const adminActions = document.getElementById('admin-actions');
        if (adminActions) {
            adminActions.style.display = 'block';
            console.log('–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
      } else {
            console.error('–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
    }

    // ===== –ù–ê–í–ò–ì–ê–¶–ò–Ø =====

    showPage(page) {
        console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', page);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.querySelectorAll('.page').forEach(p => p.style.display = 'none');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const targetPage = document.getElementById(`${page}-page`);
        if (targetPage) {
            targetPage.style.display = 'block';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        document.querySelectorAll('.nav-item').forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.page === page) {
                btn.classList.add('active');
            }
        });
        
        this.currentPage = page;
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.renderCurrentPage();
    }

    renderCurrentPage() {
        switch (this.currentPage) {
            case 'catalog':
                this.renderCatalogPage();
                break;
            case 'cart':
                this.renderCartPage();
                break;
            case 'profile':
                this.renderProfilePage();
                break;
            case 'admin':
                this.renderAdminPage();
                break;
        }
    }

    // ===== –ö–ê–¢–ê–õ–û–ì =====

    renderCatalogPage() {
        console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ç–∞–ª–æ–≥, —Ç–æ–≤–∞—Ä–æ–≤:', this.products.length);
        const container = document.getElementById('products-grid');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä products-grid –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: 2 —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—è–¥ –Ω–∞ –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–∞—Ö
        container.style.display = 'grid';
        container.style.gridTemplateColumns = 'repeat(2, 1fr)';
        container.style.gap = '0.75rem';
        
        const searchTerm = document.getElementById('search')?.value.toLowerCase() || '';
        const filteredProducts = this.products.filter(product => {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            if (!product.is_active && product.is_active !== undefined) {
                return false;
            }
            
            // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
            if (searchTerm) {
                return product.title.toLowerCase().includes(searchTerm) ||
                       product.description.toLowerCase().includes(searchTerm);
            }
            
            return true;
        });
        
        console.log('üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', filteredProducts.length);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç
        if (filteredProducts.length === 0) {
            if (searchTerm) {
                container.innerHTML = `
                    <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 2rem;">
                        <p>üîç –¢–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                        <button class="btn btn-outline" onclick="document.getElementById('search').value=''; window.mobileShopApp.renderCatalogPage();">
                            –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
                        </button>
                    </div>
                `;
            } else {
                container.innerHTML = `
                    <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 2rem;">
                        <p>üì¶ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                        ${this.isAdmin ? `
                            <button class="btn btn-primary" onclick="showAddProductModal()">
                                ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
                            </button>
                        ` : ''}
                    </div>
                `;
            }
            return;
        }
        
        container.innerHTML = filteredProducts.map(product => this.renderProductCard(product)).join('');
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        this.setupProductEventListeners();
    }

    renderProductCard(product) {
        const photoUrl = product.photo || '/webapp/static/uploads/default.jpg';
        const isActive = product.is_active !== false;
        
        return `
            <div class="product-card ${!isActive ? 'inactive' : ''}" data-product-id="${product.id}">
                <div class="product-image">
                    <img src="${photoUrl}" alt="${product.title || '–¢–æ–≤–∞—Ä'}" onerror="this.src='/webapp/static/uploads/default.jpg'">
                    ${!isActive ? '<div class="product-status-badge inactive">–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</div>' : ''}
                </div>
                <div class="product-info">
                    <h3 class="product-title">${product.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                    <p class="product-description">${product.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                    <div class="product-price">${this.formatPrice(product.price || 0)}</div>
                    
                    ${product.sizes && product.sizes.length > 0 ? `
                        <select class="size-select" data-product-id="${product.id}">
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä</option>
                            ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
        </select>
                    ` : ''}
                    
                    <div class="qty-controls">
                        <button class="qty-btn qty-decrease" data-product-id="${product.id}" ${!isActive ? 'disabled' : ''}>-</button>
                        <span class="qty-display" data-product-id="${product.id}">0</span>
                        <button class="qty-btn qty-increase" data-product-id="${product.id}" ${!isActive ? 'disabled' : ''}>+</button>
                    </div>
                    
                    <div class="product-actions">
                        <button class="btn btn-primary add-to-cart" data-product-id="${product.id}" ${!isActive ? 'disabled' : ''}>
                            üõí –í –∫–æ—Ä–∑–∏–Ω—É
                        </button>
                        <button class="btn btn-outline quick-buy" data-product-id="${product.id}" ${!isActive ? 'disabled' : ''}>
                            ‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø–æ–∫—É–ø–∫–∞
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    // ===== –ö–û–†–ó–ò–ù–ê =====

    renderCartPage() {
        const container = document.getElementById('cart-items');
        const totalElement = document.getElementById('cart-total');
        
        if (!container || !totalElement) return;
        
        if (this.cart.length === 0) {
            container.innerHTML = '<p class="empty-cart">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>';
            totalElement.textContent = '0 ‚ÇΩ';
            return;
        }
        
        container.innerHTML = this.cart.map(item => this.renderCartItem(item)).join('');
        totalElement.textContent = this.formatPrice(this.getCartTotal());
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
        this.setupCartEventListeners();
    }

    renderCartItem(item) {
        const product = this.products.find(p => p.id === item.productId);
        if (!product) return '';
        
        return `
            <div class="cart-item" data-product-id="${item.productId}">
                <div class="cart-item-image">
                    <img src="${product.photo}" alt="${product.title}">
                </div>
                <div class="cart-item-info">
                    <h4>${product.title}</h4>
                    <p>–†–∞–∑–º–µ—Ä: ${item.size || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                    <div class="cart-item-price">${this.formatPrice(product.price * item.quantity)}</div>
                </div>
                <div class="cart-item-controls">
                    <button class="qty-btn qty-decrease" data-product-id="${item.productId}">-</button>
                    <span class="qty-display">${item.quantity}</span>
                    <button class="qty-btn qty-increase" data-product-id="${item.productId}">+</button>
                    <button class="btn btn-danger btn-sm remove-item" data-product-id="${item.productId}">üóëÔ∏è</button>
                </div>
            </div>
        `;
    }

    // ===== –ü–†–û–§–ò–õ–¨ =====

    renderProfilePage() {
        // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–π, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        console.log('–†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–æ—Ñ–∏–ª—å');
    }

    // ===== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ =====

    async renderAdminPage() {
        if (!this.isAdmin) return;
        
        try {
            await this.loadAdminProducts();
            this.updateAdminStats();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:', error);
        }
    }

    async loadAdminProducts() {
        try {
            console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...');
            const url = `${this.API_BASE}/webapp/admin/products?user_id=admin`;
            console.log('üì° –ó–∞–ø—Ä–æ—Å –∫:', url);
            
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            
            console.log('üì° –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω-API:', response.status, response.statusText);
            
            if (response.ok) {
            const data = await response.json();
                console.log('üìã –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω-API:', data);
            this.adminProducts = data.products || [];
                console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞:', this.adminProducts.length);
            this.renderAdminProducts(this.adminProducts);
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞:', response.status);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ fallback
                this.adminProducts = this.products;
                this.renderAdminProducts(this.adminProducts);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞:', error);
            this.handleNetworkError(error, '–ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-—Ç–æ–≤–∞—Ä–æ–≤');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ fallback
            this.adminProducts = this.products;
            this.renderAdminProducts(this.adminProducts);
        }
    }

    renderAdminProducts(products) {
        const container = document.getElementById('admin-products-list');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä admin-products-list –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–≤–∞—Ä—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:', products.length);
        
        if (products.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <p>üì¶ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                    <button class="btn btn-primary" onclick="showAddProductModal()">
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
                    </button>
                </div>
            `;
            return;
        }
        
        container.innerHTML = products.map(product => this.renderAdminProductItem(product)).join('');
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–¥–º–∏–Ω-—Ç–æ–≤–∞—Ä–æ–≤
        this.setupAdminProductEventListeners();
    }

    renderAdminProductItem(product) {
        const photoUrl = product.photo || '/webapp/static/uploads/default.jpg';
        const isActive = product.is_active !== false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–µ–Ω
        
        return `
            <div class="admin-product-item" data-product-id="${product.id}">
                <div class="admin-product-image">
                    <img src="${photoUrl}" alt="${product.title}" onerror="this.src='/webapp/static/uploads/default.jpg'">
                </div>
                <div class="admin-product-info">
                    <h4>${product.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h4>
                    <p>${product.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                    <div class="admin-product-price">${this.formatPrice(product.price || 0)}</div>
                    <div class="admin-product-sizes">
                        –†–∞–∑–º–µ—Ä—ã: ${product.sizes && product.sizes.length > 0 ? product.sizes.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
                    </div>
                    <div class="admin-product-status ${isActive ? 'active' : 'inactive'}">
                        ${isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
        </div>
      </div>
                <div class="admin-product-actions">
                    ${isActive ? `
                        <button class="btn btn-primary btn-sm" onclick="editProduct(${product.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                        <button class="btn btn-danger btn-sm" onclick="deleteProduct(${product.id})" title="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                    ` : `
                        <button class="btn btn-secondary btn-sm" disabled title="–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω">
                            ‚ùå –£–¥–∞–ª–µ–Ω
                        </button>
                        <button class="btn btn-warning btn-sm" onclick="restoreProduct(${product.id})" title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä">
                            üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                        </button>
                    `}
                </div>
      </div>
    `;
    }

    updateAdminStats() {
        const productsCount = document.getElementById('products-count');
        const ordersCount = document.getElementById('orders-count');
        
        if (productsCount) {
            productsCount.textContent = this.products.length;
        }
        
        if (ordersCount) {
            ordersCount.textContent = '0'; // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        }
    }

    // ===== –ö–û–†–ó–ò–ù–ê - –õ–û–ì–ò–ö–ê =====

    addToCart(productId, size = null) {
        const product = this.products.find(p => p.id === productId);
        if (!product) return;
        
        const existingItem = this.cart.find(item => 
            item.productId === productId && item.size === size
        );
        
        if (existingItem) {
            existingItem.quantity += 1;
        } else {
            this.cart.push({
                productId: productId,
                quantity: 1,
                size: size
            });
        }
        
        this.updateCartBadge();
        this.saveCart();
        
        if (this.currentPage === 'cart') {
            this.renderCartPage();
        }
        
        console.log('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É:', product.title);
    }

    removeFromCart(productId, size = null) {
        const itemIndex = this.cart.findIndex(item => 
            item.productId === productId && item.size === size
        );
        
        if (itemIndex !== -1) {
            this.cart.splice(itemIndex, 1);
            this.updateCartBadge();
            this.saveCart();
            
            if (this.currentPage === 'cart') {
                this.renderCartPage();
            }
        }
    }

    updateQuantity(productId, size = null, quantity) {
        const item = this.cart.find(item => 
            item.productId === productId && item.size === size
        );
        
        if (item) {
            if (quantity <= 0) {
                this.removeFromCart(productId, size);
            } else {
                item.quantity = quantity;
                this.updateCartBadge();
                this.saveCart();
                
                if (this.currentPage === 'cart') {
                    this.renderCartPage();
                }
            }
        }
    }

    getCartTotal() {
        return this.cart.reduce((total, item) => {
            const product = this.products.find(p => p.id === item.productId);
            return total + (product ? product.price * item.quantity : 0);
        }, 0);
    }

    clearCart() {
        this.cart = [];
        this.updateCartBadge();
        this.saveCart();
        this.renderCartPage();
    }

    updateCartBadge() {
        // –£–±—Ä–∞–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ –∫–æ—Ä–∑–∏–Ω—ã –≤ —à–∞–ø–∫–µ
        // –ö–æ—Ä–∑–∏–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    }

    // ===== –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê =====

    async checkout() {
        if (this.cart.length === 0) {
            alert('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
    return;
  }
        
        try {
            const orderData = {
                action: 'order',
                items: this.cart,
                total: this.getCartTotal()
            };
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç
            if (window.Telegram && window.Telegram.WebApp) {
                window.Telegram.WebApp.sendData(JSON.stringify(orderData));
            } else {
                // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', orderData);
                alert('–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)');
            }
            
            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            this.clearCart();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
        }
    }

    // ===== –ê–î–ú–ò–ù-–§–£–ù–ö–¶–ò–ò =====

    showAddProductModal() {
        console.log('‚ûï –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞, isAdmin:', this.isAdmin);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
        if (!this.isAdmin) {
            console.log('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –Ω–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤');
            this.showNotification('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', 'error');
            return;
        }
        
        this.editingProduct = null;
        document.getElementById('product-modal-title').textContent = '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('product-form').reset();
        document.getElementById('photo-preview').style.display = 'none';
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
        const previewImg = document.getElementById('preview-img');
        if (previewImg) {
            previewImg.src = '';
        }
        
        this.showModal('product-modal');
        console.log('‚úÖ –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞');
    }

    async editProduct(productId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
        if (!this.isAdmin) {
            console.log('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –Ω–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤');
            this.showNotification('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', 'error');
            return;
        }
        
        console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä:', productId);
        console.log('üîç –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', this.products.length);
        console.log('üîç –î–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω-—Ç–æ–≤–∞—Ä–æ–≤:', this.adminProducts?.length || 0);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω-—Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!this.adminProducts || this.adminProducts.length === 0) {
            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω-—Ç–æ–≤–∞—Ä—ã...');
            await this.loadAdminProducts();
        }
        
        // –ò—â–µ–º —Ç–æ–≤–∞—Ä —Å–Ω–∞—á–∞–ª–∞ –≤ adminProducts, –ø–æ—Ç–æ–º –≤ products
        let product = this.adminProducts?.find(p => p.id === productId);
        if (!product) {
            product = this.products.find(p => p.id === productId);
        }
        
        if (!product) {
            console.error('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', productId);
            console.log('üîç –°–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä–æ–≤:', this.products.map(p => p.id));
            console.log('üîç –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω-—Ç–æ–≤–∞—Ä–æ–≤:', this.adminProducts?.map(p => p.id) || []);
            this.showNotification('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!', 'error');
            return;
        }
        
        console.log('üì¶ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', product);
        
        this.editingProduct = product;
        document.getElementById('product-modal-title').textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('product-title').value = product.title || '';
        document.getElementById('product-description').value = product.description || '';
        document.getElementById('product-price').value = product.price || '';
        document.getElementById('product-sizes').value = product.sizes ? product.sizes.join(', ') : '';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        const photoPreview = document.getElementById('photo-preview');
        const previewImg = document.getElementById('preview-img');
        if (product.photo && product.photo !== '/webapp/static/uploads/default.jpg') {
            previewImg.src = `${this.API_BASE}${product.photo}`;
            photoPreview.style.display = 'block';
        } else {
            photoPreview.style.display = 'none';
        }
        
        this.showModal('product-modal');
        console.log('‚úÖ –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∞');
    }

    async restoreProduct(productId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
        if (!this.isAdmin) {
            console.log('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –Ω–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤');
            this.showNotification('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', 'error');
            return;
        }
        
        console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä:', productId);
        
        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä #${productId}?`)) {
            console.log('‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            return;
        }
        
        try {
            const response = await fetch(`${this.API_BASE}/webapp/admin/products/${productId}?user_id=admin`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    is_active: true
                })
            });
            
            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ –¢–æ–≤–∞—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);
                
                this.showNotification(`–¢–æ–≤–∞—Ä #${productId} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`, 'success');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await this.fetchProducts();
                await this.loadAdminProducts();
                this.updateAdminStats();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –µ—Å–ª–∏ –º—ã –Ω–∞ –Ω–µ–º
                if (this.currentPage === 'catalog') {
                    this.renderCatalogPage();
                }
                
            } else {
                const errorData = await response.json();
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', errorData);
                this.showNotification(`–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${errorData.error}`, 'error');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'error');
        }
    }

    async deleteProduct(productId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
        if (!this.isAdmin) {
            console.log('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –Ω–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤');
            this.showNotification('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', 'error');
            return;
        }
        
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä:', productId);
        console.log('üîç –¢–∏–ø productId:', typeof productId);
        console.log('üîç this.isAdmin:', this.isAdmin);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω-—Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!this.adminProducts || this.adminProducts.length === 0) {
            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω-—Ç–æ–≤–∞—Ä—ã...');
            await this.loadAdminProducts();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ productId –≤–∞–ª–∏–¥–Ω—ã–π
        if (!productId || productId === 'undefined' || productId === 'null') {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞:', productId);
            this.showNotification('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞', 'error');
            return;
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const numericId = parseInt(productId);
        if (isNaN(numericId)) {
            console.error('‚ùå ID —Ç–æ–≤–∞—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º:', productId);
            this.showNotification('–û—à–∏–±–∫–∞: ID —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º', 'error');
            return;
        }
        
        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä #${numericId}?`)) {
            console.log('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            return;
        }
        
        try {
            console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ #' + numericId);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            const response = await fetch(`${this.API_BASE}/webapp/admin/products/${numericId}?user_id=admin`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
                signal: controller.signal,
            });
            
            clearTimeout(timeoutId);
            console.log('üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, response.statusText);
            
            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                this.showNotification(`–¢–æ–≤–∞—Ä #${numericId} —É–¥–∞–ª–µ–Ω!`, 'success');
                
                // –°–†–ê–ó–£ —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                const productCard = document.querySelector(`[data-product-id="${numericId}"]`);
                if (productCard) {
                    productCard.style.opacity = '0';
                    productCard.style.transform = 'scale(0.8)';
                    productCard.style.transition = 'all 0.3s ease';
                    setTimeout(() => productCard.remove(), 300);
                }
                
                // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
                this.products = this.products.filter(p => p.id !== numericId);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                this.updateAdminStats();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –µ—Å–ª–∏ –º—ã –Ω–∞ –Ω–µ–º (–±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)
                if (this.currentPage === 'catalog') {
                    this.renderCatalogPage();
                }
                
            } else {
                let errorMessage = `–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`;
                try {
                    const errorData = await response.json();
                    errorMessage = errorData.detail || errorData.message || errorMessage;
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response.status, errorData);
                } catch (e) {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞');
                }
                
                this.showNotification(
                    `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${errorMessage}`, 
                    'error'
                );
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
            
            if (error.name === 'AbortError') {
                this.showNotification('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞', 'error');
            } else {
                this.handleNetworkError(error, '–ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
            }
        }
    }

    async saveProduct(formData) {
        try {
            console.log('üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...');
            console.log('üìã –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', Object.fromEntries(formData.entries()));
            
            const url = this.editingProduct 
                ? `${this.API_BASE}/webapp/admin/products/${this.editingProduct.id}?user_id=admin`
                : `${this.API_BASE}/webapp/admin/products?user_id=admin`;
            
            const method = this.editingProduct ? 'PUT' : 'POST';
            
            console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', method, url);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –∏ retry –ª–æ–≥–∏–∫—É
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            const response = await fetch(url, {
                method: method,
                body: formData,
                signal: controller.signal,
                // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º Content-Type, –±—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å boundary –¥–ª—è FormData
            });
            
            clearTimeout(timeoutId);
            console.log('üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, response.statusText);
            
            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ –¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                this.showNotification(
                    this.editingProduct ? '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!' : '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!', 
                    'success'
                );
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await this.fetchProducts();
                await this.loadAdminProducts();
                this.updateAdminStats();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –µ—Å–ª–∏ –º—ã –Ω–∞ –Ω–µ–º
                if (this.currentPage === 'catalog') {
                    this.renderCatalogPage();
                }
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                this.hideModal('product-modal');
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                document.getElementById('product-form').reset();
                document.getElementById('photo-preview').style.display = 'none';
                
            } else {
                let errorMessage = `–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`;
                try {
                    const errorData = await response.json();
                    errorMessage = errorData.detail || errorData.message || errorMessage;
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response.status, errorData);
                } catch (e) {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞');
                }
                
                this.showNotification(
                    `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${errorMessage}`, 
                    'error'
                );
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
            
            if (error.name === 'AbortError') {
                this.showNotification('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞', 'error');
            } else {
                this.handleNetworkError(error, '–ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
            }
        }
    }

    // ===== –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê =====

    showModal(modalId) {
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ:', modalId);
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('show');
            modal.style.display = 'flex';
            console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ:', modalId);
        } else {
            console.error('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', modalId);
        }
    }

    hideModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('show');
            modal.style.display = 'none';
        }
    }

    contactAdmin() {
        if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.openTelegramLink('https://t.me/your_bot_username');
        } else {
            alert('–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ Telegram: @your_bot_username');
        }
    }

    // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====

    setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', (e) => {
                const page = e.currentTarget.dataset.page;
                this.showPage(page);
            });
        });

        // –ü–æ–∏—Å–∫
        const searchInput = document.getElementById('search');
        if (searchInput) {
            searchInput.addEventListener('input', () => {
                this.renderCatalogPage();
            });
        }

        // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        const clearCartBtn = document.getElementById('clear-cart');
        if (clearCartBtn) {
            clearCartBtn.addEventListener('click', () => {
                if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?')) {
                    this.clearCart();
                }
            });
        }

        // –§–æ—Ä–º–∞ —Ç–æ–≤–∞—Ä–∞
        const productForm = document.getElementById('product-form');
        if (productForm) {
            productForm.addEventListener('submit', (e) => {
                e.preventDefault();
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
                if (!this.validateProductForm(e.target)) {
                    return;
                }
                
                const formData = new FormData(e.target);
                this.saveProduct(formData);
            });
        }

        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ
        const photoInput = document.getElementById('product-photo');
        if (photoInput) {
            photoInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const preview = document.getElementById('photo-preview');
                        const img = document.getElementById('preview-img');
                        img.src = e.target.result;
                        preview.style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                }
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.querySelectorAll('.modal-close').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const modal = e.target.closest('.modal');
                if (modal) {
                    this.hideModal(modal.id);
                }
            });
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.hideModal(modal.id);
                }
            });
        });
    }

    setupProductEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        document.querySelectorAll('.qty-increase, .qty-decrease').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const productId = parseInt(e.target.dataset.productId);
                const isIncrease = e.target.classList.contains('qty-increase');
                const qtyEl = document.querySelector(`[data-product-id="${productId}"].qty-display`);
                
                if (qtyEl) {
                    let quantity = parseInt(qtyEl.textContent) || 0;
                    quantity += isIncrease ? 1 : -1;
                    quantity = Math.max(0, quantity);
                    qtyEl.textContent = quantity;
                }
            });
        });

        // –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
        document.querySelectorAll('.add-to-cart').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const productId = parseInt(e.target.dataset.productId);
                const sizeSelect = document.querySelector(`[data-product-id="${productId}"].size-select`);
                const size = sizeSelect ? sizeSelect.value : null;
                
                if (sizeSelect && !size) {
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä');
                    return;
                }
                
                this.addToCart(productId, size);
            });
        });

        // –ë—ã—Å—Ç—Ä–∞—è –ø–æ–∫—É–ø–∫–∞
        document.querySelectorAll('.quick-buy').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const productId = parseInt(e.target.dataset.productId);
                const sizeSelect = document.querySelector(`[data-product-id="${productId}"].size-select`);
                const size = sizeSelect ? sizeSelect.value : null;
                
                if (sizeSelect && !size) {
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä');
                    return;
                }
                
                this.addToCart(productId, size);
                this.showPage('cart');
            });
        });
    }

    setupCartEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        document.querySelectorAll('.qty-increase, .qty-decrease').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const productId = parseInt(e.target.dataset.productId);
                const isIncrease = e.target.classList.contains('qty-increase');
                const qtyEl = document.querySelector(`[data-product-id="${productId}"].qty-display`);
                
                if (qtyEl) {
                    let quantity = parseInt(qtyEl.textContent) || 0;
                    quantity += isIncrease ? 1 : -1;
                    quantity = Math.max(0, quantity);
                    
                    const item = this.cart.find(item => item.productId === productId);
                    if (item) {
                        this.updateQuantity(productId, item.size, quantity);
                    }
                }
            });
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        document.querySelectorAll('.remove-item').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const productId = parseInt(e.target.dataset.productId);
                const item = this.cart.find(item => item.productId === productId);
                if (item) {
                    this.removeFromCart(productId, item.size);
                }
            });
        });
    }

    setupAdminProductEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-—Ç–æ–≤–∞—Ä–æ–≤ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —á–µ—Ä–µ–∑ onclick
        // –ù–æ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–¥–µ—Å—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–¥–º–∏–Ω-—Ç–æ–≤–∞—Ä–æ–≤');
    }

    // ===== –£–¢–ò–õ–ò–¢–´ =====

    formatPrice(price) {
        return `${price.toFixed(2)} ‚ÇΩ`;
    }

    saveCart() {
        localStorage.setItem('shop_cart', JSON.stringify(this.cart));
    }

    loadCart() {
        try {
            const saved = localStorage.getItem('shop_cart');
            if (saved) {
                this.cart = JSON.parse(saved);
                this.updateCartBadge();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
            this.cart = [];
        }
    }

    // ===== –í–ê–õ–ò–î–ê–¶–ò–Ø =====

    validateProductForm(form) {
        console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Ç–æ–≤–∞—Ä–∞...');
        
        const title = form.querySelector('#product-title').value.trim();
        const description = form.querySelector('#product-description').value.trim();
        const price = parseFloat(form.querySelector('#product-price').value);
        const photo = form.querySelector('#product-photo').files[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        if (!title) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 'error');
            form.querySelector('#product-title').focus();
            return false;
        }
        
        if (title.length < 2) {
            this.showNotification('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞', 'error');
            form.querySelector('#product-title').focus();
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if (!description) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 'error');
            form.querySelector('#product-description').focus();
            return false;
        }
        
        if (description.length < 10) {
            this.showNotification('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
            form.querySelector('#product-description').focus();
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É
        if (isNaN(price) || price <= 0) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–±–æ–ª—å—à–µ 0)', 'error');
            form.querySelector('#product-price').focus();
            return false;
        }
        
        if (price > 1000000) {
            this.showNotification('–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1,000,000 ‚ÇΩ', 'error');
            form.querySelector('#product-price').focus();
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)
        if (!this.editingProduct && !photo) {
            this.showNotification('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞', 'error');
            form.querySelector('#product-photo').focus();
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ
        if (photo && photo.size > 5 * 1024 * 1024) { // 5MB
            this.showNotification('–†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB', 'error');
            form.querySelector('#product-photo').focus();
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ
        if (photo && !photo.type.startsWith('image/')) {
            this.showNotification('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
            form.querySelector('#product-photo').focus();
            return false;
        }
        
        console.log('‚úÖ –§–æ—Ä–º–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é');
        return true;
    }

    // ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï =====

    setupAutoRefresh() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.autoRefreshInterval = setInterval(async () => {
            try {
                console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
                await this.fetchProducts();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (this.currentPage === 'catalog') {
                    this.renderCatalogPage();
                } else if (this.currentPage === 'admin') {
                    await this.loadAdminProducts();
                    this.updateAdminStats();
                }
                
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            }
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥
        
        console.log('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)');
    }

    stopAutoRefresh() {
        if (this.autoRefreshInterval) {
            clearInterval(this.autoRefreshInterval);
            this.autoRefreshInterval = null;
            console.log('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
    }

    // ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====

    showNotification(message, type = 'info') {
        console.log(`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [${type}]:`, message);
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-icon">
                    ${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è'}
                </span>
                <span class="notification-message">${message}</span>
                <button class="notification-close" onclick="this.parentElement.parentElement.remove()">&times;</button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!document.getElementById('notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                .notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 10000;
                    max-width: 300px;
                    padding: 12px 16px;
                    border-radius: 8px;
                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                    animation: slideIn 0.3s ease-out;
                    font-size: 14px;
                    line-height: 1.4;
                }
                
                .notification-success {
                    background: #d4edda;
                    color: #155724;
                    border: 1px solid #c3e6cb;
                }
                
                .notification-error {
                    background: #f8d7da;
                    color: #721c24;
                    border: 1px solid #f5c6cb;
                }
                
                .notification-info {
                    background: #d1ecf1;
                    color: #0c5460;
                    border: 1px solid #bee5eb;
                }
                
                .notification-content {
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }
                
                .notification-icon {
                    font-size: 16px;
                    flex-shrink: 0;
                }
                
                .notification-message {
                    flex: 1;
                }
                
                .notification-close {
                    background: none;
                    border: none;
                    font-size: 18px;
                    cursor: pointer;
                    color: inherit;
                    opacity: 0.7;
                    padding: 0;
                    margin-left: 8px;
                }
                
                .notification-close:hover {
                    opacity: 1;
                }
                
                @keyframes slideIn {
                    from {
                        transform: translateX(100%);
                        opacity: 0;
                    }
                    to {
                        transform: translateX(0);
                        opacity: 1;
                    }
                }
            `;
            document.head.appendChild(style);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentElement) {
                notification.style.animation = 'slideIn 0.3s ease-out reverse';
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                    }
                }, 300);
            }
        }, 5000);
    }

    // ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö =====

    handleNetworkError(error, context = '') {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ ${context}:`, error);
        
        let message = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º';
        
        if (error.name === 'TypeError' && error.message.includes('fetch')) {
            message = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É';
        } else if (error.name === 'TypeError' && error.message.includes('Load failed')) {
            message = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
        } else if (error.message.includes('404')) {
            message = '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω';
        } else if (error.message.includes('500')) {
            message = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
        } else if (error.message.includes('timeout')) {
            message = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
        }
        
        this.showNotification(`${message} ${context}`, 'error');
    }

    // ===== –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í =====

    destroy() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        this.stopAutoRefresh();
        
        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.removeEventListener('beforeunload', this.destroy);
        
        console.log('‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è onclick
function showAddProductModal() {
    if (window.mobileShopApp) {
        window.mobileShopApp.showAddProductModal();
    }
}

function editProduct(productId) {
    console.log('üîó –í—ã–∑–æ–≤ editProduct –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:', productId);
    console.log('üîç window.mobileShopApp:', window.mobileShopApp);
    
    if (window.mobileShopApp) {
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º editProduct');
        window.mobileShopApp.editProduct(productId);
    } else {
        console.error('‚ùå mobileShopApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
        
        try {
            window.mobileShopApp = new MobileShopApp();
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤—ã–∑–æ–≤');
            setTimeout(() => {
                window.mobileShopApp.editProduct(productId);
            }, 500); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            alert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        }
    }
}

function restoreProduct(productId) {
    console.log('üîó –í—ã–∑–æ–≤ restoreProduct –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:', productId);
    console.log('üîç window.mobileShopApp:', window.mobileShopApp);
    
    if (window.mobileShopApp) {
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º restoreProduct');
        window.mobileShopApp.restoreProduct(productId);
    } else {
        console.error('‚ùå mobileShopApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
        
        try {
            window.mobileShopApp = new MobileShopApp();
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤—ã–∑–æ–≤');
            setTimeout(() => {
                window.mobileShopApp.restoreProduct(productId);
            }, 500);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            alert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        }
    }
}

function deleteProduct(productId) {
    console.log('üîó –í—ã–∑–æ–≤ deleteProduct –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:', productId);
    console.log('üîç window.mobileShopApp:', window.mobileShopApp);
    
    if (window.mobileShopApp) {
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º deleteProduct');
        window.mobileShopApp.deleteProduct(productId);
    } else {
        console.error('‚ùå mobileShopApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
        
        try {
            window.mobileShopApp = new MobileShopApp();
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤—ã–∑–æ–≤');
            window.mobileShopApp.deleteProduct(productId);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            alert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        }
    }
}

function showModal(modalId) {
    if (window.mobileShopApp) {
        window.mobileShopApp.showModal(modalId);
    }
}

function hideModal(modalId) {
    if (window.mobileShopApp) {
        window.mobileShopApp.hideModal(modalId);
    }
}

function clearCart() {
    if (window.mobileShopApp) {
        window.mobileShopApp.clearCart();
    }
}

function checkout() {
    if (window.mobileShopApp) {
        window.mobileShopApp.checkout();
    }
}

function contactAdmin() {
    if (window.mobileShopApp) {
        window.mobileShopApp.contactAdmin();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    try {
    window.mobileShopApp = new MobileShopApp();
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        console.log('üîç mobileShopApp:', window.mobileShopApp);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ' + error.message);
    }
});

"""
–ß–∏—Å—Ç—ã–π FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è Telegram WebApp –º–∞–≥–∞–∑–∏–Ω–∞
"""

from fastapi import FastAPI, UploadFile, File, HTTPException, Request, Depends, Form
from fastapi.responses import FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import os
import json
from pathlib import Path
from typing import List, Dict, Any
import logging
from datetime import datetime
from pydantic import BaseModel, ValidationError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from models import Product, OrderCreate, Order
from logger_config import setup_logging, bot_logger
from database import db

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging(log_level=os.getenv("LOG_LEVEL", "INFO"))
logger = bot_logger.logger

app = FastAPI(
    title="Telegram Shop WebApp API",
    description="API –¥–ª—è Telegram WebApp –º–∞–≥–∞–∑–∏–Ω–∞",
    version="2.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

WEBAPP_DIR = os.path.join(os.path.dirname(__file__), 'webapp')
UPLOADS_DIR = os.path.join(WEBAPP_DIR, 'uploads')
Path(UPLOADS_DIR).mkdir(parents=True, exist_ok=True)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount('/webapp/static', StaticFiles(directory=WEBAPP_DIR), name='webapp_static')

# ======================
# üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ======================

def format_price(price: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
    return f"{price:.2f} ‚ÇΩ"

def is_admin(user_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id_str = str(user_id)
    
    # –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞
    if user_id_str == "1593426947":
        return True
    
    try:
        with open('webapp/admins.json', 'r', encoding='utf-8') as f:
            admins_data = json.load(f)
            return user_id_str in admins_data.get('admins', [])
    except:
        return False

# ======================
# üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
# ======================

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return FileResponse(os.path.join(WEBAPP_DIR, 'index.html'))

@app.get("/webapp/")
async def webapp():
    """WebApp –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return FileResponse(os.path.join(WEBAPP_DIR, 'index.html'))

# ======================
# üîπ API –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
# ======================

@app.get("/webapp/products.json")
async def get_products():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        products = db.get_products()
        
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã
        if not products:
            sample_products = [
                {
                    "id": 1,
                    "title": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Nike Air Max",
                    "description": "–£–¥–æ–±–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è —Å–ø–æ—Ä—Ç–∞ –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Å–∫–∏",
                    "price": 8999.0,
                    "sizes": ["40", "41", "42", "43", "44"],
                    "photo": "/webapp/static/uploads/sample1.jpg",
                    "is_active": True
                },
                {
                    "id": 2,
                    "title": "–î–∂–∏–Ω—Å—ã Levis 501",
                    "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã –ø—Ä—è–º–æ–≥–æ –∫—Ä–æ—è",
                    "price": 5999.0,
                    "sizes": ["28", "30", "32", "34", "36"],
                    "photo": "/webapp/static/uploads/sample2.jpg",
                    "is_active": True
                },
                {
                    "id": 3,
                    "title": "–§—É—Ç–±–æ–ª–∫–∞ Basic",
                    "description": "–ú—è–≥–∫–∞—è —Ö–ª–æ–ø–∫–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞",
                    "price": 1999.0,
                    "sizes": ["S", "M", "L", "XL"],
                    "photo": "/webapp/static/uploads/sample3.jpg",
                    "is_active": True
                }
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            for product_data in sample_products:
                product = Product(**product_data)
                await db.create_product(product)
            
            products = db.get_products()
        
        return {"products": products}
        
    except Exception as e:
        logger.error("Error getting products", error=str(e))
        return {"products": []}

@app.get("/webapp/admins.json")
async def get_admins():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    try:
        with open('webapp/admins.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {"admins": []}

# ======================
# üîπ API –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
# ======================

@app.post("/webapp/orders")
async def create_order(order_data: OrderCreate):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_id = await db.create_order("webapp_user", order_data)
        
        return {
            "success": True,
            "order_id": order_id,
            "message": "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
        }
        
    except Exception as e:
        logger.error("Error creating order", error=str(e))
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

# ======================
# üîπ –ê–¥–º–∏–Ω API
# ======================

@app.get("/webapp/admin/products")
async def get_admin_products(user_id: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        if not is_admin(user_id):
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        products = db.get_products(include_inactive=True)
        return {"products": products}
        
    except Exception as e:
        logger.error("Error getting admin products", error=str(e))
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")

@app.post("/webapp/admin/products")
async def create_product(
    title: str = Form(...),
    description: str = Form(...),
    price: float = Form(...),
    sizes: str = Form(""),
    photo: UploadFile = File(None),
    user_id: str = Form(None)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä"""
    try:
        if not is_admin(user_id):
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        sizes_list = [s.strip() for s in sizes.split(',') if s.strip()] if sizes else []
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photo_url = None
        if photo:
            filename = f"product_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{photo.filename}"
            file_path = os.path.join(UPLOADS_DIR, filename)
            
            with open(file_path, "wb") as buffer:
                content = await photo.read()
                buffer.write(content)
            
            photo_url = f"/webapp/static/uploads/{filename}"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        product_data = Product(
            title=title,
            description=description,
            price=price,
            sizes=sizes_list,
            photo=photo_url or "/webapp/static/uploads/default.jpg",
            is_active=True
        )
        
        product_id = await db.create_product(product_data)
        
        return {
            "success": True,
            "product_id": product_id,
            "message": "–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
        }
        
    except Exception as e:
        logger.error("Error creating product", error=str(e))
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

@app.put("/webapp/admin/products/{product_id}")
async def update_product(
    product_id: int,
    title: str = Form(...),
    description: str = Form(...),
    price: float = Form(...),
    sizes: str = Form(""),
    photo: UploadFile = File(None),
    user_id: str = Form(None)
):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"""
    try:
        if not is_admin(user_id):
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        sizes_list = [s.strip() for s in sizes.split(',') if s.strip()] if sizes else []
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        photo_url = None
        if photo:
            filename = f"product_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{photo.filename}"
            file_path = os.path.join(UPLOADS_DIR, filename)
            
            with open(file_path, "wb") as buffer:
                content = await photo.read()
                buffer.write(content)
            
            photo_url = f"/webapp/static/uploads/{filename}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        success = await db.update_product(
            product_id,
            title=title,
            description=description,
            price=price,
            sizes=sizes_list,
            photo=photo_url
        )
        
        if success:
            return {"success": True, "message": "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}
        else:
            raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except Exception as e:
        logger.error("Error updating product", error=str(e))
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

@app.delete("/webapp/admin/products/{product_id}")
async def delete_product(product_id: int, user_id: str = None):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å)"""
    try:
        if not is_admin(user_id):
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        success = await db.update_product_status(product_id, False)
        
        if success:
            return {"success": True, "message": "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}
        else:
            raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except Exception as e:
        logger.error("Error deleting product", error=str(e))
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

# ======================
# üîπ –°—Ç–∞—Ç—É—Å –∏ –º–µ—Ç—Ä–∏–∫–∏
# ======================

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        products_count = len(db.get_products())
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "products_count": products_count
        }
    except Exception as e:
        logger.error("Health check failed", error=str(e))
        return {"status": "unhealthy", "error": str(e)}

@app.get("/metrics")
async def get_metrics():
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        products = db.get_products()
        orders = db.get_all_orders()
        
        return {
            "products_count": len(products),
            "orders_count": len(orders),
            "total_revenue": sum(order.get('total_amount', 0) for order in orders),
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error("Error getting metrics", error=str(e))
        return {"error": str(e)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

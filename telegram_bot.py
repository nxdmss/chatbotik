#!/usr/bin/env python3
"""
ü§ñ PROFESSIONAL TELEGRAM BOT
============================
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏
—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import asyncio
import json
import os
import sqlite3
from datetime import datetime
from typing import List, Dict, Any
from pathlib import Path

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode
import requests

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'http://localhost:8000')
DATABASE_PATH = "shop.db"

# –ó–∞–≥—Ä—É–∑–∫–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def load_admin_ids():
    """–ó–∞–≥—Ä—É–∑–∫–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    admin_ids = []
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    admin_ids_env = os.getenv('ADMIN_IDS', '')
    if admin_ids_env:
        try:
            admin_ids = [int(x.strip()) for x in admin_ids_env.split(',') if x.strip()]
        except ValueError:
            pass
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
    if not admin_ids:
        admins_file = Path(__file__).parent / 'webapp' / 'admins.json'
        if admins_file.exists():
            try:
                with open(admins_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    admin_ids = [int(x) for x in data.get('admins', [])]
            except (json.JSONDecodeError, ValueError) as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ admins.json: {e}")
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à ID
    if not admin_ids:
        admin_ids = [1593426947]
    
    print(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {admin_ids}")
    return admin_ids

ADMIN_IDS = load_admin_ids()

class TelegramBot:
    def __init__(self):
        self.application = None
        self.webapp_url = WEBAPP_URL
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        keyboard = [
            [InlineKeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=self.webapp_url))],
            [InlineKeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data='catalog')],
            [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data='contact')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω! 

üõçÔ∏è **–£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:**
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É –∏ –≥–∞–¥–∂–µ—Ç—ã
‚Ä¢ –û–¥–µ–∂–¥—É –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã  
‚Ä¢ –ö–Ω–∏–≥–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ

‚ú® **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω!
        """
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/catalog - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
/orders - –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤
/contact - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

üõçÔ∏è **–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:**
1. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã
3. –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
4. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑

‚ùì **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?**
–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

    async def catalog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ API
            response = requests.get(f"{self.webapp_url}/api/products")
            if response.status_code == 200:
                products = response.json()
                
                if not products:
                    await update.message.reply_text("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ!")
                    return
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
                catalog_text = "üõçÔ∏è **–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:**\n\n"
                
                for i, product in enumerate(products[:5]):
                    price = f"{product['price']:,} ‚ÇΩ".replace(',', ' ')
                    catalog_text += f"{i+1}. **{product['title']}**\n"
                    catalog_text += f"   üí∞ {price}\n"
                    if product.get('description'):
                        catalog_text += f"   üìù {product['description'][:50]}...\n"
                    catalog_text += "\n"
                
                if len(products) > 5:
                    catalog_text += f"... –∏ –µ—â–µ {len(products) - 5} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
                
                catalog_text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥!"
                
                keyboard = [
                    [InlineKeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=self.webapp_url))]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    catalog_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            print(f"Error in catalog_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def orders_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders"""
        user_id = update.effective_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect(DATABASE_PATH)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT id, total_amount, status, created_at 
                FROM orders 
                WHERE customer_phone = ? 
                ORDER BY created_at DESC 
                LIMIT 10
            """, (str(user_id),))
            
            orders = cursor.fetchall()
            conn.close()
            
            if not orders:
                keyboard = [
                    [InlineKeyboardButton("üõçÔ∏è –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑", web_app=WebAppInfo(url=self.webapp_url))]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ!",
                    reply_markup=reply_markup
                )
                return
            
            orders_text = "üìã **–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:**\n\n"
            
            for order in orders:
                order_id, total, status, created_at = order
                date_str = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
                status_emoji = {"pending": "‚è≥", "processing": "üîÑ", "shipped": "üöö", "delivered": "‚úÖ"}.get(status, "‚ùì")
                
                orders_text += f"üÜî **–ó–∞–∫–∞–∑ #{order_id}**\n"
                orders_text += f"üí∞ {total:,} ‚ÇΩ\n".replace(',', ' ')
                orders_text += f"{status_emoji} {status.title()}\n"
                orders_text += f"üìÖ {date_str}\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", web_app=WebAppInfo(url=self.webapp_url))]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                orders_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            print(f"Error in orders_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def contact_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /contact"""
        contact_text = """
üìû **–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:**

üïê **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** 9:00 - 21:00 (–ú–°–ö)

üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** +7 (999) 123-45-67
üìß **Email:** support@eshoppro.ru
üí¨ **Telegram:** @eshoppro_support

üè¢ **–ê–¥—Ä–µ—Å:**
–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123

‚ùì **–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏
‚Ä¢ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã

–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!
        """
        
        keyboard = [
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/eshoppro_support")],
            [InlineKeyboardButton("üõçÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=self.webapp_url))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            contact_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'catalog':
            await self.catalog_command(update, context)
        elif query.data == 'cart':
            keyboard = [
                [InlineKeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É", web_app=WebAppInfo(url=self.webapp_url))]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üõí **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞**\n\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        elif query.data == 'contact':
            await self.contact_command(update, context)

    async def web_app_data_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp"""
        if update.message and update.message.web_app_data:
            try:
                data = json.loads(update.message.web_app_data.data)
                print(f"üì¶ Received WebApp data: {data}")
                
                user = update.effective_user
                user_info = f"üë§ {user.first_name}"
                if user.last_name:
                    user_info += f" {user.last_name}"
                if user.username:
                    user_info += f" (@{user.username})"
                user_info += f"\nüÜî ID: {user.id}"
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
                if data.get('action') == 'order':
                    items = data.get('items', [])
                    total = data.get('total', 0)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
                    order_message = f"üõí **–ù–û–í–´–ô –ó–ê–ö–ê–ó**\n\n"
                    order_message += f"{user_info}\n\n"
                    order_message += f"üìã **–¢–æ–≤–∞—Ä—ã:**\n"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
                    try:
                        response = requests.get(f"{self.webapp_url}/api/products", timeout=5)
                        if response.status_code == 200:
                            products = {p['id']: p for p in response.json()}
                            
                            for i, item in enumerate(items, 1):
                                product_id = item.get('productId')
                                quantity = item.get('quantity', 1)
                                size = item.get('size')
                                
                                product = products.get(product_id)
                                if product:
                                    order_message += f"{i}. **{product['title']}**\n"
                                    order_message += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
                                    if size:
                                        order_message += f"   –†–∞–∑–º–µ—Ä: {size}\n"
                                    price = product.get('price', 0)
                                    item_total = price * quantity
                                    order_message += f"   –°—É–º–º–∞: {item_total:,} ‚ÇΩ\n".replace(',', ' ')
                                    order_message += "\n"
                                else:
                                    order_message += f"{i}. –¢–æ–≤–∞—Ä ID: {product_id} (–∫–æ–ª-–≤–æ: {quantity})\n\n"
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID
                            for i, item in enumerate(items, 1):
                                order_message += f"{i}. –¢–æ–≤–∞—Ä ID: {item.get('productId')} (–∫–æ–ª-–≤–æ: {item.get('quantity', 1)})\n"
                            order_message += "\n"
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        for i, item in enumerate(items, 1):
                            order_message += f"{i}. –¢–æ–≤–∞—Ä ID: {item.get('productId')} (–∫–æ–ª-–≤–æ: {item.get('quantity', 1)})\n"
                        order_message += "\n"
                    
                    order_message += f"üí∞ **–ò—Ç–æ–≥–æ: {total:,} ‚ÇΩ**\n".replace(',', ' ')
                    order_message += f"\nüìÖ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                    sent_to_admins = 0
                    for admin_id in ADMIN_IDS:
                        try:
                            await context.bot.send_message(
                                chat_id=admin_id,
                                text=order_message,
                                parse_mode=ParseMode.MARKDOWN
                            )
                            sent_to_admins += 1
                            print(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if sent_to_admins > 0:
                        await update.message.reply_text(
                            "‚úÖ **–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!**\n\n"
                            "–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n\n"
                            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üõçÔ∏è",
                            parse_mode=ParseMode.MARKDOWN,
                            reply_to_message_id=update.message.message_id
                        )
                        print(f"‚úÖ –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_to_admins} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
                    else:
                        await update.message.reply_text(
                            "‚ö†Ô∏è **–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.**\n\n"
                            "–ú—ã –∏—Å–ø—Ä–∞–≤–∏–º —ç—Ç–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –í–∞—à –∑–∞–∫–∞–∑ –Ω–µ –ø–æ—Ç–µ—Ä—è–Ω!",
                            parse_mode=ParseMode.MARKDOWN,
                            reply_to_message_id=update.message.message_id
                        )
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∏ –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                else:
                    # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                    await update.message.reply_text(
                        "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞!",
                        reply_to_message_id=update.message.message_id
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                    data_message = f"üì® **–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n{user_info}\n\n```json\n{json.dumps(data, indent=2, ensure_ascii=False)}\n```"
                    for admin_id in ADMIN_IDS:
                        try:
                            await context.bot.send_message(
                                chat_id=admin_id,
                                text=data_message,
                                parse_mode=ParseMode.MARKDOWN
                            )
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                
            except Exception as e:
                print(f"‚ùå Error processing WebApp data: {e}")
                import traceback
                traceback.print_exc()
                
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                    reply_to_message_id=update.message.message_id
                )

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("catalog", self.catalog_command))
        self.application.add_handler(CommandHandler("orders", self.orders_command))
        self.application.add_handler(CommandHandler("contact", self.contact_command))
        
        # –ö–Ω–æ–ø–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # WebApp –¥–∞–Ω–Ω—ã–µ
        self.application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, self.web_app_data_handler))

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not BOT_TOKEN:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
            return
        
        print("ü§ñ –ó–ê–ü–£–°–ö TELEGRAM BOT")
        print("=" * 30)
        print(f"üåê WebApp URL: {self.webapp_url}")
        print(f"üì± Bot Token: {BOT_TOKEN[:10]}...")
        print("=" * 30)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.setup_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await self.application.run_polling()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TelegramBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())

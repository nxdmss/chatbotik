#!/usr/bin/env python3
"""
üõçÔ∏è –ò–î–ï–ê–õ–¨–ù–´–ô –ú–ê–ì–ê–ó–ò–ù-–ë–û–¢ –° WEBAPP
==================================
–í—Å–µ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ - –±–æ—Ç, –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤
–ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏ –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç!

–ó–∞–ø—É—Å–∫: python3 perfect_shop_bot.py
"""

import os
import json
import sqlite3
import logging
import asyncio
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from threading import Thread
from pathlib import Path
from urllib.parse import parse_qs, urlparse
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/shop_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
BOT_TOKEN = os.getenv('BOT_TOKEN', '')
ADMIN_IDS = [1593426947]  # –í–∞—à ID
PORT = int(os.getenv('PORT', 8080))
WEBAPP_URL = os.getenv('WEBAPP_URL', f'http://localhost:{PORT}')
DATABASE_PATH = 'shop.db'

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
Path('logs').mkdir(exist_ok=True)
Path('webapp').mkdir(exist_ok=True)
Path('webapp/uploads').mkdir(exist_ok=True)

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT DEFAULT '',
            price REAL NOT NULL,
            photo TEXT DEFAULT '',
            sizes TEXT DEFAULT '',
            is_active INTEGER DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            user_name TEXT,
            items TEXT NOT NULL,
            total REAL NOT NULL,
            status TEXT DEFAULT 'new',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

init_database()

# === TELEGRAM BOT API ===
import requests

def send_telegram_message(chat_id, text, parse_mode='HTML'):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': parse_mode
        }
        response = requests.post(url, json=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def get_telegram_updates(offset=0):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        url = f'https://api.telegram.org/bot{BOT_TOKEN}/getUpdates'
        params = {
            'offset': offset,
            'timeout': 30,
            'allowed_updates': ['message', 'callback_query']
        }
        response = requests.get(url, params=params, timeout=35)
        
        if response.status_code == 200:
            return response.json().get('result', [])
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.text}")
            return []
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return []

def send_order_to_admins(order_data, user_info):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
        products_file = Path('webapp/products.json')
        if products_file.exists():
            with open(products_file, 'r', encoding='utf-8') as f:
                products = {p['id']: p for p in json.load(f)}
        else:
            products = {}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>\n\n"
        message += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        if user_info.get('username'):
            message += f" (@{user_info['username']})"
        message += f"\nüÜî <b>ID:</b> {user_info.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        
        message += "üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        
        items = order_data.get('items', [])
        total = 0
        
        for i, item in enumerate(items, 1):
            product_id = item.get('productId')
            quantity = item.get('quantity', 1)
            size = item.get('size')
            
            product = products.get(product_id, {})
            title = product.get('title', f'–¢–æ–≤–∞—Ä #{product_id}')
            price = product.get('price', 0)
            
            item_total = price * quantity
            total += item_total
            
            message += f"\n{i}. <b>{title}</b>\n"
            message += f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            if size:
                message += f"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {size}\n"
            message += f"   ‚Ä¢ –¶–µ–Ω–∞: {price}‚ÇΩ √ó {quantity} = {item_total}‚ÇΩ\n"
        
        message += f"\nüí∞ <b>–ò–¢–û–ì–û: {total}‚ÇΩ</b>\n"
        message += f"\nüìÖ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
        message += f"\nüí¨ –î–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É –Ω–∞–ø—Ä—è–º—É—é"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        success_count = 0
        for admin_id in ADMIN_IDS:
            if send_telegram_message(admin_id, message):
                success_count += 1
        
        logger.info(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {success_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–∑ {len(ADMIN_IDS)}")
        return success_count > 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∞–º: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def process_telegram_update(update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    try:
        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']
            user = message['from']
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if 'text' in message:
                text = message['text']
                
                if text == '/start':
                    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π WebApp
                    response = (
                        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.get('first_name', '–¥—Ä—É–≥')}!\n\n"
                        f"üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!\n\n"
                        f"–û—Ç–∫—Ä–æ–π WebApp —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üëá"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å inline –∫–Ω–æ–ø–∫–æ–π WebApp
                    url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
                    data = {
                        'chat_id': chat_id,
                        'text': response,
                        'reply_markup': {
                            'inline_keyboard': [[
                                {
                                    'text': 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
                                    'web_app': {'url': f'{WEBAPP_URL}/webapp/'}
                                }
                            ]]
                        }
                    }
                    requests.post(url, json=data)
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                
                elif text == '/help':
                    help_text = (
                        "üÜò <b>–°–ø—Ä–∞–≤–∫–∞</b>\n\n"
                        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ '–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏!"
                    )
                    send_telegram_message(chat_id, help_text)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
            elif 'web_app_data' in message:
                web_app_data = message['web_app_data']['data']
                logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ WebApp –æ—Ç {chat_id}: {web_app_data}")
                
                try:
                    data = json.loads(web_app_data)
                    
                    if data.get('action') == 'order':
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É
                        conn = sqlite3.connect(DATABASE_PATH)
                        cursor = conn.cursor()
                        
                        cursor.execute('''
                            INSERT INTO orders (user_id, user_name, items, total, status)
                            VALUES (?, ?, ?, ?, 'new')
                        ''', (
                            chat_id,
                            user.get('first_name', '') + ' ' + user.get('last_name', ''),
                            json.dumps(data.get('items', [])),
                            data.get('total', 0)
                        ))
                        
                        order_id = cursor.lastrowid
                        conn.commit()
                        conn.close()
                        
                        logger.info(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                        if send_order_to_admins(data, user):
                            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                            confirmation = (
                                f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
                                f"–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                                f"–°–∫–æ—Ä–æ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!\n\n"
                                f"üí∞ –°—É–º–º–∞: {data.get('total', 0)}‚ÇΩ\n\n"
                                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üõçÔ∏è"
                            )
                            send_telegram_message(chat_id, confirmation)
                        else:
                            error_msg = (
                                "‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                                "–ú—ã –∏—Å–ø—Ä–∞–≤–∏–º —ç—Ç–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
                            )
                            send_telegram_message(chat_id, error_msg)
                    
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        import traceback
        logger.error(traceback.format_exc())

# === WEB SERVER ===
class WebAppHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è WebApp"""
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        logger.info(f"{self.address_string()} - {format%args}")
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            parsed_path = urlparse(self.path)
            path = parsed_path.path
            
            # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ WebApp
            if path == '/webapp/' or path == '/webapp/index.html' or path == '/webapp':
                self.send_response(200)
                self.send_header('Content-type', 'text/html; charset=utf-8')
                self.end_headers()
                
                html = self.get_webapp_html()
                self.wfile.write(html.encode('utf-8'))
            
            # API: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            elif path == '/api/products' or path == '/webapp/products.json':
                self.send_response(200)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                products_file = Path('webapp/products.json')
                if products_file.exists():
                    with open(products_file, 'r', encoding='utf-8') as f:
                        products = json.load(f)
                else:
                    products = []
                
                self.wfile.write(json.dumps(products, ensure_ascii=False).encode('utf-8'))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            elif path.startswith('/webapp/uploads/') or path.startswith('/webapp/static/uploads/'):
                file_path = path.replace('/webapp/', '')
                file_path = Path('webapp') / file_path.lstrip('/')
                
                if file_path.exists():
                    self.send_response(200)
                    if path.endswith('.jpg') or path.endswith('.jpeg'):
                        self.send_header('Content-type', 'image/jpeg')
                    elif path.endswith('.png'):
                        self.send_header('Content-type', 'image/png')
                    else:
                        self.send_header('Content-type', 'application/octet-stream')
                    self.end_headers()
                    
                    with open(file_path, 'rb') as f:
                        self.wfile.write(f.read())
                else:
                    self.send_response(404)
                    self.end_headers()
                    self.wfile.write(b'File not found')
            
            else:
                self.send_response(404)
                self.end_headers()
                self.wfile.write(b'Not found')
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GET: {e}")
            self.send_response(500)
            self.end_headers()
            self.wfile.write(b'Internal server error')
    
    def get_webapp_html(self):
        """HTML –¥–ª—è WebApp"""
        return '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–∞–≥–∞–∑–∏–Ω</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--tg-theme-bg-color, #ffffff);
            color: var(--tg-theme-text-color, #000000);
            padding: 16px;
            padding-bottom: 80px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 24px;
        }
        
        .header h1 {
            font-size: 24px;
            margin-bottom: 8px;
        }
        
        .products-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 12px;
            margin-bottom: 24px;
        }
        
        .product-card {
            background: var(--tg-theme-secondary-bg-color, #f0f0f0);
            border-radius: 12px;
            padding: 12px;
            cursor: pointer;
            transition: transform 0.2s;
        }
        
        .product-card:active {
            transform: scale(0.95);
        }
        
        .product-image {
            width: 100%;
            height: 150px;
            background: #ddd;
            border-radius: 8px;
            margin-bottom: 8px;
            object-fit: cover;
        }
        
        .product-title {
            font-weight: 600;
            font-size: 14px;
            margin-bottom: 4px;
        }
        
        .product-price {
            color: var(--tg-theme-link-color, #0088cc);
            font-weight: 700;
            font-size: 16px;
        }
        
        .cart-button {
            background: var(--tg-theme-button-color, #0088cc);
            color: var(--tg-theme-button-text-color, #ffffff);
            padding: 8px;
            border-radius: 8px;
            border: none;
            font-size: 12px;
            margin-top: 8px;
            width: 100%;
            cursor: pointer;
        }
        
        .cart-panel {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: var(--tg-theme-secondary-bg-color, #f0f0f0);
            padding: 16px;
            border-top: 1px solid #ddd;
            display: none;
        }
        
        .cart-panel.active {
            display: block;
        }
        
        .cart-total {
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 12px;
        }
        
        .checkout-button {
            background: #4CAF50;
            color: white;
            padding: 14px;
            border-radius: 8px;
            border: none;
            font-size: 16px;
            font-weight: 600;
            width: 100%;
            cursor: pointer;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #999;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üõçÔ∏è –ù–∞—à –º–∞–≥–∞–∑–∏–Ω</h1>
        <p>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É</p>
    </div>
    
    <div id="products" class="products-grid"></div>
    
    <div id="cart" class="cart-panel">
        <div class="cart-total">
            –ò—Ç–æ–≥–æ: <span id="total">0</span>‚ÇΩ
        </div>
        <button class="checkout-button" onclick="checkout()">
            –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
        </button>
    </div>
    
    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        const tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand();
        
        // –ö–æ—Ä–∑–∏–Ω–∞
        let cart = [];
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        async function loadProducts() {
            try {
                const response = await fetch('/api/products');
                const products = await response.json();
                
                const container = document.getElementById('products');
                
                if (products.length === 0) {
                    container.innerHTML = '<div class="empty-state">–¢–æ–≤–∞—Ä—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!</div>';
                    return;
                }
                
                container.innerHTML = products.map(product => `
                    <div class="product-card">
                        <img src="${product.photo || '/webapp/uploads/default.jpg'}" 
                             class="product-image" 
                             alt="${product.title}"
                             onerror="this.src='/webapp/uploads/default.jpg'">
                        <div class="product-title">${product.title}</div>
                        <div class="product-price">${product.price}‚ÇΩ</div>
                        <button class="cart-button" onclick="addToCart(${product.id}, '${product.title}', ${product.price})">
                            –í –∫–æ—Ä–∑–∏–Ω—É
                        </button>
                    </div>
                `).join('');
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
                document.getElementById('products').innerHTML = 
                    '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</div>';
            }
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
        function addToCart(id, title, price) {
            const existing = cart.find(item => item.productId === id);
            
            if (existing) {
                existing.quantity++;
            } else {
                cart.push({
                    productId: id,
                    title: title,
                    price: price,
                    quantity: 1
                });
            }
            
            updateCart();
            
            // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
            if (tg.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('light');
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        function updateCart() {
            const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            document.getElementById('total').textContent = total;
            
            const cartPanel = document.getElementById('cart');
            if (cart.length > 0) {
                cartPanel.classList.add('active');
            } else {
                cartPanel.classList.remove('active');
            }
        }
        
        // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        function checkout() {
            if (cart.length === 0) {
                tg.showAlert('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
                return;
            }
            
            const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            
            const orderData = {
                action: 'order',
                items: cart,
                total: total
            };
            
            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞:', orderData);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É
            tg.sendData(JSON.stringify(orderData));
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp
            setTimeout(() => {
                tg.close();
            }, 100);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        loadProducts();
    </script>
</body>
</html>'''

# === MAIN ===
def run_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        server = HTTPServer(('0.0.0.0', PORT), WebAppHandler)
        logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        logger.info(f"üì± WebApp URL: {WEBAPP_URL}/webapp/")
        server.serve_forever()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")

def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    logger.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    offset = 0
    while True:
        try:
            updates = get_telegram_updates(offset)
            
            for update in updates:
                offset = update['update_id'] + 1
                process_telegram_update(update)
            
        except KeyboardInterrupt:
            logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
            break
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
            import traceback
            logger.error(traceback.format_exc())
            import time
            time.sleep(5)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "=" * 60)
    print("üõçÔ∏è –ò–î–ï–ê–õ–¨–ù–´–ô –ú–ê–ì–ê–ó–ò–ù-–ë–û–¢")
    print("=" * 60)
    
    if not BOT_TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞'")
        return
    
    print(f"‚úÖ Bot Token: {BOT_TOKEN[:10]}...")
    print(f"‚úÖ Admin IDs: {ADMIN_IDS}")
    print(f"üåê WebApp URL: {WEBAPP_URL}/webapp/")
    print(f"üîå Port: {PORT}")
    print("=" * 60 + "\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    web_thread = Thread(target=run_web_server, daemon=True)
    web_thread.start()
    
    # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    import time
    time.sleep(2)
    
    print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã!")
    print("üí° –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_telegram_bot()

if __name__ == '__main__':
    main()


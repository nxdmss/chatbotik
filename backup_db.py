#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç backup –ø–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
"""

import os
import shutil
import sqlite3
from datetime import datetime
import json

DB_PATH = "shop.db"
BACKUP_DIR = "db_backups"
JSON_BACKUP = "products_backup.json"

def ensure_backup_dir():
    """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤"""
    if not os.path.exists(BACKUP_DIR):
        os.makedirs(BACKUP_DIR)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±—ç–∫–∞–ø–æ–≤: {BACKUP_DIR}")

def backup_database():
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if not os.path.exists(DB_PATH):
            print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        
        ensure_backup_dir()
        
        # –°–æ–∑–¥–∞–µ–º timestamp –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = os.path.join(BACKUP_DIR, f"shop_backup_{timestamp}.db")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        shutil.copy2(DB_PATH, backup_path)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –ë–î: {backup_path}")
        
        # –¢–∞–∫–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        export_to_json()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        cleanup_old_backups()
        
        return backup_path
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        return None

def export_to_json():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ JSON"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM products ORDER BY id")
            rows = cursor.fetchall()
            
            products = []
            for row in rows:
                product = {
                    "id": row["id"],
                    "title": row["title"],
                    "description": row["description"],
                    "price": row["price"],
                    "sizes": json.loads(row["sizes"]) if row["sizes"] else [],
                    "photo": row["photo"],
                    "is_active": bool(row["is_active"]),
                    "created_at": row["created_at"]
                }
                products.append(product)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
            with open(JSON_BACKUP, 'w', encoding='utf-8') as f:
                json.dump(products, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON: {JSON_BACKUP} ({len(products)} —Ç–æ–≤–∞—Ä–æ–≤)")
            return products
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON: {e}")
        return []

def restore_from_json():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ JSON"""
    try:
        if not os.path.exists(JSON_BACKUP):
            print(f"‚ö†Ô∏è –§–∞–π–ª {JSON_BACKUP} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        with open(JSON_BACKUP, 'r', encoding='utf-8') as f:
            products = json.load(f)
        
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            cursor.execute("DELETE FROM products")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            for product in products:
                # –ü–æ–ª—É—á–∞–µ–º created_at –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                created_at = product.get("created_at", datetime.now().isoformat())
                
                cursor.execute("""
                    INSERT INTO products (id, title, description, price, sizes, photo, is_active, created_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    product["id"],
                    product["title"],
                    product["description"],
                    product["price"],
                    json.dumps(product["sizes"]),
                    product["photo"],
                    1 if product.get("is_active", True) else 0,
                    created_at
                ))
            
            conn.commit()
            print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ JSON: {e}")
        return False

def cleanup_old_backups(keep_count=10):
    """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã, –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"""
    try:
        if not os.path.exists(BACKUP_DIR):
            return
        
        backups = [f for f in os.listdir(BACKUP_DIR) if f.endswith('.db')]
        backups.sort(reverse=True)  # –ù–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
        for backup in backups[keep_count:]:
            backup_path = os.path.join(BACKUP_DIR, backup)
            os.remove(backup_path)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {backup}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {e}")

def restore_latest_backup():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø"""
    try:
        if not os.path.exists(BACKUP_DIR):
            print("‚ö†Ô∏è –ù–µ—Ç –±—ç–∫–∞–ø–æ–≤")
            return False
        
        backups = [f for f in os.listdir(BACKUP_DIR) if f.endswith('.db')]
        if not backups:
            print("‚ö†Ô∏è –ù–µ—Ç –±—ç–∫–∞–ø–æ–≤")
            return False
        
        backups.sort(reverse=True)
        latest_backup = os.path.join(BACKUP_DIR, backups[0])
        
        shutil.copy2(latest_backup, DB_PATH)
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ë–î –∏–∑: {latest_backup}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        return False

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "backup":
            backup_database()
        elif command == "export":
            export_to_json()
        elif command == "restore":
            restore_latest_backup()
        elif command == "restore-json":
            restore_from_json()
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python backup_db.py backup        - —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø")
            print("  python backup_db.py export        - —ç–∫—Å–ø–æ—Ä—Ç –≤ JSON")
            print("  python backup_db.py restore       - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞")
            print("  python backup_db.py restore-json  - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ JSON")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –∏ —ç–∫—Å–ø–æ—Ä—Ç
        backup_database()


#!/usr/bin/env python3
"""
–ò–î–ï–ê–õ–¨–ù–´–ô –°–ï–†–í–ï–† - –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥–µ–ª–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –Ω—É–ª—è
–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
"""

import http.server
import socketserver
import json
import os
import sqlite3
import time
import shutil
from urllib.parse import urlparse, parse_qs
from datetime import datetime
import traceback

PORT = 8000
DB_PATH = "shop.db"

class ProductManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ - —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path):
        self.db_path = db_path
        self.backup_dir = "db_backups"
        self.json_backup = "products_backup.json"
        self.init_database()
        self.restore_from_backup()  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.auto_backup()  # –ê–≤—Ç–æ–±—ç–∫–∞–ø –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title TEXT NOT NULL,
                    description TEXT,
                    price REAL NOT NULL,
                    sizes TEXT,
                    photo TEXT,
                    is_active INTEGER DEFAULT 1,
                    created_at TEXT
                )
            """)
            conn.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def auto_backup(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            if not os.path.exists(self.db_path):
                return
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
            os.makedirs(self.backup_dir, exist_ok=True)
            
            # –ë—ç–∫–∞–ø —Ñ–∞–π–ª–∞ –ë–î
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = os.path.join(self.backup_dir, f"shop_backup_{timestamp}.db")
            shutil.copy2(self.db_path, backup_path)
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
            self.export_to_json()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
            self.cleanup_old_backups()
            
            print(f"üíæ –ê–≤—Ç–æ–±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—ç–∫–∞–ø–∞: {e}")
    
    def export_to_json(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ JSON"""
        try:
            products = self.get_all_products(active_only=False)
            with open(self.json_backup, 'w', encoding='utf-8') as f:
                json.dump(products, f, ensure_ascii=False, indent=2)
            print(f"üìÑ JSON –±—ç–∫–∞–ø: {self.json_backup} ({len(products)} —Ç–æ–≤–∞—Ä–æ–≤)")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON: {e}")
    
    def cleanup_old_backups(self, keep_count=10):
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã"""
        try:
            backups = [f for f in os.listdir(self.backup_dir) if f.endswith('.db')]
            backups.sort(reverse=True)
            for backup in backups[keep_count:]:
                os.remove(os.path.join(self.backup_dir, backup))
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—ç–∫–∞–ø–æ–≤: {e}")
    
    def restore_from_backup(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –ë–î
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM products WHERE is_active = 1")
                active_count = cursor.fetchone()[0]
                cursor.execute("SELECT COUNT(*) FROM products")
                total_count = cursor.fetchone()[0]
            
            print(f"üìä –°—Ç–∞—Ç—É—Å –ë–î: {total_count} —Ç–æ–≤–∞—Ä–æ–≤ –≤—Å–µ–≥–æ, {active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            
            if active_count > 0:
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç {active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
                return
            elif total_count > 0:
                print(f"‚ö†Ô∏è –í –ë–î –µ—Å—Ç—å {total_count} —Ç–æ–≤–∞—Ä–æ–≤, –Ω–æ –≤—Å–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ")
            else:
                print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è")
            
            # –ï—Å–ª–∏ –ë–î –ø—É—Å—Ç–∞—è, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ JSON
            if os.path.exists(self.json_backup):
                print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –±—ç–∫–∞–ø–∞...")
                self.restore_from_json()
                return
            
            # –ï—Å–ª–∏ JSON –Ω–µ—Ç, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π DB –±—ç–∫–∞–ø
            if os.path.exists(self.backup_dir):
                backups = [f for f in os.listdir(self.backup_dir) if f.endswith('.db')]
                if backups:
                    backups.sort(reverse=True)
                    latest_backup = os.path.join(self.backup_dir, backups[0])
                    print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ DB –±—ç–∫–∞–ø–∞: {latest_backup}")
                    shutil.copy2(latest_backup, self.db_path)
                    return
            
            print("‚ÑπÔ∏è –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ë–î")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞: {e}")
    
    def restore_from_json(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(self.json_backup, 'r', encoding='utf-8') as f:
                products = json.load(f)
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                for product in products:
                    created_at = product.get("created_at", datetime.now().isoformat())
                    cursor.execute("""
                        INSERT OR REPLACE INTO products (id, title, description, price, sizes, photo, is_active, created_at)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        product.get("id"),
                        product.get("title", ""),
                        product.get("description", ""),
                        product.get("price", 0),
                        json.dumps(product.get("sizes", [])),
                        product.get("photo", ""),
                        1 if product.get("is_active", True) else 0,
                        created_at
                    ))
                
                conn.commit()
            
            print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ JSON: {e}")
    
    def get_all_products(self, active_only=True):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã"""
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            if active_only:
                cursor.execute("SELECT * FROM products WHERE is_active = 1 ORDER BY id DESC")
            else:
                cursor.execute("SELECT * FROM products ORDER BY id DESC")
            
            rows = cursor.fetchall()
            products = []
            
            for row in rows:
                product = {
                    "id": row["id"],
                    "title": row["title"],
                    "description": row["description"],
                    "price": row["price"],
                    "sizes": json.loads(row["sizes"]) if row["sizes"] else [],
                    "photo": row["photo"],
                    "is_active": bool(row["is_active"])
                }
                products.append(product)
            
            print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            return products
    
    def get_product_by_id(self, product_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID"""
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
            row = cursor.fetchone()
            
            if not row:
                return None
            
            return {
                "id": row["id"],
                "title": row["title"],
                "description": row["description"],
                "price": row["price"],
                "sizes": json.loads(row["sizes"]) if row["sizes"] else [],
                "photo": row["photo"],
                "is_active": bool(row["is_active"])
            }
    
    def add_product(self, title, description, price, sizes, photo="/webapp/static/uploads/default.jpg"):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä"""
        try:
            print(f"üîß –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î: title={title}, price={price}, sizes={sizes}")
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO products (title, description, price, sizes, photo, is_active, created_at)
                    VALUES (?, ?, ?, ?, ?, 1, ?)
                """, (
                    title,
                    description,
                    price,
                    json.dumps(sizes),
                    photo,
                    datetime.now().isoformat()
                ))
                conn.commit()
                product_id = cursor.lastrowid
                print(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î: ID={product_id}, {title}")
                
                # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                self.auto_backup()
                
                return product_id
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î: {e}")
            traceback.print_exc()
            raise
    
    def update_product(self, product_id, title=None, description=None, price=None, sizes=None, photo=None, is_active=None):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"""
        product = self.get_product_by_id(product_id)
        if not product:
            print(f"‚ùå –¢–æ–≤–∞—Ä ID={product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            updates = []
            params = []
            
            if title is not None:
                updates.append("title = ?")
                params.append(title)
            if description is not None:
                updates.append("description = ?")
                params.append(description)
            if price is not None:
                updates.append("price = ?")
                params.append(price)
            if sizes is not None:
                updates.append("sizes = ?")
                params.append(json.dumps(sizes))
            if photo is not None:
                updates.append("photo = ?")
                params.append(photo)
            if is_active is not None:
                updates.append("is_active = ?")
                params.append(1 if is_active else 0)
            
            if not updates:
                return True
            
            params.append(product_id)
            query = f"UPDATE products SET {', '.join(updates)} WHERE id = ?"
            
            cursor.execute(query, params)
            conn.commit()
            print(f"‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: ID={product_id}")
            
            # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.auto_backup()
            
            return True
    
    def delete_product(self, product_id):
        """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)"""
        product = self.get_product_by_id(product_id)
        if not product:
            print(f"‚ùå –¢–æ–≤–∞—Ä ID={product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–¥–∞–ª–µ–Ω –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä
        if not product.get('is_active', True):
            print(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä ID={product_id} —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω —Ä–∞–Ω–µ–µ")
            return False
        
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE products SET is_active = 0 WHERE id = ?", (product_id,))
            conn.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cursor.execute("SELECT is_active FROM products WHERE id = ?", (product_id,))
            result = cursor.fetchone()
            
            if result and result[0] == 0:
                print(f"‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω: ID={product_id}, {product['title']}")
                
                # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                self.auto_backup()
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ID={product_id}")
                return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤
product_manager = ProductManager(DB_PATH)

class PerfectHandler(http.server.SimpleHTTPRequestHandler):
    """–ò–¥–µ–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def is_admin(self, query_params):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º user_id –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞
        user_id = query_params.get('user_id', [''])[0]
        
        # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –≤–∞—à Telegram ID
        ADMIN_USER_ID = '1593426947'
        
        is_admin = (user_id == ADMIN_USER_ID)
        
        if is_admin:
            print(f"üëë –ê–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è user_id: {user_id}")
        else:
            print(f"üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è user_id: {user_id}")
        
        return is_admin
    
    def _parse_multipart(self, post_data, content_type):
        """–ü–∞—Ä—Å–∏–Ω–≥ multipart/form-data"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º boundary
            boundary = content_type.split('boundary=')[1]
            if boundary.startswith('"') and boundary.endswith('"'):
                boundary = boundary[1:-1]
            
            print(f"üîç Boundary –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {boundary}")
            
            # Boundary –≤ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å "--", –∞ –º–æ–∂–µ—Ç –∏ –Ω–µ—Ç
            # –ò—â–µ–º –µ–≥–æ –≤ –¥–∞–Ω–Ω—ã—Ö
            boundary_bytes = boundary.encode()
            if b'--' + boundary_bytes in post_data:
                separator = b'--' + boundary_bytes
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å --")
            elif boundary_bytes in post_data:
                separator = boundary_bytes
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –±–µ–∑ --")
            else:
                print(f"‚ùå –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö!")
                return {}
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = post_data.split(separator)
            
            result = {}
            for i, part in enumerate(parts):
                if b'Content-Disposition' in part:
                    try:
                        # –ò—â–µ–º name
                        name_start = part.find(b'name="') + 6
                        name_end = part.find(b'"', name_start)
                        name = part[name_start:name_end].decode('utf-8')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç
                        if b'filename=' in part:
                            # –≠—Ç–æ —Ñ–∞–π–ª - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ!
                            filename_start = part.find(b'filename="') + 10
                            filename_end = part.find(b'"', filename_start)
                            filename = part[filename_start:filename_end].decode('utf-8')
                            
                            if filename:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–±—Ä–∞–Ω
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
                                file_data_start = part.find(b'\r\n\r\n') + 4
                                file_data_end = part.rfind(b'\r\n')
                                
                                if file_data_start > 3 and file_data_end > file_data_start:
                                    file_data = part[file_data_start:file_data_end]
                                    
                                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                                    timestamp = int(time.time())
                                    ext = os.path.splitext(filename)[1]
                                    new_filename = f"photo_{timestamp}{ext}"
                                    
                                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                                    os.makedirs('webapp/uploads', exist_ok=True)
                                    os.makedirs('webapp/static/uploads', exist_ok=True)
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –æ–±–∞ –º–µ—Å—Ç–∞
                                    file_path_1 = os.path.join('webapp/uploads', new_filename)
                                    file_path_2 = os.path.join('webapp/static/uploads', new_filename)
                                    
                                    with open(file_path_1, 'wb') as f:
                                        f.write(file_data)
                                    with open(file_path_2, 'wb') as f:
                                        f.write(file_data)
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                                    result['photo'] = f'/webapp/static/uploads/{new_filename}'
                                    print(f"   üì∏ –ß–∞—Å—Ç—å {i}: {name} - —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {new_filename} ({len(file_data)} –±–∞–π—Ç)")
                            else:
                                print(f"   üìé –ß–∞—Å—Ç—å {i}: {name} - —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
                            continue
                        
                        # –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ (–ø–æ—Å–ª–µ –¥–≤–æ–π–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏)
                        value_start = part.find(b'\r\n\r\n') + 4
                        value_end = part.rfind(b'\r\n')
                        
                        if value_start > 3 and value_end > value_start:
                            value = part[value_start:value_end].decode('utf-8', errors='ignore').strip()
                            if value:  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                                result[name] = value
                                print(f"   ‚úÖ –ß–∞—Å—Ç—å {i}: {name} = {value[:50]}...")
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–∏ {i}: {e}")
                        traceback.print_exc()
                        continue
            
            print(f"üîß –†–∞—Å–ø–∞—Ä—Å–µ–Ω multipart: {result}")
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ multipart: {e}")
            traceback.print_exc()
            return {}
    
    def end_headers(self):
        # CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        super().end_headers()
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.end_headers()
    
    def send_json(self, status_code, data):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å JSON –æ—Ç–≤–µ—Ç"""
        self.send_response(status_code)
        self.send_header('Content-type', 'application/json; charset=utf-8')
        self.end_headers()
        self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print(f"üì• GET {self.path}")
        
        # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if self.path == '/' or self.path == '/webapp/index_clean.html':
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            try:
                with open('webapp/index_clean.html', 'r', encoding='utf-8') as f:
                    self.wfile.write(f.read().encode('utf-8'))
            except:
                self.wfile.write('<h1>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!</h1>'.encode('utf-8'))
            return
        
        # API: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        elif self.path == '/webapp/products.json' or self.path == '/api/products':
            products = product_manager.get_all_products(active_only=True)
            self.send_json(200, products)
            return
        
        # API: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞)
        elif self.path.startswith('/webapp/admin/products'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
            query_params = parse_qs(urlparse(self.path).query)
            if not self.is_admin(query_params):
                self.send_json(403, {"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
                return
            
            products = product_manager.get_all_products(active_only=False)
            self.send_json(200, {"products": products})
            return
        
        # –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å /webapp/static/uploads/ –Ω–∞ /webapp/uploads/
        elif '/webapp/static/uploads/' in self.path or '/webapp/uploads/' in self.path:
            # –£–±–∏—Ä–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            clean_path = self.path.split('?')[0]
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
            if '/webapp/static/uploads/' in clean_path:
                real_path = clean_path.replace('/webapp/static/uploads/', 'webapp/uploads/')
            else:
                real_path = clean_path.replace('/webapp/uploads/', 'webapp/uploads/')
            
            print(f"üñºÔ∏è –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ: {self.path} -> {real_path}")
            
            try:
                with open(real_path, 'rb') as f:
                    self.send_response(200)
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                    if real_path.lower().endswith(('.jpg', '.jpeg')):
                        self.send_header('Content-type', 'image/jpeg')
                    elif real_path.lower().endswith('.png'):
                        self.send_header('Content-type', 'image/png')
                    elif real_path.lower().endswith('.gif'):
                        self.send_header('Content-type', 'image/gif')
                    elif real_path.lower().endswith('.webp'):
                        self.send_header('Content-type', 'image/webp')
                    else:
                        self.send_header('Content-type', 'application/octet-stream')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
                    self.send_header('Cache-Control', 'public, max-age=86400')
                    self.end_headers()
                    self.wfile.write(f.read())
                print(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {real_path}")
                return
            except FileNotFoundError:
                print(f"‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {real_path}")
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                alt_paths = [
                    real_path.replace('webapp/uploads/', 'webapp/static/uploads/'),
                    'webapp/static/uploads/default.jpg'
                ]
                for alt_path in alt_paths:
                    try:
                        with open(alt_path, 'rb') as f:
                            self.send_response(200)
                            self.send_header('Content-type', 'image/jpeg')
                            self.end_headers()
                            self.wfile.write(f.read())
                        print(f"‚úÖ –§–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–µ—Å—Ç–µ: {alt_path}")
                        return
                    except FileNotFoundError:
                        continue
                
                self.send_error(404, f"File not found: {real_path}")
                return
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
                self.send_error(500, f"Error reading file: {str(e)}")
                return
        
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        else:
            super().do_GET()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        print(f"üì• POST {self.path}")
        
        if self.path.startswith('/webapp/admin/products') or self.path.startswith('/api/admin/products'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
            query_params = parse_qs(urlparse(self.path).query)
            if not self.is_admin(query_params):
                self.send_json(403, {"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
                return
            
            try:
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                content_length = int(self.headers.get('Content-Length', 0))
                post_data = self.rfile.read(content_length)
                
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {post_data[:200]}")  # –ü–µ—Ä–≤—ã–µ 200 –±–∞–π—Ç
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
                content_type = self.headers.get('Content-Type', '')
                print(f"üìã Content-Type: {content_type}")
                
                # –ü–∞—Ä—Å–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if 'multipart/form-data' in content_type:
                    print("üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω multipart/form-data, –ø–∞—Ä—Å–∏–º —Ñ–æ—Ä–º—É...")
                    # –ü–∞—Ä—Å–∏–º multipart form data
                    data = self._parse_multipart(post_data, content_type)
                else:
                    # –ü–∞—Ä—Å–∏–º JSON
                    data = json.loads(post_data.decode('utf-8'))
                
                print(f"‚úÖ –†–∞—Å–ø–∞—Ä—Å–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                title = data.get('title', '–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä')
                description = data.get('description', '')
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
                try:
                    price = float(data.get('price', 1000))
                except (ValueError, TypeError):
                    price = 1000
                    print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1000")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ sizes - –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞
                sizes_raw = data.get('sizes', ['M', 'L'])
                if isinstance(sizes_raw, str):
                    sizes = [s.strip() for s in sizes_raw.split(',') if s.strip()]
                elif isinstance(sizes_raw, list):
                    sizes = sizes_raw
                else:
                    sizes = ['M', 'L']
                
                photo = data.get('photo', '/webapp/static/uploads/default.jpg')
                
                print(f"üìù –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä:")
                print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                print(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
                print(f"   - –¶–µ–Ω–∞: {price}")
                print(f"   - –†–∞–∑–º–µ—Ä—ã: {sizes}")
                print(f"   - –§–æ—Ç–æ: {photo}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
                product_id = product_manager.add_product(title, description, price, sizes, photo)
                
                print(f"‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —Å ID: {product_id}")
                
                self.send_json(200, {
                    "success": True,
                    "product_id": product_id,
                    "message": "–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
                })
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
                import traceback
                traceback.print_exc()
                self.send_json(500, {"success": False, "error": str(e)})
        else:
            self.send_json(404, {"success": False, "error": "Not found"})
    
    def do_PUT(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–æ–≤ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        print(f"üì• PUT {self.path}")
        
        if self.path.startswith('/webapp/admin/products/'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
            query_params = parse_qs(urlparse(self.path).query)
            if not self.is_admin(query_params):
                self.send_json(403, {"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
                return
            
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
                path_parts = self.path.split('/')
                product_id = int(path_parts[-1].split('?')[0])
                
                print(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä ID={product_id}")
                
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                content_length = int(self.headers.get('Content-Length', 0))
                post_data = self.rfile.read(content_length)
                
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {post_data[:200]}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
                content_type = self.headers.get('Content-Type', '')
                print(f"üìã Content-Type: {content_type}")
                
                # –ü–∞—Ä—Å–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if 'multipart/form-data' in content_type:
                    print("üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω multipart/form-data, –ø–∞—Ä—Å–∏–º —Ñ–æ—Ä–º—É...")
                    data = self._parse_multipart(post_data, content_type)
                else:
                    data = json.loads(post_data.decode('utf-8'))
                
                print(f"‚úÖ –†–∞—Å–ø–∞—Ä—Å–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {data}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
                price = None
                if 'price' in data:
                    try:
                        price = float(data['price'])
                    except (ValueError, TypeError):
                        print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞: {data['price']}")
                        price = None
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
                sizes = None
                if 'sizes' in data:
                    sizes_raw = data['sizes']
                    if isinstance(sizes_raw, str):
                        sizes = [s.strip() for s in sizes_raw.split(',') if s.strip()]
                    elif isinstance(sizes_raw, list):
                        sizes = sizes_raw
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ is_active
                is_active = None
                if 'is_active' in data:
                    is_active = bool(data['is_active'])
                
                print(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä:")
                print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title', '–Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è')}")
                print(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è')}")
                print(f"   - –¶–µ–Ω–∞: {price if price else '–Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è'}")
                print(f"   - –†–∞–∑–º–µ—Ä—ã: {sizes if sizes else '–Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è'}")
                print(f"   - –§–æ—Ç–æ: {data.get('photo', '–Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è')}")
                print(f"   - –ê–∫—Ç–∏–≤–µ–Ω: {is_active if is_active is not None else '–Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è'}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
                success = product_manager.update_product(
                    product_id,
                    title=data.get('title'),
                    description=data.get('description'),
                    price=price,
                    sizes=sizes,
                    photo=data.get('photo'),
                    is_active=is_active
                )
                
                if success:
                    print(f"‚úÖ –¢–æ–≤–∞—Ä ID={product_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                    self.send_json(200, {"success": True, "message": "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"})
                else:
                    print(f"‚ùå –¢–æ–≤–∞—Ä ID={product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    self.send_json(404, {"success": False, "error": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"})
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
                traceback.print_exc()
                self.send_json(500, {"success": False, "error": str(e)})
        else:
            self.send_json(404, {"success": False, "error": "Not found"})
    
    def do_DELETE(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–æ–≤ - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        print(f"üì• DELETE {self.path}")
        
        if self.path.startswith('/webapp/admin/products/'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
            query_params = parse_qs(urlparse(self.path).query)
            if not self.is_admin(query_params):
                self.send_json(403, {"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
                return
            
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
                path_parts = self.path.split('/')
                product_id_str = path_parts[-1].split('?')[0]
                product_id = int(product_id_str)
                
                print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä ID={product_id}")
                
                # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
                success = product_manager.delete_product(product_id)
                
                if success:
                    self.send_json(200, {"success": True, "message": "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"})
                else:
                    self.send_json(404, {"success": False, "error": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"})
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
                import traceback
                traceback.print_exc()
                self.send_json(500, {"success": False, "error": str(e)})
        else:
            self.send_json(404, {"success": False, "error": "Not found"})

def start_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("=" * 60)
    print("üöÄ –ò–î–ï–ê–õ–¨–ù–´–ô –°–ï–†–í–ï–†")
    print("=" * 60)
    print(f"üì± –ê–¥—Ä–µ—Å: http://localhost:{PORT}")
    print(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    products = product_manager.get_all_products(active_only=False)
    print(f"üõçÔ∏è –¢–æ–≤–∞—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(products)}")
    print("=" * 60)
    
    with socketserver.TCPServer(("0.0.0.0", PORT), PerfectHandler) as httpd:
        try:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    start_server()


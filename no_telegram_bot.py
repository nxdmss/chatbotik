#!/usr/bin/env python3
"""
ü§ñ –ë–û–¢ –ë–ï–ó TELEGRAM –ë–ò–ë–õ–ò–û–¢–ï–ö–ò
==============================
–†–∞–±–æ—Ç–∞–µ—Ç –≤–æ–æ–±—â–µ –±–µ–∑ python-telegram-bot
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ HTTP API Telegram
"""

import os
import sqlite3
import logging
import json
import time
from datetime import datetime

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º requests –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
try:
    import requests
    REQUESTS_AVAILABLE = True
except ImportError:
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º requests...")
    import subprocess
    subprocess.check_call(['pip', 'install', '--quiet', 'requests'])
    import requests
    REQUESTS_AVAILABLE = True

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '')
ADMIN_IDS = [1593426947]  # –í–∞—à ID –∫–∞–∫ –∞–¥–º–∏–Ω–∞
SUPPORT_DATABASE_PATH = 'customer_support.db'
TELEGRAM_API_URL = f'https://api.telegram.org/bot{BOT_TOKEN}'

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
current_customer_user_id = None

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏
def init_support_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS customers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            is_admin INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reviews (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            customer_id INTEGER,
            rating INTEGER NOT NULL,
            comment TEXT,
            is_approved INTEGER DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (customer_id) REFERENCES customers (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            customer_id INTEGER,
            order_number TEXT,
            description TEXT,
            total_price REAL,
            status TEXT DEFAULT 'new',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (customer_id) REFERENCES customers (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            customer_id INTEGER,
            message TEXT,
            is_from_admin INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (customer_id) REFERENCES customers (id)
        )
    ''')
    
    conn.commit()
    conn.close()

def get_or_create_customer(user_id, username=None, first_name=None, last_name=None):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"""
    conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç
    cursor.execute('SELECT id FROM customers WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if result:
        customer_id = result[0]
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('''
            INSERT INTO customers (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name))
        customer_id = cursor.lastrowid
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    cursor.execute('''
        UPDATE customers 
        SET last_activity = CURRENT_TIMESTAMP
        WHERE user_id = ?
    ''', (user_id,))
    
    conn.commit()
    conn.close()
    
    return customer_id

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def create_reply_keyboard(keyboard_layout, resize_keyboard=True, one_time_keyboard=False):
    """–°–æ–∑–¥–∞—Ç—å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    return {
        'keyboard': keyboard_layout,
        'resize_keyboard': resize_keyboard,
        'one_time_keyboard': one_time_keyboard
    }

def create_inline_keyboard(inline_layout):
    """–°–æ–∑–¥–∞—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    return {'inline_keyboard': inline_layout}

def get_admin_keyboard():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        ['üìã –ö–ª–∏–µ–Ω—Ç—ã', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
        ['üì¶ –ó–∞–∫–∞–∑—ã', 'üí¨ –°–æ–æ–±—â–µ–Ω–∏—è'],
        ['‚≠ê –û—Ç–∑—ã–≤—ã', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
    ]
    return create_reply_keyboard(keyboard)

def get_customer_keyboard():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    keyboard = [
        ['üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤'],
        ['üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
        ['‚≠ê –û—Ç–∑—ã–≤—ã', 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã']
    ]
    return create_reply_keyboard(keyboard)

def get_back_keyboard():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    keyboard = [['üîô –ù–∞–∑–∞–¥']]
    return create_reply_keyboard(keyboard)

def send_message(user_id, text, parse_mode='HTML'):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        url = f'{TELEGRAM_API_URL}/sendMessage'
        data = {
            'chat_id': user_id,
            'text': text,
            'parse_mode': parse_mode
        }
        response = requests.post(url, json=data)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def send_message_with_keyboard(user_id, text, keyboard, parse_mode='HTML'):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    try:
        url = f'{TELEGRAM_API_URL}/sendMessage'
        data = {
            'chat_id': user_id,
            'text': text,
            'parse_mode': parse_mode,
            'reply_markup': keyboard
        }
        response = requests.post(url, json=data)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e}")
        return None

def get_updates(offset=None):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    try:
        url = f'{TELEGRAM_API_URL}/getUpdates'
        params = {'timeout': 30}
        if offset:
            params['offset'] = offset
        
        response = requests.get(url, params=params, timeout=35)
        if response.status_code == 200:
            result = response.json()
            if result.get('ok') and result.get('result'):
                print(f"üîç DEBUG: get_updates –ø–æ–ª—É—á–∏–ª {len(result['result'])} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            return result
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return None

def process_update(update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    try:
        if 'message' in update:
            message = update['message']
            user_id = message['from']['id']
            username = message['from'].get('username')
            first_name = message['from'].get('first_name')
            last_name = message['from'].get('last_name')
            
            if 'text' in message:
                text = message['text']
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
                if text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or text == 'üîô –ù–∞–∑–∞–¥':
                    handle_start_command(user_id, username, first_name, last_name)
                elif text == 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
                    handle_support_button(user_id)
                elif text == '‚≠ê –û—Ç–∑—ã–≤—ã':
                    handle_reviews_button(user_id)
                elif text == 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã':
                    show_customer_reviews(user_id)
                elif text == '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
                    handle_leave_review_button(user_id)
                elif text in ['‚≠ê 1', '‚≠ê‚≠ê 2', '‚≠ê‚≠ê‚≠ê 3', '‚≠ê‚≠ê‚≠ê‚≠ê 4', '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5']:
                    handle_rating_selection(user_id, text)
                elif text == 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã':
                    handle_myorders_command(user_id)
                elif text == 'üìã –ö–ª–∏–µ–Ω—Ç—ã':
                    handle_customers_list_button(user_id)
                elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                    handle_stats_command(user_id)
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                elif text.startswith('/start'):
                    handle_start_command(user_id, username, first_name, last_name)
                elif text.startswith('/support'):
                    handle_support_button(user_id)
                elif text.startswith('/reviews'):
                    handle_reviews_button(user_id)
                elif text.startswith('/myorders'):
                    handle_myorders_command(user_id)
                elif text.startswith('/customers'):
                    if is_admin(user_id):
                        handle_customers_list_button(user_id)
                    else:
                        send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
                elif text.startswith('/stats'):
                    if is_admin(user_id):
                        handle_stats_command(user_id)
                    else:
                        send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
                else:
                    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
                    forward_to_admin(user_id, username, first_name, last_name, text)
            
            elif 'web_app_data' in message:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
                web_app_data = message['web_app_data']['data']
                handle_webapp_order(user_id, web_app_data)
        
        elif 'callback_query' in update:
            callback_query = update['callback_query']
            user_id = callback_query['from']['id']
            callback_data = callback_query['data']
            callback_query_id = callback_query['id']
            
            print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω callback_query: user_id={user_id}, data='{callback_data}', query_id={callback_query_id}")
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            answer_callback_query(callback_query_id, "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

def handle_start_command(user_id, username, first_name, last_name):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        get_or_create_customer(user_id, username, first_name, last_name)
        
        if is_admin(user_id):
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
            keyboard = get_admin_keyboard()
            message = (
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å:\n"
                "‚Ä¢ üë• –ö–ª–∏–µ–Ω—Ç–∞–º–∏\n"
                "‚Ä¢ üì¶ –ó–∞–∫–∞–∑–∞–º–∏\n"
                "‚Ä¢ üí¨ –°–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
                "‚Ä¢ ‚≠ê –û—Ç–∑—ã–≤–∞–º–∏\n"
                "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"
            )
        else:
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            keyboard = get_customer_keyboard()
            message = (
                "üõçÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!</b>\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ üõçÔ∏è –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n"
                "‚Ä¢ üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"
                "‚Ä¢ ‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
                "‚Ä¢ üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤'"
            )
        
        send_message_with_keyboard(user_id, message, keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start_command: {e}")
        send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def handle_webapp_order(user_id, web_app_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ WebApp"""
    try:
        import json
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp
        order_data = json.loads(web_app_data)
        
        logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ WebApp –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {order_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if order_data.get('action') == 'order':
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: {action: 'order', data: {...}}
            order = order_data.get('data', order_data)
        elif order_data.get('type') == 'order':
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {type: 'order', order: {...}}
            order = order_data.get('order', order_data)
        elif 'items' in order_data or 'total' in order_data:
            # –ü—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–∞–∑–∞
            order = order_data
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö WebApp: {order_data}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º customer_id
        customer_id = get_or_create_customer(user_id, None, None, None)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: 1, 2, 3...
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM orders")
        orders_count = cursor.fetchone()[0]
        order_number = str(orders_count + 1)
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        items = order.get('items', [])
        order_description = "üõí –ó–∞–∫–∞–∑ –∏–∑ WebApp:\n\n"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å 'total' –≤ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        total_price = order.get('total', 0)
        
        # –ï—Å–ª–∏ total –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        if total_price == 0:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ JSON
            try:
                products_json_path = os.path.join(os.path.dirname(__file__), 'webapp', 'products.json')
                with open(products_json_path, 'r', encoding='utf-8') as f:
                    products_data = json.load(f)
                    products = {p['id']: p for p in products_data}
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ products.json: {e}")
                products = {}
            
            for i, item in enumerate(items, 1):
                product_id = item.get('productId')
                quantity = item.get('quantity', 1)
                size = item.get('size', '')
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                product = products.get(product_id, {})
                product_name = product.get('title', f'–¢–æ–≤–∞—Ä #{product_id}')
                price = product.get('price', 0)
                
                item_total = price * quantity
                total_price += item_total
                
                size_text = f" (—Ä–∞–∑–º–µ—Ä: {size})" if size else ""
                order_description += f"{i}. {product_name}{size_text}\n"
                order_description += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
                order_description += f"   –¶–µ–Ω–∞: {price}‚ÇΩ √ó {quantity} = {item_total}‚ÇΩ\n\n"
        else:
            # –ï—Å–ª–∏ total —É–∂–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
            for i, item in enumerate(items, 1):
                product_id = item.get('productId')
                quantity = item.get('quantity', 1)
                size = item.get('size', '')
                
                size_text = f" (—Ä–∞–∑–º–µ—Ä: {size})" if size else ""
                order_description += f"{i}. –¢–æ–≤–∞—Ä #{product_id}{size_text} √ó {quantity}\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        cursor.execute('''
            INSERT INTO orders (customer_id, order_number, description, total_price, status)
            VALUES (?, ?, ?, ?, ?)
        ''', (customer_id, order_number, order_description, total_price, 'new'))
        
        conn.commit()
        conn.close()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        for admin_id in ADMIN_IDS:
            try:
                # –°–û–û–ë–©–ï–ù–ò–ï 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
                admin_message = (
                    f"üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó {order_number}</b>\n\n"
                    f"üí∞ <b>{total_price:,} ‚ÇΩ</b>\n"
                    f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"üë§ <b>–ö–õ–ò–ï–ù–¢:</b>\n"
                    f"   –ò–º—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
                    f"   ID: <code>{user_id}</code>\n\n"
                    f"{order_description}\n\n"
                    f"<b>–ß–¢–û –î–ï–õ–ê–¢–¨:</b>\n\n"
                    f"1Ô∏è‚É£ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º\n"
                    f"2Ô∏è‚É£ –£—Ç–æ—á–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
                    f"3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n\n"
                    f"‚è± <b>–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</b>"
                )
                
                send_message(admin_id, admin_message)
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        confirmation_message = (
            f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_number} –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
            f"üí∞ –°—É–º–º–∞: <b>{total_price:,} ‚ÇΩ</b>\n"
            f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(items)}\n\n"
            f"‚è± –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n"
            f"üìû –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: /support"
        )
        
        send_message(user_id, confirmation_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –∑–∞–∫–∞–∑–∞: {e}")
        send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –û–¢–ó–´–í–ê–ú–ò =====

def handle_reviews_button(user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∑—ã–≤–æ–≤"""
    keyboard = create_reply_keyboard([
        ['üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã', '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'],
        ['üîô –ù–∞–∑–∞–¥']
    ])
    
    message = (
        "‚≠ê <b>–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –ø–æ–∫—É–ø–∫–µ\n"
        "‚Ä¢ –û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n\n"
        "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!"
    )
    
    send_message_with_keyboard(user_id, message, keyboard)

def show_customer_reviews(user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    try:
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–∑—ã–≤–æ–≤
        cursor.execute('''
            SELECT r.rating, r.comment, r.created_at, c.first_name, c.last_name
            FROM reviews r
            JOIN customers c ON r.customer_id = c.id
            WHERE r.is_approved = 1
            ORDER BY r.created_at DESC
            LIMIT 5
        ''')
        
        reviews = cursor.fetchall()
        conn.close()
        
        if not reviews:
            message = "üìù –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤!"
        else:
            message = "‚≠ê <b>–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n\n"
            
            for rating, comment, created_at, first_name, last_name in reviews:
                stars = "‚≠ê" * rating
                name = f"{first_name} {last_name}".strip() or "–ê–Ω–æ–Ω–∏–º"
                date = created_at.split()[0] if created_at else "–ù–µ–¥–∞–≤–Ω–æ"
                
                message += f"{stars} <b>{name}</b> ({date})\n"
                if comment:
                    message += f"üí¨ {comment}\n"
                message += "\n"
        
        keyboard = create_reply_keyboard([
            ['‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'],
            ['üîô –ù–∞–∑–∞–¥']
        ])
        
        send_message_with_keyboard(user_id, message, keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {e}")
        send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def handle_leave_review_button(user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"""
    keyboard = create_reply_keyboard([
        ['‚≠ê 1', '‚≠ê‚≠ê 2', '‚≠ê‚≠ê‚≠ê 3', '‚≠ê‚≠ê‚≠ê‚≠ê 4', '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5'],
        ['üîô –ù–∞–∑–∞–¥']
    ])
    
    message = (
        "‚≠ê <b>–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥.\n"
        "–ü–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
    )
    
    send_message_with_keyboard(user_id, message, keyboard)

def handle_rating_selection(user_id, rating_text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    rating = len(rating_text.split())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    global temp_ratings
    if 'temp_ratings' not in globals():
        temp_ratings = {}
    temp_ratings[user_id] = rating
    
    keyboard = create_reply_keyboard([
        ['üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'],
        ['üîô –ù–∞–∑–∞–¥']
    ])
    
    message = (
        f"‚≠ê <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É: {rating_text}</b>\n\n"
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É?\n"
        "–ò–ª–∏ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ç–æ–ª—å–∫–æ —Å –æ—Ü–µ–Ω–∫–æ–π."
    )
    
    send_message_with_keyboard(user_id, message, keyboard)

def save_review(user_id, rating, comment=None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º customer_id
        customer_id = get_or_create_customer(user_id, None, None, None)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        cursor.execute('''
            INSERT INTO reviews (customer_id, rating, comment, is_approved, created_at)
            VALUES (?, ?, ?, ?, ?)
        ''', (customer_id, rating, comment or '', 1, datetime.now().isoformat()))
        
        conn.commit()
        conn.close()
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
        return False

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ó–ê–ö–ê–ó–ê–ú–ò =====

def handle_myorders_command(user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º customer_id
        customer_id = get_or_create_customer(user_id, None, None, None)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('''
            SELECT order_number, description, total_price, status, created_at
            FROM orders
            WHERE customer_id = ?
            ORDER BY created_at DESC
            LIMIT 10
        ''', (customer_id,))
        
        orders = cursor.fetchall()
        conn.close()
        
        if not orders:
            message = "üì¶ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</b>\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!"
        else:
            message = "üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
            
            for order_number, description, total_price, status, created_at in orders:
                status_emoji = {
                    'new': 'üÜï',
                    'processing': '‚è≥',
                    'shipped': 'üöö',
                    'delivered': '‚úÖ',
                    'cancelled': '‚ùå'
                }.get(status, '‚ùì')
                
                date = created_at.split()[0] if created_at else "–ù–µ–¥–∞–≤–Ω–æ"
                message += f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order_number}</b>\n"
                message += f"üí∞ {total_price:,.0f} ‚ÇΩ\n"
                message += f"üìÖ {date}\n"
                message += f"üìã –°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        keyboard = create_reply_keyboard([
            ['üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤'],
            ['üîô –ù–∞–∑–∞–¥']
        ])
        
        send_message_with_keyboard(user_id, message, keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù–û–í =====

def handle_customers_list_button(user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        cursor.execute('''
            SELECT user_id, first_name, last_name, created_at, last_activity
            FROM customers
            WHERE is_admin = 0
            ORDER BY last_activity DESC
            LIMIT 20
        ''')
        
        customers = cursor.fetchall()
        conn.close()
        
        if not customers:
            message = "üë• <b>–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è."
        else:
            message = f"üë• <b>–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ ({len(customers)}):</b>\n\n"
            
            for user_id_customer, first_name, last_name, created_at, last_activity in customers:
                name = f"{first_name} {last_name}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                date = created_at.split()[0] if created_at else "–ù–µ–¥–∞–≤–Ω–æ"
                
                message += f"üë§ <b>{name}</b>\n"
                message += f"üÜî ID: <code>{user_id_customer}</code>\n"
                message += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {date}\n\n"
        
        keyboard = create_reply_keyboard([
            ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
            ['üîô –ù–∞–∑–∞–¥']
        ])
        
        send_message_with_keyboard(user_id, message, keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def handle_stats_command(user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        conn = sqlite3.connect(SUPPORT_DATABASE_PATH)
        cursor = conn.cursor()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        cursor.execute("SELECT COUNT(*) FROM customers WHERE is_admin = 0")
        customers_count = cursor.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        cursor.execute("SELECT COUNT(*) FROM orders")
        orders_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT SUM(total_price) FROM orders WHERE status != 'cancelled'")
        total_revenue = cursor.fetchone()[0] or 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
        cursor.execute("SELECT COUNT(*) FROM reviews WHERE is_approved = 1")
        reviews_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT AVG(rating) FROM reviews WHERE is_approved = 1")
        avg_rating = cursor.fetchone()[0] or 0
        
        conn.close()
        
        message = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n"
            f"üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: <b>{customers_count}</b>\n"
            f"üì¶ –ó–∞–∫–∞–∑–æ–≤: <b>{orders_count}</b>\n"
            f"üí∞ –í—ã—Ä—É—á–∫–∞: <b>{total_revenue:,.0f} ‚ÇΩ</b>\n"
            f"‚≠ê –û—Ç–∑—ã–≤–æ–≤: <b>{reviews_count}</b>\n"
            f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: <b>{avg_rating:.1f}/5</b>\n\n"
            f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        keyboard = create_reply_keyboard([
            ['üë• –ö–ª–∏–µ–Ω—Ç—ã', 'üì¶ –ó–∞–∫–∞–∑—ã'],
            ['‚≠ê –û—Ç–∑—ã–≤—ã', 'üí¨ –°–æ–æ–±—â–µ–Ω–∏—è'],
            ['üîô –ù–∞–∑–∞–¥']
        ])
        
        send_message_with_keyboard(user_id, message, keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ===== –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò =====

def handle_support_button(user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    message = (
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, "
        "–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\n"
        "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00 (–ú–°–ö)\n"
        "üì± –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: /support"
    )
    send_message(user_id, message)

def forward_to_admin(user_id, username, first_name, last_name, text):
    """–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        admins = ADMIN_IDS
        
        message = (
            f"üì® <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
            f"üë§ –ò–º—è: {first_name} {last_name}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {text}"
        )
        
        for admin_id in admins:
            try:
                send_message(admin_id, message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        send_message(user_id, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def answer_callback_query(callback_query_id, text):
    """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query"""
    try:
        url = f'{TELEGRAM_API_URL}/answerCallbackQuery'
        data = {
            'callback_query_id': callback_query_id,
            'text': text
        }
        requests.post(url, json=data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return
    
    print("ü§ñ –ó–ê–ü–£–°–ö –ë–û–¢–ê –ë–ï–ó TELEGRAM –ë–ò–ë–õ–ò–û–¢–ï–ö–ò")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_support_database()
    
    print("‚úÖ –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üìû –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
    print("‚≠ê –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞")
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∑–∞–∫–∞–∑—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω–∞–º")
    print("=" * 50)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    last_update_id = None
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates = get_updates(last_update_id)
            
            if updates and updates.get('ok'):
                print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–æ {len(updates['result'])} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                for update in updates['result']:
                    print(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID {update['update_id']}")
                    if 'message' in update:
                        print(f"üîç DEBUG: –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update['message']['from']['id']}")
                    elif 'callback_query' in update:
                        print(f"üîç DEBUG: –≠—Ç–æ callback_query –æ—Ç {update['callback_query']['from']['id']}")
                    process_update(update)
                    last_update_id = update['update_id'] + 1
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                import time
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            import time
            time.sleep(5)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

if __name__ == "__main__":
    main()

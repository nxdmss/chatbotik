#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–ï–†–í–ï–† –° –ü–û–°–¢–û–Ø–ù–ù–´–ú –°–û–•–†–ê–ù–ï–ù–ò–ï–ú
–¢–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞ –≤ —Ñ–∞–π–ª
"""

import json
import socket
import uuid
import os

# –ü–æ—Ä—Ç
PORT = 8000

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'products_data.json'

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_products():
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('products', [])
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            initial_products = [
                {"id": 1, "title": "–§—É—Ç–±–æ–ª–∫–∞", "price": 1500, "description": "–ö—Ä—É—Ç–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞", "image": "üëï", "active": True},
                {"id": 2, "title": "–î–∂–∏–Ω—Å—ã", "price": 3000, "description": "–°—Ç–∏–ª—å–Ω—ã–µ –¥–∂–∏–Ω—Å—ã", "image": "üëñ", "active": True},
                {"id": 3, "title": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏", "price": 5000, "description": "–£–¥–æ–±–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏", "image": "üëü", "active": True},
                {"id": 4, "title": "–ö—É—Ä—Ç–∫–∞", "price": 4000, "description": "–¢–µ–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞", "image": "üß•", "active": True}
            ]
            save_products(initial_products)
            return initial_products
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª
def save_products(products):
    try:
        data = {
            'products': products,
            'last_saved': str(uuid.uuid4())  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        }
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ {DATA_FILE}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
products = load_products()

# –ö–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
carts = {}

def get_cart(user_id):
    if user_id not in carts:
        carts[user_id] = []
    return carts[user_id]

def handle_request(client_socket):
    global products  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    
    request = client_socket.recv(4096).decode('utf-8')
    if not request:
        return
    
    lines = request.split('\n')
    first_line = lines[0]
    parts = first_line.split()
    if len(parts) < 3:
        return
    
    method, path, protocol = parts[0], parts[1], parts[2]
    print(f"üì• {method} {path}")
    
    # API —Ç–æ–≤–∞—Ä–æ–≤
    if path == '/api/products':
        response_body = json.dumps(products, ensure_ascii=False)
        response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
    
    # API –∫–æ—Ä–∑–∏–Ω—ã
    elif path.startswith('/api/cart/'):
        user_id = path.split('/')[-1]
        if method == 'GET':
            cart = get_cart(user_id)
            response_body = json.dumps(cart, ensure_ascii=False)
            response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
        elif method == 'POST':
            content_length = int(request.split('Content-Length: ')[1].split('\n')[0])
            post_data = request.split('\r\n\r\n')[1][:content_length]
            data = json.loads(post_data)
            product_id = data.get('product_id')
            quantity = data.get('quantity', 1)
            
            cart = get_cart(user_id)
            product = None
            for p in products:
                if p['id'] == product_id:
                    product = p
                    break
            
            if product:
                existing_item = None
                for item in cart:
                    if item['product_id'] == product_id:
                        existing_item = item
                        break
                
                if existing_item:
                    existing_item['quantity'] += quantity
                else:
                    cart.append({
                        'id': str(uuid.uuid4()),
                        'product_id': product_id,
                        'title': product['title'],
                        'price': product['price'],
                        'image': product['image'],
                        'quantity': quantity
                    })
                
                response_body = json.dumps({"success": True, "cart": cart}, ensure_ascii=False)
                response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
            else:
                response_body = json.dumps({"success": False, "error": "Product not found"}, ensure_ascii=False)
                response = f"""HTTP/1.1 404 Not Found
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    elif path == '/api/products' and method == 'POST':
        content_length = int(request.split('Content-Length: ')[1].split('\n')[0])
        post_data = request.split('\r\n\r\n')[1][:content_length]
        data = json.loads(post_data)
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID
        max_id = max([p['id'] for p in products]) if products else 0
        
        new_product = {
            "id": max_id + 1,
            "title": data.get('title', '–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä'),
            "price": data.get('price', 0),
            "description": data.get('description', ''),
            "image": data.get('image', 'üì¶'),
            "active": True
        }
        
        products.append(new_product)
        save_products(products)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        
        response_body = json.dumps({"success": True, "product": new_product}, ensure_ascii=False)
        response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    elif path.startswith('/api/products/') and method == 'PUT':
        product_id = int(path.split('/')[-1])
        content_length = int(request.split('Content-Length: ')[1].split('\n')[0])
        post_data = request.split('\r\n\r\n')[1][:content_length]
        data = json.loads(post_data)
        
        for i, product in enumerate(products):
            if product['id'] == product_id:
                products[i] = {
                    "id": product_id,
                    "title": data.get('title', product['title']),
                    "price": data.get('price', product['price']),
                    "description": data.get('description', product['description']),
                    "image": data.get('image', product.get('image', 'üì¶')),
                    "active": True
                }
                save_products(products)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                
                response_body = json.dumps({"success": True, "product": products[i]}, ensure_ascii=False)
                response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
                break
        else:
            response_body = json.dumps({"success": False, "error": "Product not found"}, ensure_ascii=False)
            response = f"""HTTP/1.1 404 Not Found
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–†–ï–ê–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ò–ó –§–ê–ô–õ–ê)
    elif path.startswith('/api/products/') and method == 'DELETE':
        product_id = int(path.split('/')[-1])
        
        for i, product in enumerate(products):
            if product['id'] == product_id:
                del products[i]
                save_products(products)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                
                response_body = json.dumps({"success": True}, ensure_ascii=False)
                response = f"""HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
                break
        else:
            response_body = json.dumps({"success": False, "error": "Product not found"}, ensure_ascii=False)
            response = f"""HTTP/1.1 404 Not Found
Content-Type: application/json; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}
Access-Control-Allow-Origin: *

{response_body}"""
    
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    elif path == '/':
        html_content = """<!DOCTYPE html>
<html><head><title>–ú–∞–≥–∞–∑–∏–Ω —Å –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º</title></head>
<body style="background:#000;color:#fff;font-family:Arial;margin:0;padding:15px;">
<h1 style="text-align:center;margin-bottom:20px;">üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Å –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º</h1>
<div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:20px;">
<input type="text" placeholder="üîç –ü–æ–∏—Å–∫..." id="search" style="padding:8px;background:#111;border:1px solid #333;border-radius:5px;color:#fff;width:200px;">
<button onclick="openCart()" style="background:#4CAF50;color:white;border:none;padding:8px 15px;border-radius:5px;">üõí –ö–æ—Ä–∑–∏–Ω–∞ <span id="cartCount">0</span></button>
<button onclick="toggleAdmin()" style="background:#2196F3;color:white;border:none;padding:8px 15px;border-radius:5px;">‚öôÔ∏è –ê–¥–º–∏–Ω</button>
</div>

<!-- –ñ–ï–°–¢–ö–ê–Ø –ü–†–ò–í–Ø–ó–ö–ê - –í–°–ï–ì–î–ê 2 –°–¢–û–õ–ë–ò–ö–ê -->
<div id="products" style="display:grid;grid-template-columns:1fr 1fr;gap:12px;max-width:800px;margin:0 auto;"></div>

<div id="cartModal" style="display:none;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:1000;">
<div style="background:#111;margin:10% auto;padding:20px;border-radius:10px;width:80%;max-width:500px;">
<h2>üõí –ö–æ—Ä–∑–∏–Ω–∞</h2>
<div id="cartContent"></div>
<button onclick="closeCart()" style="background:#666;color:white;border:none;padding:10px 20px;border-radius:5px;">–ó–∞–∫—Ä—ã—Ç—å</button>
</div>
</div>

<div id="editModal" style="display:none;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:1000;">
<div style="background:#111;margin:10% auto;padding:20px;border-radius:10px;width:80%;max-width:400px;">
<h2 id="editTitle">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</h2>
<form id="editForm">
<input type="hidden" id="editId">
<input type="text" id="editName" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" style="width:100%;padding:8px;margin:5px 0;background:#222;border:1px solid #333;color:#fff;border-radius:4px;">
<input type="number" id="editPrice" placeholder="–¶–µ–Ω–∞" style="width:100%;padding:8px;margin:5px 0;background:#222;border:1px solid #333;color:#fff;border-radius:4px;">
<input type="text" id="editDesc" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" style="width:100%;padding:8px;margin:5px 0;background:#222;border:1px solid #333;color:#fff;border-radius:4px;">
<input type="text" id="editEmoji" placeholder="–≠–º–æ–¥–∑–∏" style="width:100%;padding:8px;margin:5px 0;background:#222;border:1px solid #333;color:#fff;border-radius:4px;">
<button type="submit" style="background:#4CAF50;color:white;border:none;padding:10px 20px;border-radius:5px;width:100%;margin:10px 0;">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ù–ê–í–°–ï–ì–î–ê</button>
</form>
<button onclick="closeEdit()" style="background:#666;color:white;border:none;padding:10px 20px;border-radius:5px;width:100%;">–û—Ç–º–µ–Ω–∞</button>
</div>
</div>

<script>
let products = [];
let cart = [];
let userId = 'user_' + Math.random().toString(36).substr(2, 9);
let isAdmin = false;

async function loadProducts() {
    const response = await fetch('/api/products');
    products = await response.json();
    renderProducts();
}

function renderProducts() {
    let html = products.map(p => `
        <div style="border:1px solid #333;padding:12px;border-radius:8px;height:200px;position:relative;">
            <div style="position:absolute;top:5px;right:5px;display:${isAdmin ? 'flex' : 'none'};gap:3px;">
                <button onclick="editProduct(${p.id})" style="background:#ff9800;color:white;border:none;padding:3px 6px;border-radius:3px;font-size:10px;">‚úèÔ∏è</button>
                <button onclick="deleteProduct(${p.id})" style="background:#f44336;color:white;border:none;padding:3px 6px;border-radius:3px;font-size:10px;">üóëÔ∏è</button>
            </div>
            <div style="height:60px;background:#222;border-radius:6px;display:flex;align-items:center;justify-content:center;font-size:2em;margin-bottom:8px;">${p.image}</div>
            <div style="font-size:13px;font-weight:bold;margin-bottom:4px;">${p.title}</div>
            <div style="color:#ccc;font-size:10px;margin-bottom:6px;">${p.description}</div>
            <div style="color:#4CAF50;font-weight:bold;margin-bottom:8px;">${p.price} ‚ÇΩ</div>
            <div style="display:flex;gap:6px;align-items:center;">
                <button onclick="changeQty(${p.id}, -1)" style="background:#333;color:white;border:none;width:20px;height:20px;border-radius:3px;font-size:10px;">-</button>
                <input type="number" id="qty_${p.id}" value="1" min="1" max="99" style="width:35px;text-align:center;background:#222;border:1px solid #333;color:#fff;padding:2px;font-size:10px;">
                <button onclick="changeQty(${p.id}, 1)" style="background:#333;color:white;border:none;width:20px;height:20px;border-radius:3px;font-size:10px;">+</button>
                <button onclick="addToCart(${p.id})" style="background:#4CAF50;color:white;border:none;padding:4px 8px;border-radius:4px;font-size:10px;flex:1;">‚ûï</button>
            </div>
        </div>
    `).join('');
    
    if (isAdmin) {
        html += `
            <div onclick="addNew()" style="border:2px dashed #555;padding:12px;border-radius:8px;height:200px;display:flex;flex-direction:column;align-items:center;justify-content:center;cursor:pointer;">
                <div style="font-size:2em;color:#666;margin-bottom:8px;">‚ûï</div>
                <div style="color:#666;font-size:12px;">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</div>
            </div>
        `;
    }
    
    document.getElementById('products').innerHTML = html;
}

function changeQty(id, change) {
    const input = document.getElementById('qty_' + id);
    let value = parseInt(input.value) + change;
    if (value < 1) value = 1;
    if (value > 99) value = 99;
    input.value = value;
}

async function addToCart(productId) {
    const quantity = parseInt(document.getElementById('qty_' + productId).value);
    const response = await fetch('/api/cart/' + userId, {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({product_id: productId, quantity: quantity})
    });
    if (response.ok) {
        const result = await response.json();
        cart = result.cart;
        updateCartCount();
        alert('‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!');
        document.getElementById('qty_' + productId).value = 1;
    }
}

function updateCartCount() {
    const count = cart.reduce((sum, item) => sum + item.quantity, 0);
    document.getElementById('cartCount').textContent = count;
}

function openCart() {
    document.getElementById('cartModal').style.display = 'block';
    loadCart();
}

function closeCart() {
    document.getElementById('cartModal').style.display = 'none';
}

async function loadCart() {
    const response = await fetch('/api/cart/' + userId);
    cart = await response.json();
    const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    document.getElementById('cartContent').innerHTML = cart.map(item => `
        <div style="border:1px solid #333;padding:10px;margin:5px 0;border-radius:5px;">
            <strong>${item.title}</strong> - ${item.price} ‚ÇΩ √ó ${item.quantity} = ${item.price * item.quantity} ‚ÇΩ
        </div>
    `).join('') + `<div style="margin-top:10px;font-weight:bold;">–ò—Ç–æ–≥–æ: ${total} ‚ÇΩ</div>`;
}

function toggleAdmin() {
    isAdmin = !isAdmin;
    alert(isAdmin ? 'üëë –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω' : 'üë§ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º');
    renderProducts();
}

function editProduct(id) {
    const product = products.find(p => p.id === id);
    document.getElementById('editId').value = id;
    document.getElementById('editName').value = product.title;
    document.getElementById('editPrice').value = product.price;
    document.getElementById('editDesc').value = product.description;
    document.getElementById('editEmoji').value = product.image;
    document.getElementById('editTitle').textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
    document.getElementById('editModal').style.display = 'block';
}

function addNew() {
    document.getElementById('editId').value = '';
    document.getElementById('editName').value = '';
    document.getElementById('editPrice').value = '';
    document.getElementById('editDesc').value = '';
    document.getElementById('editEmoji').value = 'üì¶';
    document.getElementById('editTitle').textContent = '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
    document.getElementById('editModal').style.display = 'block';
}

document.getElementById('editForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const id = document.getElementById('editId').value;
    const isEdit = id !== '';
    
    const data = {
        title: document.getElementById('editName').value,
        price: parseInt(document.getElementById('editPrice').value),
        description: document.getElementById('editDesc').value,
        image: document.getElementById('editEmoji').value || 'üì¶',
        active: true
    };
    
    try {
        let response;
        if (isEdit) {
            response = await fetch(`/api/products/${id}`, {
                method: 'PUT',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(data)
            });
        } else {
            response = await fetch('/api/products', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(data)
            });
        }
        
        if (response.ok) {
            alert(isEdit ? '‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –ù–ê–í–°–ï–ì–î–ê!' : '‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –ù–ê–í–°–ï–ì–î–ê!');
            closeEdit();
            loadProducts();
        }
    } catch (error) {
        alert('‚ùå –û—à–∏–±–∫–∞');
    }
});

async function deleteProduct(id) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ù–ê–í–°–ï–ì–î–ê –∏–∑ —Ñ–∞–π–ª–∞?')) return;
    
    try {
        const response = await fetch(`/api/products/${id}`, {method: 'DELETE'});
        if (response.ok) {
            alert('‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –ù–ê–í–°–ï–ì–î–ê –∏–∑ —Ñ–∞–π–ª–∞!');
            loadProducts();
        }
    } catch (error) {
        alert('‚ùå –û—à–∏–±–∫–∞');
    }
}

function closeEdit() {
    document.getElementById('editModal').style.display = 'none';
}

loadProducts();
</script>
</body></html>"""
        response = f"""HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: {len(html_content.encode('utf-8'))}

{html_content}"""
    else:
        response_body = "<h1>404 - Not Found</h1>"
        response = f"""HTTP/1.1 404 Not Found
Content-Type: text/html; charset=utf-8
Content-Length: {len(response_body.encode('utf-8'))}

{response_body}"""
    
    client_socket.send(response.encode('utf-8'))
    client_socket.close()

def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind(('', PORT))
    server_socket.listen(5)
    
    print(f"üåê –°–µ—Ä–≤–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{PORT}")
    print(f"üì± –ú–∞–≥–∞–∑–∏–Ω: http://localhost:{PORT}")
    print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª: {DATA_FILE}")
    print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
    
    try:
        while True:
            client_socket, addr = server_socket.accept()
            handle_request(client_socket)
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤...")
        save_products(products)
        server_socket.close()

if __name__ == "__main__":
    start_server()
